/* Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*/

package com.dinisoft.eyewitness

import android.Manifest
import android.annotation.SuppressLint
import android.app.ProgressDialog
import android.app.Service
import android.content.Context
import android.content.Intent
import android.content.IntentSender
import android.content.pm.PackageManager
import android.content.res.AssetFileDescriptor
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.graphics.drawable.GradientDrawable
import android.location.Address
import android.location.Geocoder
import android.location.Location
import android.location.LocationManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.os.Handler
import android.provider.MediaStore
import android.util.Log
import android.view.*
import android.webkit.CookieManager
import android.webkit.PermissionRequest
import android.widget.*
import androidx.annotation.NonNull
import androidx.annotation.RequiresApi
import androidx.appcompat.widget.AppCompatButton
import androidx.appcompat.widget.AppCompatImageView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.core.view.GravityCompat
import androidx.drawerlayout.widget.DrawerLayout
import co.paystack.android.utils.Crypto.encrypt
import com.androidnetworking.AndroidNetworking
import com.androidnetworking.common.Priority
import com.androidnetworking.error.ANError
import com.androidnetworking.interfaces.JSONObjectRequestListener
import com.bumptech.glide.Glide
import com.dinisoft.eyewitness.model.Incident
import com.dinisoft.eyewitness.setting.WebviewGPSTrack
import com.dinisoft.eyewitness.ui.home.HomeActivity
import com.dinisoft.eyewitness.utils.CryptoUtil
import com.google.android.gms.common.api.ApiException
import com.google.android.gms.common.api.ResolvableApiException
import com.google.android.gms.location.*
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.*
import com.google.android.gms.tasks.OnFailureListener
import com.google.android.gms.tasks.OnSuccessListener
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.google.android.material.internal.ViewUtils.getContentView
import com.google.android.material.navigation.NavigationView
import com.google.android.material.snackbar.Snackbar
import com.google.crypto.tink.KeyTemplates
import com.google.crypto.tink.KeysetHandle
import com.google.crypto.tink.hybrid.HybridConfig
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.auth.ktx.auth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import com.google.firebase.storage.*
import infix.imrankst1221.rocket.library.setting.ThemeBaseActivity
import infix.imrankst1221.rocket.library.utility.Constants
import infix.imrankst1221.rocket.library.utility.PreferenceUtils
import infix.imrankst1221.rocket.library.utility.UtilMethods
import kotlinx.android.synthetic.main.activity_home.*
import kotlinx.android.synthetic.main.layout_dash.*
import kotlinx.android.synthetic.main.layout_dash.root_container
import org.json.JSONObject
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.format.FormatStyle
import java.util.*

/**
 * Created by Shamsudeen A. Muhammed (c) 2021
 */

class MapActivity : ThemeBaseActivity(), NavigationView.OnNavigationItemSelectedListener, OnMapReadyCallback, GoogleMap.OnMarkerClickListener {

        companion object {
                private const val MY_PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION = 2200
            private const val CAMERA_PERMISSION_CODE = 100
            private const val STORAGE_PERMISSION_CODE = 101
            private const val LOCATION_PERMISSION_CODE = 103
            private const val PHONE_PERMISSION_CODE = 104
            private const val COAST_LOCATION_PERMISSION_CODE = 105
            private const val READ_STORAGE_PERMISSION_CODE = 106
        }

        private val TAG: String = "---MapActivity"

        private lateinit var mMap: GoogleMap
        private lateinit var mMarkPolice: Marker
        private lateinit var mMarkAccident: Marker
        private lateinit var mMarkRape: Marker
        private lateinit var mMarkRobbery: Marker
        private lateinit var mMarkMurder: Marker
        private lateinit var mMarkTerrorism: Marker
        private lateinit var mMarkFireHazard: Marker
        private lateinit var mMarkFlooding: Marker
        private lateinit var mMarkDrugs: Marker
        private lateinit var mMarkAssault: Marker

        private var cameraPosition: CameraPosition? = null

        // firebase auth, database and incident object
        lateinit var auth: FirebaseAuth
        lateinit var db: FirebaseFirestore
        private lateinit var dbRead: FirebaseFirestore

        // master key set handle variable for encryption and decryption
        private lateinit var masterKeysetHandle: KeysetHandle

        //private lateinit var dbRef: DatabaseReference
        lateinit var mIncident: Incident
        private lateinit var mExoActivity: ExoActivity
        private lateinit var mState: String // For security check
        private lateinit var mCountry: String // For security check

        private lateinit var mAboutUsPopup: PopupWindow
        private lateinit var mSocialNetworkPopup: PopupWindow

        private lateinit var mUploadDialogPopUp: PopupWindow
        private lateinit var mReportDialogPopUp: PopupWindow
        private lateinit var mMarkerDialogVideoPopUp: PopupWindow
        private lateinit var mMarkerDialogAudioPopUp: PopupWindow
        private lateinit var mMarkerDialogImagePopUp: PopupWindow
        private lateinit var mMarkerDialogDocxPopUp: PopupWindow
        private lateinit var mMarkerDialogPdfPopUp: PopupWindow

        private lateinit var mWeatherDialogVideoPopUp: PopupWindow
        private lateinit var mWeatherDialogAudioPopUp: PopupWindow
        private lateinit var mWeatherDialogImagePopUp: PopupWindow
        private lateinit var mWeatherDialogPdfPopUp: PopupWindow
        private lateinit var mWeatherDialogDocxPopUp: PopupWindow

        private var mPermissionRequest: PermissionRequest? = null
        private var mJsRequestCount = 0

        val PDF: Int = 0
        val DOCX: Int = 1
        val AUDIO: Int = 2
        val VIDEO: Int = 3
        val PHOTO: Int = 4

        val TOC_GENERAL = "General"
        val TOC_ASSAULT = "Assault"
        val TOC_FIRE = "Firehazard"
        val TOC_FLOOD = "Flooding"
        val TOC_DRUG = "Illegal-Drugs"
        val TOC_POLICE = "Officer"
        val TOC_ACCIDENT = "Accident"
        val TOC_RAPE = "Sexual-Assault"
        val TOC_ROBBERY = "Theft"
        val TOC_MURDER = "Murder"
        val TOC_TERRORIST = "Terrorism"

        val ref = ""

        lateinit var filePath: Uri

        lateinit var mStorage: FirebaseStorage
        lateinit var mStorageRef: StorageReference
        lateinit var mRefVideo: StorageReference
        lateinit var mRefAudio: StorageReference
        lateinit var mRefPhoto: StorageReference
        lateinit var mRefPDF: StorageReference
        lateinit var mRefDOC: StorageReference

        lateinit var mStorageMeta: StorageMetadata

        lateinit var incidentID: String

        // The entry point to the Fused Location Provider.
        private var fusedLocationProviderClient: FusedLocationProviderClient? = null

        // A default location (Sydney, Australia) and default zoom to use when location permission is
        // not granted.
        private val defaultLocation = LatLng(-33.8523341, 151.2106085)
        private val DEFAULT_ZOOM = 15
        private val PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION = 1
        private val locationPermissionGranted = false

        // The geographical location where the device is currently located. That is, the last-known
        // location retrieved by the Fused Location Provider.
        private var lastKnownLocation: Location? = null

        // Keys for storing activity state.
        // [START maps_current_place_state_keys]
        private val KEY_CAMERA_POSITION = "camera_position"
        private val KEY_LOCATION = "location"

        // [END maps_current_place_state_keys]
        lateinit var geocoder: Geocoder
        private val marker: Marker? = null

        private var mAgencyList = ArrayList<String>()


        @RequiresApi(Build.VERSION_CODES.O)
        override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                setContentView(R.layout.activity_map)
                mContext = this
                // Request permission
                askForPermission(MY_PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION, true)

                // Initialize Firebase Auth
                auth = Firebase.auth
                //signInAnonymously()
                db = Firebase.firestore
                dbRead = Firebase.firestore

                AndroidNetworking.initialize(mContext) // Initializing the networking package
                HybridConfig.register() // Initializing the encryption package
                // Master key for the encryption of an evidence file metadata. Generate the private key material.
                masterKeysetHandle = KeysetHandle.generateNew(KeyTemplates.get("ECIES_P256_COMPRESSED_HKDF_HMAC_SHA256_AES128_GCM"))

                val navigationHeader = navigation_view.getHeaderView(0)
                val navigationTitle = navigationHeader.findViewById<View>(R.id.txt_navigation_title) as TextView
                navigationTitle.text = getString(R.string.app_name)
                val navigationDetails =  navigationHeader.findViewById<View>(R.id.txt_navigation_detail) as TextView
                navigationDetails.text =  getString(R.string.title_user_version)

                initSliderMenu()
                initClickEvent()

                //setActiveFullScreen()
                geocoder = Geocoder(this@MapActivity, Locale.getDefault())

                mStorage = FirebaseStorage.getInstance()
                mStorageRef = mStorage.getReference()
                val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(Date())

                mIncident = Incident()

                // Construct a FusedLocationProviderClient.
                fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this)

            // Get intent string extra tag
            val status = intent.getStringExtra("Tag")
            if (status.equals("user", true)){
                val currentUser = auth.currentUser
            val uid = currentUser?.uid
            if (currentUser != null){
                updateUI(currentUser)
                db.collection("users")
                        .whereEqualTo("uid", uid)
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                val mUID = document.getString("uid").toString()
                                val mDocID = document.getString("documentID").toString()
                                val mName = document.getString("name").toString()
                                val mEmail = document.getString("email").toString()
                                val mPhone = document.getString("phone").toString()
                                val mStat = document.getString("status").toString()
                                val mState = document.getString("state").toString()
                                val mCountry = document.getString("country").toString()
                                val mAcode = document.getString("accesscode").toString()
                                val mStorageUsed = document.getString("storageUsed")!!.toLong()
                                val mStorageCap = document.getString("storageCap")!!.toLong()
                                val mPhotoURL = document.getString("photoURL").toString()

                                val navigationHeader = navigation_view.getHeaderView(0)
                                val navigationLogo = navigationHeader.findViewById<View>(R.id.img_logo) as AppCompatImageView
                                val navigationTitle = navigationHeader.findViewById<View>(R.id.txt_navigation_title) as TextView
                                navigationTitle.text = mName
                                val navigationDetails =  navigationHeader.findViewById<View>(R.id.txt_navigation_detail) as TextView
                                navigationDetails.text =  mState+", "+mCountry

                                val photoURL = auth.currentUser?.photoUrl.toString()
                                Glide.with(this).load(photoURL).into(navigationLogo)
                            }

                        }
            }

            } else if (status.equals("agency", true)) {
                    val currentUser = auth.currentUser
            val uid = currentUser?.uid
            if (currentUser != null){
                updateUI(currentUser)
                db.collection("agency")
                        .whereEqualTo("uid", uid)
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                val mUID = document.getString("uid").toString()
                                val mDocID = document.getString("documentID").toString()
                                val mName = document.getString("name").toString()
                                val mEmail = document.getString("email").toString()
                                val mPhone = document.getString("phone").toString()
                                val mStat = document.getString("status").toString()
                                val mState = document.getString("state").toString()
                                val mCountry = document.getString("country").toString()
                                val mAcode = document.getString("accesscode").toString()
                                val mStorageUsed = document.getString("storageUsed")!!.toLong()
                                val mStorageCap = document.getString("storageCap")!!.toLong()
                                val mPhotoURL = document.getString("photoURL").toString()

                                val navigationHeader = navigation_view.getHeaderView(0)
                                val navigationLogo = navigationHeader.findViewById<View>(R.id.img_logo) as AppCompatImageView
                                val navigationTitle = navigationHeader.findViewById<View>(R.id.txt_navigation_title) as TextView
                                navigationTitle.text = mName
                                val navigationDetails =  navigationHeader.findViewById<View>(R.id.txt_navigation_detail) as TextView
                                navigationDetails.text =  mState+", "+mCountry

                                val photoURL = auth.currentUser?.photoUrl.toString()
                                Glide.with(this).load(photoURL).into(navigationLogo)
                            }

                        }
                }
            }


                // Obtain the SupportMapFragment and get notified when the map is ready to be used.
                val mapFragment = supportFragmentManager
                        .findFragmentById(R.id.map) as SupportMapFragment
                mapFragment.getMapAsync(this)


                val btnOfficer = findViewById<View>(R.id.img_police) as ImageView
                val btnAccident = findViewById<View>(R.id.img_accident) as ImageView
                val btnTheft = findViewById<View>(R.id.img_robbery) as ImageView
                val btnSexAssault = findViewById<View>(R.id.img_rape) as ImageView
                val btnTerrorism = findViewById<View>(R.id.img_terrorist) as ImageView

                btnOfficer.setOnClickListener {
                        val user = auth.currentUser
                        if (user != null){
                                db.collection("officer")
                                        .whereEqualTo("status", "Approved")
                                        .get()
                                        .addOnSuccessListener { result ->
                                                if (result.size() != 0){
                                                        val playList = result.documents
                                                        val random = Random()
                                                        val playIndex = random.nextInt(playList.size)

                                                    val mVisibility = playList[playIndex].getString("visibility")
                                                    if (mVisibility != null && mVisibility.equals("public", true)) {
                                                        // Query officer collection
                                                        db.collection("officer")
                                                                .whereEqualTo("visibility", mVisibility)
                                                                .get()
                                                                .addOnSuccessListener { res ->
                                                                    // Get the total number of approved incident report that has been set to public
                                                                    if (res.size() != null) {
                                                                        val mPlayList = res.documents
                                                                        val mrandom = Random()
                                                                        val mPlayIndex = mrandom.nextInt(mPlayList.size)

                                                                        val mEvidURL = mPlayList[mPlayIndex].getString("evidenceURL")
                                                                        if (mEvidURL != null && mEvidURL.endsWith("-video", true)) {
                                                                            // Download Video to Local File
                                                                            downloadVideoToLocalFile(mEvidURL.substring(0, mEvidURL.toString().lastIndexOf("-video")))
                                                                        } else if (mEvidURL != null && mEvidURL.endsWith("-image", true)) {
                                                                            downloadImageToLocalFile(mEvidURL.substring(0, mEvidURL.toString().lastIndexOf("-image")))
                                                                        } else {
                                                                            val parentLayout: View = findViewById(android.R.id.content)
                                                                            Snackbar.make(parentLayout, "No incident reports available. Try again later.", Snackbar.LENGTH_LONG)
                                                                                    .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                    .show()
                                                                        }

                                                                    }
                                                                }
                                                    }

                                                } else {
                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                        Snackbar.make(parentLayout, "No incident reports available. Try again later.", Snackbar.LENGTH_LONG)
                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                .show()
                                                }
                                        }

                        }
                }

                btnAccident.setOnClickListener {
                        val user = auth.currentUser
                        if (user != null){
                                db.collection("accident")
                                        .whereEqualTo("status", "Approved")
                                        .get()
                                        .addOnSuccessListener { result ->
                                                if (result.size() != 0){
                                                        val playList = result.documents
                                                        val random = Random()
                                                        val playIndex = random.nextInt(playList.size)

                                                    val mVisibility = playList[playIndex].getString("visibility")
                                                    if (mVisibility != null && mVisibility.equals("public", true)) {
                                                        // Query accident collection
                                                        db.collection("accident")
                                                                .whereEqualTo("visibility", mVisibility)
                                                                .get()
                                                                .addOnSuccessListener { res ->
                                                                    // Get the total number of approved incident report that has been set to public
                                                                    if (res.size() != null) {
                                                                        val mPlayList = res.documents
                                                                        val mrandom = Random()
                                                                        val mPlayIndex = mrandom.nextInt(mPlayList.size)

                                                                        val mEvidURL = mPlayList[mPlayIndex].getString("evidenceURL")
                                                                        if (mEvidURL != null && mEvidURL.endsWith("-video", true)) {
                                                                            // Download Video to Local File
                                                                            downloadVideoToLocalFile(mEvidURL.substring(0, mEvidURL.toString().lastIndexOf("-video")))
                                                                        } else if (mEvidURL != null && mEvidURL.endsWith("-image", true)) {
                                                                            downloadImageToLocalFile(mEvidURL.substring(0, mEvidURL.toString().lastIndexOf("-image")))
                                                                        } else {
                                                                            val parentLayout: View = findViewById(android.R.id.content)
                                                                            Snackbar.make(parentLayout, "No incident reports available. Try again later.", Snackbar.LENGTH_LONG)
                                                                                    .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                    .show()
                                                                        }

                                                                    }
                                                                }
                                                    }

                                                } else {
                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                        Snackbar.make(parentLayout, "No incident reports available. Try again later.", Snackbar.LENGTH_LONG)
                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                .show()
                                                }
                                        }
                        }
                }

                btnTheft.setOnClickListener {
                        val user = auth.currentUser
                        if (user != null){
                                db.collection("theft")
                                        .whereEqualTo("status", "Approved")
                                        .get()
                                        .addOnSuccessListener { result ->
                                                if (result.size() != 0){
                                                        val playList = result.documents
                                                        val random = Random()
                                                        val playIndex = random.nextInt(playList.size)

                                                    val mVisibility = playList[playIndex].getString("visibility")
                                                    if (mVisibility != null && mVisibility.equals("public", true)) {
                                                        // Query theft collection
                                                        db.collection("theft")
                                                                .whereEqualTo("visibility", mVisibility)
                                                                .get()
                                                                .addOnSuccessListener { res ->
                                                                    // Get the total number of approved incident report that has been set to public
                                                                    if (res.size() != null) {
                                                                        val mPlayList = res.documents
                                                                        val mrandom = Random()
                                                                        val mPlayIndex = mrandom.nextInt(mPlayList.size)

                                                                        val mEvidURL = mPlayList[mPlayIndex].getString("evidenceURL")
                                                                        if (mEvidURL != null && mEvidURL.endsWith("-video", true)) {
                                                                            // Download Video to Local File
                                                                            downloadVideoToLocalFile(mEvidURL.substring(0, mEvidURL.toString().lastIndexOf("-video")))
                                                                        } else if (mEvidURL != null && mEvidURL.endsWith("-image", true)) {
                                                                            downloadImageToLocalFile(mEvidURL.substring(0, mEvidURL.toString().lastIndexOf("-image")))
                                                                        } else {
                                                                            val parentLayout: View = findViewById(android.R.id.content)
                                                                            Snackbar.make(parentLayout, "No incident reports available. Try again later.", Snackbar.LENGTH_LONG)
                                                                                    .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                    .show()
                                                                        }

                                                                    }
                                                                }
                                                    }

                                                } else {
                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                        Snackbar.make(parentLayout, "No incident reports available. Try again later.", Snackbar.LENGTH_LONG)
                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                .show()
                                                }
                                        }

                        }
                }

                btnSexAssault.setOnClickListener {
                        val user = auth.currentUser
                        if (user != null){
                                db.collection("sexual-assault")
                                        .whereEqualTo("status", "Approved")
                                        .get()
                                        .addOnSuccessListener { result ->
                                                if (result.size() != 0){
                                                        val playList = result.documents
                                                        val random = Random()
                                                        val playIndex = random.nextInt(playList.size)

                                                    val mVisibility = playList[playIndex].getString("visibility")
                                                    if (mVisibility != null && mVisibility.equals("public", true)) {
                                                        // Query sexual-assault collection
                                                        db.collection("sexual-assault")
                                                                .whereEqualTo("visibility", mVisibility)
                                                                .get()
                                                                .addOnSuccessListener { res ->
                                                                    // Get the total number of approved incident report that has been set to public
                                                                    if (res.size() != null) {
                                                                        val mPlayList = res.documents
                                                                        val mrandom = Random()
                                                                        val mPlayIndex = mrandom.nextInt(mPlayList.size)

                                                                        val mEvidURL = mPlayList[mPlayIndex].getString("evidenceURL")
                                                                        if (mEvidURL != null && mEvidURL.endsWith("-video", true)) {
                                                                            // Download Video to Local File
                                                                            downloadVideoToLocalFile(mEvidURL.substring(0, mEvidURL.toString().lastIndexOf("-video")))
                                                                        } else if (mEvidURL != null && mEvidURL.endsWith("-image", true)) {
                                                                            downloadImageToLocalFile(mEvidURL.substring(0, mEvidURL.toString().lastIndexOf("-image")))
                                                                        } else {
                                                                            val parentLayout: View = findViewById(android.R.id.content)
                                                                            Snackbar.make(parentLayout, "No incident reports available. Try again later.", Snackbar.LENGTH_LONG)
                                                                                    .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                    .show()
                                                                        }

                                                                    }
                                                                }
                                                    }

                                                } else {
                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                        Snackbar.make(parentLayout, "No incident reports available. Try again later.", Snackbar.LENGTH_LONG)
                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                .show()
                                                }
                                        }
                        }
                }

                btnTerrorism.setOnClickListener {
                        val user = auth.currentUser
                        if (user != null){
                                db.collection("terrorism")
                                        .whereEqualTo("status", "Approved")
                                        .get()
                                        .addOnSuccessListener { result ->
                                                if (result.size() != 0){
                                                        val playList = result.documents
                                                        val random = Random()
                                                        val playIndex = random.nextInt(playList.size)

                                                    val mVisibility = playList[playIndex].getString("visibility")
                                                    if (mVisibility != null && mVisibility.equals("public", true)) {
                                                        // Query terrorism collection
                                                        db.collection("terrorism")
                                                                .whereEqualTo("visibility", mVisibility)
                                                                .get()
                                                                .addOnSuccessListener { res ->
                                                                    // Get the total number of approved incident report that has been set to public
                                                                    if (res.size() != null) {
                                                                        val mPlayList = res.documents
                                                                        val mrandom = Random()
                                                                        val mPlayIndex = mrandom.nextInt(mPlayList.size)

                                                                        val mEvidURL = mPlayList[mPlayIndex].getString("evidenceURL")
                                                                        if (mEvidURL != null && mEvidURL.endsWith("-video", true)) {
                                                                            // Download Video to Local File
                                                                            downloadVideoToLocalFile(mEvidURL.substring(0, mEvidURL.toString().lastIndexOf("-video")))
                                                                        } else if (mEvidURL != null && mEvidURL.endsWith("-image", true)) {
                                                                            downloadImageToLocalFile(mEvidURL.substring(0, mEvidURL.toString().lastIndexOf("-image")))
                                                                        } else {
                                                                            val parentLayout: View = findViewById(android.R.id.content)
                                                                            Snackbar.make(parentLayout, "No incident reports available. Try again later.", Snackbar.LENGTH_LONG)
                                                                                    .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                    .show()
                                                                        }

                                                                    }
                                                                }
                                                    }

                                                } else {
                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                        Snackbar.make(parentLayout, "No incident reports available. Try again later.", Snackbar.LENGTH_LONG)
                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                .show()
                                                }
                                        }
                        }
                }

            val mExit = findViewById<View>(R.id.img_right_menu_exit) as AppCompatImageView
            mExit.setOnClickListener { exitHomeScreen() }

            val mAbout = findViewById<View>(R.id.img_right_menu) as AppCompatImageView
            mAbout.setOnClickListener { showAboutUs() }

                val mFab = findViewById<View>(R.id.fabButton) as FloatingActionButton
                mFab.setOnClickListener {
                    // Request permisssion
                    askForPermission(PERMISSIONS_REQUEST_CAMERA, true)
                        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                                // TODO: Consider calling
                                //    ActivityCompat#requestPermissions
                                // here to request the missing permissions, and then overriding
                                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                                //                                          int[] grantResults)
                                // to handle the case where the user grants the permission. See the documentation
                                // for ActivityCompat#requestPermissions for more details.
                                return@setOnClickListener
                        }

                        fusedLocationProviderClient?.getLastLocation()
                                ?.addOnSuccessListener(this, OnSuccessListener<Location?> { location ->
                                        // Got last known location. In some rare situations this can be null.
                                        if (location != null) {
                                                // Logic to handle location object
                                                //val clocation = LatLng(location.latitude, location.longitude)
                                                var addresses: List<Address?> = ArrayList()

                                                try {
                                                        addresses = geocoder.getFromLocation(location.latitude, location.longitude, 1)
                                                        //val address = addresses[0]!!.getAddressLine(0) // If any additional address line present than only, check with max available address lines by getMaxAddressLineIndex()

                                                        val city = addresses[0]!!.locality
                                                        val state = addresses[0]!!.adminArea
                                                        val country = addresses[0]!!.countryName
                                                        val postalCode = addresses[0]!!.postalCode
                                                        val knownName = addresses[0]!!.featureName

                                                        mState = state
                                                        mCountry = country

                                                        if (knownName != null && state != null && country != null) {
                                                                // Pass values to showReportDialogHome
                                                                showReportDialogHome("", "", knownName + "" + ", " + city + "" + ", " + state + "" + ", " + country, location.latitude, location.longitude, state, country)
                                                                //Toast.makeText(this@MapActivity, knownName.toString() +""+", "+ city, Toast.LENGTH_LONG).show()
                                                        } else {
                                                                val parentLayout: View = findViewById(android.R.id.content)
                                                                Snackbar.make(parentLayout, "Sorry ♥, you select an unknown address. Please try again.", Snackbar.LENGTH_LONG)
                                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                        .show()
                                                        }

                                                        //mMap.addMarker(MarkerOptions().position(location).title(knownName.toString() +""+", "+ city))

                                                } catch (e: IOException) {
                                                        e.printStackTrace()
                                                }
                                        }
                                })


                        //val location = LatLng(lat, lon)
                        //mMap?.moveCamera(CameraUpdateFactory.newLatLngZoom(location, DEFAULT_ZOOM.toFloat()))
                }
        }


        /*
        private fun signInAnonymously() {
                // [START signin_anonymously]
                auth.signInAnonymously()
                        .addOnCompleteListener(this) { task ->
                                if (task.isSuccessful) {
                                        // Sign in success, update UI with the signed-in user's information
                                        Log.d(TAG, "signInAnonymously:success")
                                        val user = auth.currentUser
                                        updateUI(user)
                                        if (user != null) {
                                                //Toast.makeText(this@MapActivity, "signed in  " + user.uid, Toast.LENGTH_SHORT).show()
                                                val parentLayout: View = findViewById(android.R.id.content)
                                                Snackbar.make(parentLayout, "Welcome Back ♥", Snackbar.LENGTH_LONG)
                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                        .show()
                                        }
                                } else {
                                        // If sign in fails, display a message to the user.
                                        Log.w(TAG, "signInAnonymously:failure", task.exception)
                                        Toast.makeText(baseContext, "Authentication failed.",
                                                Toast.LENGTH_SHORT).show()
                                        updateUI(null)
                                }
                        }
                // [END signin_anonymously]
        }
        */

        /**
         * Manipulates the map once available.
         * This callback is triggered when the map is ready to be used.
         * This is where we can add markers or lines, add listeners or move the camera. In this case,
         * we just add a marker near Sydney, Australia.
         * If Google Play services is not installed on the device, the user will be prompted to install
         * it inside the SupportMapFragment. This method will only be triggered once the user has
         * installed Google Play services and returned to the app.
         */
        override fun onMapReady(googleMap: GoogleMap) {
                mMap = googleMap


                if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                        // TODO: Consider calling
                        //    ActivityCompat#requestPermissions
                        // here to request the missing permissions, and then overriding
                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                        //                                          int[] grantResults)
                        // to handle the case where the user grants the permission. See the documentation
                        // for ActivityCompat#requestPermissions for more details.
                        return
                }

                fusedLocationProviderClient?.getLastLocation()
                        ?.addOnSuccessListener(this, OnSuccessListener<Location?> { location ->
                                // Got last known location. In some rare situations this can be null.
                                if (location != null) {
                                        // Logic to handle location object
                                        val clocation = LatLng(location.latitude, location.longitude)
                                        mMap?.moveCamera(CameraUpdateFactory.newLatLngZoom(clocation, DEFAULT_ZOOM.toFloat()))
                                        mMap.setMyLocationEnabled(true);
                                }
                        })


                // Set a listener for marker click.
                mMap.setOnMarkerClickListener(this)

                // Get current position of a click on map
                mMap.setOnMapClickListener(object : GoogleMap.OnMapClickListener {
                        @RequiresApi(Build.VERSION_CODES.O)
                        override fun onMapClick(latlng: LatLng) {
                                val location = LatLng(latlng.latitude, latlng.longitude)
                                var addresses: List<Address?> = ArrayList()

                                try {
                                        addresses = geocoder.getFromLocation(location.latitude, location.longitude, 1)
                                        //val address = addresses[0]!!.getAddressLine(0) // If any additional address line present than only, check with max available address lines by getMaxAddressLineIndex()

                                        val city = addresses[0]!!.locality
                                        val state = addresses[0]!!.adminArea
                                        val country = addresses[0]!!.countryName
                                        val postalCode = addresses[0]!!.postalCode
                                        val knownName = addresses[0]!!.featureName

                                        mState = state
                                        mCountry = country

                                        if (knownName != null && state != null && country != null) {
                                                // Pass values to showReportDialog
                                                showReportDialog("", "", knownName + "" + ", " + city + "" + ", " + state + "" + ", " + country, location.latitude, location.longitude, state, country)
                                                //Toast.makeText(this@MapActivity, knownName.toString() +""+", "+ city, Toast.LENGTH_LONG).show()
                                        } else {
                                                val parentLayout: View = findViewById(android.R.id.content)
                                                Snackbar.make(parentLayout, "Sorry ♥, you select an unknown address. Please try again.", Snackbar.LENGTH_LONG)
                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                        .show()
                                        }

                                        //mMap.addMarker(MarkerOptions().position(location).title(knownName.toString() +""+", "+ city))

                                } catch (e: IOException) {
                                        e.printStackTrace()
                                }

                        }
                })


                dbRead.collection("officer")
                        .whereEqualTo("status", "Approved")
                        .get()
                        .addOnSuccessListener { result ->
                                for (document in result) {
                                        //Log.d(TAG, "${document.id} => ${document.data}")

                                        val id = document.getString("id")
                                        val type = document.getString("type")
                                        val title = document.getString("title")
                                        val desc = document.getString("desc")
                                        val address = document.getString("address")
                                        val date = document.getString("date")
                                        val evid = document.getString("evidenceURL")
                                        val latitude = document.getDouble("latitude")
                                        val longitude = document.getDouble("longitude")
                                        val visibility = document.getString("visibility")

                                        var current = LocalDateTime.now()
                                        var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                                        var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date

                                        val cleanDate = date.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()
                                        val cleanNow = fullLocaleTime.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()

                                        if (cleanDate != null && cleanDate.equals(cleanNow, true)) {

                                            if (visibility != null && visibility.equals("public", true)) {
                                            // Add marker on the map
                                            val location = LatLng(latitude!!, longitude!!)
                                            mMarkPolice = mMap.addMarker(
                                                    MarkerOptions()
                                                            .position(location)
                                                            .title(type + " Incident Report")
                                                            .snippet(date)
                                                            .icon(BitmapDescriptorFactory.fromResource(R.drawable.police)))
                                            mMarkPolice.tag = evid

                                            } else if (visibility != null && visibility.equals("private", true)) {
                                            // Get intent string extra tag
                                            val status = intent.getStringExtra("Tag")
                                            val currentUser = auth.currentUser
                                            val uid = currentUser!!.uid

                                            if (status != null && status.equals("user", true)) {
                                                dbRead.collection("officer")
                                                        .whereEqualTo("id", uid)
                                                        .get()
                                                        .addOnSuccessListener { res ->
                                                            for (doc in res) {
                                                                val id = doc.getString("id")
                                                                val type = doc.getString("type")
                                                                val title = doc.getString("title")
                                                                val desc = doc.getString("desc")
                                                                val address = doc.getString("address")
                                                                val date = doc.getString("date")
                                                                val evid = doc.getString("evidenceURL")
                                                                val latitude = doc.getDouble("latitude")
                                                                val longitude = doc.getDouble("longitude")
                                                                val visibility = doc.getString("visibility")

                                                                // Add marker on the map
                                                                val location = LatLng(latitude!!, longitude!!)
                                                                mMarkPolice = mMap.addMarker(
                                                                        MarkerOptions()
                                                                                .position(location)
                                                                                .title(type + " Incident Report")
                                                                                .snippet(date)
                                                                                .icon(BitmapDescriptorFactory.fromResource(R.drawable.police)))
                                                                mMarkPolice.tag = evid
                                                            }
                                                        }

                                            } else if (status != null && status.equals("agency", true)) {
                                                dbRead.collection("agency")
                                                        .whereEqualTo("uid", uid)
                                                        .get()
                                                        .addOnSuccessListener { res ->
                                                            for (doc in res) {
                                                                val agencyName = doc.getString("name").toString()
                                                                if (agencyName != null) {
                                                                    dbRead.collection("officer")
                                                                            .whereEqualTo("reportedTo", agencyName)
                                                                            .get()
                                                                            .addOnSuccessListener { r ->
                                                                                for (d in r) {
                                                                                    val id = d.getString("id")
                                                                                    val type = d.getString("type")
                                                                                    val title = d.getString("title")
                                                                                    val desc = d.getString("desc")
                                                                                    val address = d.getString("address")
                                                                                    val date = d.getString("date")
                                                                                    val evid = d.getString("evidenceURL")
                                                                                    val latitude = d.getDouble("latitude")
                                                                                    val longitude = d.getDouble("longitude")
                                                                                    val visibility = d.getString("visibility")

                                                                                    // Add marker on the map
                                                                                    val location = LatLng(latitude!!, longitude!!)
                                                                                    mMarkPolice = mMap.addMarker(
                                                                                            MarkerOptions()
                                                                                                    .position(location)
                                                                                                    .title(type + " Incident Report")
                                                                                                    .snippet(date)
                                                                                                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.police)))
                                                                                    mMarkPolice.tag = evid
                                                                                }
                                                                            }
                                                                }
                                                            }
                                                        }
                                            }

                                    }
                                        }

                                    //}
                                }


                        }
                        .addOnFailureListener { exception ->
                                //Log.d(TAG, "Error getting documents: ", exception)
                        }


            dbRead.collection("accident")
                    .whereEqualTo("status", "Approved")
                    .get()
                    .addOnSuccessListener { result ->
                        for (document in result) {
                            //Log.d(TAG, "${document.id} => ${document.data}")

                            val id = document.getString("id")
                            val type = document.getString("type")
                            val title = document.getString("title")
                            val desc = document.getString("desc")
                            val address = document.getString("address")
                            val date = document.getString("date")
                            val evid = document.getString("evidenceURL")
                            val latitude = document.getDouble("latitude")
                            val longitude = document.getDouble("longitude")
                            val visibility = document.getString("visibility")

                            var current = LocalDateTime.now()
                            var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                            var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date

                            val cleanDate = date.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()
                            val cleanNow = fullLocaleTime.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()

                            if (cleanDate != null && cleanDate.equals(cleanNow, true)) {
                                if (visibility != null && visibility.equals("public", true)) {
                                // Add marker on the map
                                val location = LatLng(latitude!!, longitude!!)
                                mMarkAccident = mMap.addMarker(
                                        MarkerOptions()
                                                .position(location)
                                                .title(type + " Incident Report")
                                                .snippet(date)
                                                .icon(BitmapDescriptorFactory.fromResource(R.drawable.accident)))
                                mMarkAccident.tag = evid

                            } else if (visibility != null && visibility.equals("private", true)) {
                                // Get intent string extra tag
                                val status = intent.getStringExtra("Tag")
                                val currentUser = auth.currentUser
                                val uid = currentUser!!.uid

                                if (status != null && status.equals("user", true)) {
                                    dbRead.collection("accident")
                                            .whereEqualTo("id", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val id = doc.getString("id")
                                                    val type = doc.getString("type")
                                                    val title = doc.getString("title")
                                                    val desc = doc.getString("desc")
                                                    val address = doc.getString("address")
                                                    val date = doc.getString("date")
                                                    val evid = doc.getString("evidenceURL")
                                                    val latitude = doc.getDouble("latitude")
                                                    val longitude = doc.getDouble("longitude")
                                                    val visibility = doc.getString("visibility")

                                                    // Add marker on the map
                                                    val location = LatLng(latitude!!, longitude!!)
                                                    mMarkAccident = mMap.addMarker(
                                                            MarkerOptions()
                                                                    .position(location)
                                                                    .title(type + " Incident Report")
                                                                    .snippet(date)
                                                                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.accident)))
                                                    mMarkAccident.tag = evid
                                                }
                                            }

                                } else if (status != null && status.equals("agency", true)) {
                                    dbRead.collection("agency")
                                            .whereEqualTo("uid", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val agencyName = doc.getString("name").toString()
                                                    if (agencyName != null) {
                                                        dbRead.collection("accident")
                                                                .whereEqualTo("reportedTo", agencyName)
                                                                .get()
                                                                .addOnSuccessListener { r ->
                                                                    for (d in r) {
                                                                        val id = d.getString("id")
                                                                        val type = d.getString("type")
                                                                        val title = d.getString("title")
                                                                        val desc = d.getString("desc")
                                                                        val address = d.getString("address")
                                                                        val date = d.getString("date")
                                                                        val evid = d.getString("evidenceURL")
                                                                        val latitude = d.getDouble("latitude")
                                                                        val longitude = d.getDouble("longitude")
                                                                        val visibility = d.getString("visibility")

                                                                        // Add marker on the map
                                                                        val location = LatLng(latitude!!, longitude!!)
                                                                        mMarkAccident = mMap.addMarker(
                                                                                MarkerOptions()
                                                                                        .position(location)
                                                                                        .title(type + " Incident Report")
                                                                                        .snippet(date)
                                                                                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.accident)))
                                                                        mMarkAccident.tag = evid
                                                                    }
                                                                }
                                                    }
                                                }
                                            }
                                }

                            }
                            }


                            //}
                        }


                    }
                    .addOnFailureListener { exception ->
                        //Log.d(TAG, "Error getting documents: ", exception)
                    }

            dbRead.collection("sexual-assault")
                    .whereEqualTo("status", "Approved")
                    .get()
                    .addOnSuccessListener { result ->
                        for (document in result) {
                            //Log.d(TAG, "${document.id} => ${document.data}")

                            val id = document.getString("id")
                            val type = document.getString("type")
                            val title = document.getString("title")
                            val desc = document.getString("desc")
                            val address = document.getString("address")
                            val date = document.getString("date")
                            val evid = document.getString("evidenceURL")
                            val latitude = document.getDouble("latitude")
                            val longitude = document.getDouble("longitude")
                            val visibility = document.getString("visibility")

                            var current = LocalDateTime.now()
                            var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                            var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date

                            val cleanDate = date.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()
                            val cleanNow = fullLocaleTime.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()

                            if (cleanDate != null && cleanDate.equals(cleanNow, true)) {
                                if (visibility != null && visibility.equals("public", true)) {
                                // Add marker on the map
                                val location = LatLng(latitude!!, longitude!!)
                                mMarkRape = mMap.addMarker(
                                        MarkerOptions()
                                                .position(location)
                                                .title(type + " Incident Report")
                                                .snippet(date)
                                                .icon(BitmapDescriptorFactory.fromResource(R.drawable.rape)))
                                mMarkRape.tag = evid

                            } else if (visibility != null && visibility.equals("private", true)) {
                                // Get intent string extra tag
                                val status = intent.getStringExtra("Tag")
                                val currentUser = auth.currentUser
                                val uid = currentUser!!.uid

                                if (status != null && status.equals("user", true)) {
                                    dbRead.collection("sexual-assault")
                                            .whereEqualTo("id", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val id = doc.getString("id")
                                                    val type = doc.getString("type")
                                                    val title = doc.getString("title")
                                                    val desc = doc.getString("desc")
                                                    val address = doc.getString("address")
                                                    val date = doc.getString("date")
                                                    val evid = doc.getString("evidenceURL")
                                                    val latitude = doc.getDouble("latitude")
                                                    val longitude = doc.getDouble("longitude")
                                                    val visibility = doc.getString("visibility")

                                                    // Add marker on the map
                                                    val location = LatLng(latitude!!, longitude!!)
                                                    mMarkRape = mMap.addMarker(
                                                            MarkerOptions()
                                                                    .position(location)
                                                                    .title(type + " Incident Report")
                                                                    .snippet(date)
                                                                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.rape)))
                                                    mMarkRape.tag = evid
                                                }
                                            }

                                } else if (status != null && status.equals("agency", true)) {
                                    dbRead.collection("agency")
                                            .whereEqualTo("uid", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val agencyName = doc.getString("name").toString()
                                                    if (agencyName != null) {
                                                        dbRead.collection("sexual-assault")
                                                                .whereEqualTo("reportedTo", agencyName)
                                                                .get()
                                                                .addOnSuccessListener { r ->
                                                                    for (d in r) {
                                                                        val id = d.getString("id")
                                                                        val type = d.getString("type")
                                                                        val title = d.getString("title")
                                                                        val desc = d.getString("desc")
                                                                        val address = d.getString("address")
                                                                        val date = d.getString("date")
                                                                        val evid = d.getString("evidenceURL")
                                                                        val latitude = d.getDouble("latitude")
                                                                        val longitude = d.getDouble("longitude")
                                                                        val visibility = d.getString("visibility")

                                                                        // Add marker on the map
                                                                        val location = LatLng(latitude!!, longitude!!)
                                                                        mMarkRape = mMap.addMarker(
                                                                                MarkerOptions()
                                                                                        .position(location)
                                                                                        .title(type + " Incident Report")
                                                                                        .snippet(date)
                                                                                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.rape)))
                                                                        mMarkRape.tag = evid
                                                                    }
                                                                }
                                                    }
                                                }
                                            }
                                }

                            }
                            }


                            //}
                        }


                    }
                    .addOnFailureListener { exception ->
                        //Log.d(TAG, "Error getting documents: ", exception)
                    }


            dbRead.collection("murder")
                    .whereEqualTo("status", "Approved")
                    .get()
                    .addOnSuccessListener { result ->
                        for (document in result) {
                            //Log.d(TAG, "${document.id} => ${document.data}")

                            val id = document.getString("id")
                            val type = document.getString("type")
                            val title = document.getString("title")
                            val desc = document.getString("desc")
                            val address = document.getString("address")
                            val date = document.getString("date")
                            val evid = document.getString("evidenceURL")
                            val latitude = document.getDouble("latitude")
                            val longitude = document.getDouble("longitude")
                            val visibility = document.getString("visibility")

                            var current = LocalDateTime.now()
                            var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                            var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date

                            val cleanDate = date.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()
                            val cleanNow = fullLocaleTime.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()

                            if (cleanDate != null && cleanDate.equals(cleanNow, true)) {
                                if (visibility != null && visibility.equals("public", true)) {
                                // Add marker on the map
                                val location = LatLng(latitude!!, longitude!!)
                                mMarkMurder = mMap.addMarker(
                                        MarkerOptions()
                                                .position(location)
                                                .title(type + " Incident Report")
                                                .snippet(date)
                                                .icon(BitmapDescriptorFactory.fromResource(R.drawable.murder)))
                                mMarkMurder.tag = evid

                            } else if (visibility != null && visibility.equals("private", true)) {
                                // Get intent string extra tag
                                val status = intent.getStringExtra("Tag")
                                val currentUser = auth.currentUser
                                val uid = currentUser!!.uid

                                if (status != null && status.equals("user", true)) {
                                    dbRead.collection("murder")
                                            .whereEqualTo("id", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val id = doc.getString("id")
                                                    val type = doc.getString("type")
                                                    val title = doc.getString("title")
                                                    val desc = doc.getString("desc")
                                                    val address = doc.getString("address")
                                                    val date = doc.getString("date")
                                                    val evid = doc.getString("evidenceURL")
                                                    val latitude = doc.getDouble("latitude")
                                                    val longitude = doc.getDouble("longitude")
                                                    val visibility = doc.getString("visibility")

                                                    // Add marker on the map
                                                    val location = LatLng(latitude!!, longitude!!)
                                                    mMarkMurder = mMap.addMarker(
                                                            MarkerOptions()
                                                                    .position(location)
                                                                    .title(type + " Incident Report")
                                                                    .snippet(date)
                                                                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.murder)))
                                                    mMarkMurder.tag = evid
                                                }
                                            }

                                } else if (status != null && status.equals("agency", true)) {
                                    dbRead.collection("agency")
                                            .whereEqualTo("uid", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val agencyName = doc.getString("name").toString()
                                                    if (agencyName != null) {
                                                        dbRead.collection("murder")
                                                                .whereEqualTo("reportedTo", agencyName)
                                                                .get()
                                                                .addOnSuccessListener { r ->
                                                                    for (d in r) {
                                                                        val id = d.getString("id")
                                                                        val type = d.getString("type")
                                                                        val title = d.getString("title")
                                                                        val desc = d.getString("desc")
                                                                        val address = d.getString("address")
                                                                        val date = d.getString("date")
                                                                        val evid = d.getString("evidenceURL")
                                                                        val latitude = d.getDouble("latitude")
                                                                        val longitude = d.getDouble("longitude")
                                                                        val visibility = d.getString("visibility")

                                                                        // Add marker on the map
                                                                        val location = LatLng(latitude!!, longitude!!)
                                                                        mMarkMurder = mMap.addMarker(
                                                                                MarkerOptions()
                                                                                        .position(location)
                                                                                        .title(type + " Incident Report")
                                                                                        .snippet(date)
                                                                                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.murder)))
                                                                        mMarkMurder.tag = evid
                                                                    }
                                                                }
                                                    }
                                                }
                                            }
                                }

                            }

                            }



                            //}
                        }


                    }
                    .addOnFailureListener { exception ->
                        //Log.d(TAG, "Error getting documents: ", exception)
                    }


            dbRead.collection("theft")
                    .whereEqualTo("status", "Approved")
                    .get()
                    .addOnSuccessListener { result ->
                        for (document in result) {
                            //Log.d(TAG, "${document.id} => ${document.data}")

                            val id = document.getString("id")
                            val type = document.getString("type")
                            val title = document.getString("title")
                            val desc = document.getString("desc")
                            val address = document.getString("address")
                            val date = document.getString("date")
                            val evid = document.getString("evidenceURL")
                            val latitude = document.getDouble("latitude")
                            val longitude = document.getDouble("longitude")
                            val visibility = document.getString("visibility")

                            var current = LocalDateTime.now()
                            var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                            var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date

                            val cleanDate = date.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()
                            val cleanNow = fullLocaleTime.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()

                            if (cleanDate != null && cleanDate.equals(cleanNow, true)) {
                                if (visibility != null && visibility.equals("public", true)) {
                                // Add marker on the map
                                val location = LatLng(latitude!!, longitude!!)
                                mMarkRobbery = mMap.addMarker(
                                        MarkerOptions()
                                                .position(location)
                                                .title(type + " Incident Report")
                                                .snippet(date)
                                                .icon(BitmapDescriptorFactory.fromResource(R.drawable.robbery)))
                                mMarkRobbery.tag = evid

                            } else if (visibility != null && visibility.equals("private", true)) {
                                // Get intent string extra tag
                                val status = intent.getStringExtra("Tag")
                                val currentUser = auth.currentUser
                                val uid = currentUser!!.uid

                                if (status != null && status.equals("user", true)) {
                                    dbRead.collection("theft")
                                            .whereEqualTo("id", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val id = doc.getString("id")
                                                    val type = doc.getString("type")
                                                    val title = doc.getString("title")
                                                    val desc = doc.getString("desc")
                                                    val address = doc.getString("address")
                                                    val date = doc.getString("date")
                                                    val evid = doc.getString("evidenceURL")
                                                    val latitude = doc.getDouble("latitude")
                                                    val longitude = doc.getDouble("longitude")
                                                    val visibility = doc.getString("visibility")

                                                    // Add marker on the map
                                                    val location = LatLng(latitude!!, longitude!!)
                                                    mMarkRobbery = mMap.addMarker(
                                                            MarkerOptions()
                                                                    .position(location)
                                                                    .title(type + " Incident Report")
                                                                    .snippet(date)
                                                                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.robbery)))
                                                    mMarkRobbery.tag = evid
                                                }
                                            }

                                } else if (status != null && status.equals("agency", true)) {
                                    dbRead.collection("agency")
                                            .whereEqualTo("uid", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val agencyName = doc.getString("name").toString()
                                                    if (agencyName != null) {
                                                        dbRead.collection("theft")
                                                                .whereEqualTo("reportedTo", agencyName)
                                                                .get()
                                                                .addOnSuccessListener { r ->
                                                                    for (d in r) {
                                                                        val id = d.getString("id")
                                                                        val type = d.getString("type")
                                                                        val title = d.getString("title")
                                                                        val desc = d.getString("desc")
                                                                        val address = d.getString("address")
                                                                        val date = d.getString("date")
                                                                        val evid = d.getString("evidenceURL")
                                                                        val latitude = d.getDouble("latitude")
                                                                        val longitude = d.getDouble("longitude")
                                                                        val visibility = d.getString("visibility")

                                                                        // Add marker on the map
                                                                        val location = LatLng(latitude!!, longitude!!)
                                                                        mMarkRobbery = mMap.addMarker(
                                                                                MarkerOptions()
                                                                                        .position(location)
                                                                                        .title(type + " Incident Report")
                                                                                        .snippet(date)
                                                                                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.robbery)))
                                                                        mMarkRobbery.tag = evid
                                                                    }
                                                                }
                                                    }
                                                }
                                            }
                                }

                            }
                            }


                            //}
                        }


                    }
                    .addOnFailureListener { exception ->
                        //Log.d(TAG, "Error getting documents: ", exception)
                    }


            dbRead.collection("terrorism")
                    .whereEqualTo("status", "Approved")
                    .get()
                    .addOnSuccessListener { result ->
                        for (document in result) {
                            //Log.d(TAG, "${document.id} => ${document.data}")

                            val id = document.getString("id")
                            val type = document.getString("type")
                            val title = document.getString("title")
                            val desc = document.getString("desc")
                            val address = document.getString("address")
                            val date = document.getString("date")
                            val evid = document.getString("evidenceURL")
                            val latitude = document.getDouble("latitude")
                            val longitude = document.getDouble("longitude")
                            val visibility = document.getString("visibility")

                            var current = LocalDateTime.now()
                            var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                            var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date

                            val cleanDate = date.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()
                            val cleanNow = fullLocaleTime.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()

                            if (cleanDate != null && cleanDate.equals(cleanNow, true)) {
                                if (visibility != null && visibility.equals("public", true)) {
                                // Add marker on the map
                                val location = LatLng(latitude!!, longitude!!)
                                mMarkTerrorism = mMap.addMarker(
                                        MarkerOptions()
                                                .position(location)
                                                .title(type + " Incident Report")
                                                .snippet(date)
                                                .icon(BitmapDescriptorFactory.fromResource(R.drawable.terrorist)))
                                mMarkTerrorism.tag = evid

                            } else if (visibility != null && visibility.equals("private", true)) {
                                // Get intent string extra tag
                                val status = intent.getStringExtra("Tag")
                                val currentUser = auth.currentUser
                                val uid = currentUser!!.uid

                                if (status != null && status.equals("user", true)) {
                                    dbRead.collection("terrorism")
                                            .whereEqualTo("id", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val id = doc.getString("id")
                                                    val type = doc.getString("type")
                                                    val title = doc.getString("title")
                                                    val desc = doc.getString("desc")
                                                    val address = doc.getString("address")
                                                    val date = doc.getString("date")
                                                    val evid = doc.getString("evidenceURL")
                                                    val latitude = doc.getDouble("latitude")
                                                    val longitude = doc.getDouble("longitude")
                                                    val visibility = doc.getString("visibility")

                                                    // Add marker on the map
                                                    val location = LatLng(latitude!!, longitude!!)
                                                    mMarkTerrorism = mMap.addMarker(
                                                            MarkerOptions()
                                                                    .position(location)
                                                                    .title(type + " Incident Report")
                                                                    .snippet(date)
                                                                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.terrorist)))
                                                    mMarkTerrorism.tag = evid
                                                }
                                            }

                                } else if (status != null && status.equals("agency", true)) {
                                    dbRead.collection("agency")
                                            .whereEqualTo("uid", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val agencyName = doc.getString("name").toString()
                                                    if (agencyName != null) {
                                                        dbRead.collection("terrorism")
                                                                .whereEqualTo("reportedTo", agencyName)
                                                                .get()
                                                                .addOnSuccessListener { r ->
                                                                    for (d in r) {
                                                                        val id = d.getString("id")
                                                                        val type = d.getString("type")
                                                                        val title = d.getString("title")
                                                                        val desc = d.getString("desc")
                                                                        val address = d.getString("address")
                                                                        val date = d.getString("date")
                                                                        val evid = d.getString("evidenceURL")
                                                                        val latitude = d.getDouble("latitude")
                                                                        val longitude = d.getDouble("longitude")
                                                                        val visibility = d.getString("visibility")

                                                                        // Add marker on the map
                                                                        val location = LatLng(latitude!!, longitude!!)
                                                                        mMarkTerrorism = mMap.addMarker(
                                                                                MarkerOptions()
                                                                                        .position(location)
                                                                                        .title(type + " Incident Report")
                                                                                        .snippet(date)
                                                                                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.terrorist)))
                                                                        mMarkTerrorism.tag = evid
                                                                    }
                                                                }
                                                    }
                                                }
                                            }
                                }

                            }
                            }


                            //}
                        }


                    }
                    .addOnFailureListener { exception ->
                        //Log.d(TAG, "Error getting documents: ", exception)
                    }


            dbRead.collection("firehazard")
                    .whereEqualTo("status", "Approved")
                    .get()
                    .addOnSuccessListener { result ->
                        for (document in result) {
                            //Log.d(TAG, "${document.id} => ${document.data}")

                            val id = document.getString("id")
                            val type = document.getString("type")
                            val title = document.getString("title")
                            val desc = document.getString("desc")
                            val address = document.getString("address")
                            val date = document.getString("date")
                            val evid = document.getString("evidenceURL")
                            val latitude = document.getDouble("latitude")
                            val longitude = document.getDouble("longitude")
                            val visibility = document.getString("visibility")

                            var current = LocalDateTime.now()
                            var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                            var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date

                            val cleanDate = date.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()
                            val cleanNow = fullLocaleTime.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()

                            if (cleanDate != null && cleanDate.equals(cleanNow, true)) {
                                if (visibility != null && visibility.equals("public", true)) {
                                // Add marker on the map
                                val location = LatLng(latitude!!, longitude!!)
                                mMarkFireHazard = mMap.addMarker(
                                        MarkerOptions()
                                                .position(location)
                                                .title(type + " Incident Report")
                                                .snippet(date)
                                                .icon(BitmapDescriptorFactory.fromResource(R.drawable.fire)))
                                mMarkFireHazard.tag = evid

                            } else if (visibility != null && visibility.equals("private", true)) {
                                // Get intent string extra tag
                                val status = intent.getStringExtra("Tag")
                                val currentUser = auth.currentUser
                                val uid = currentUser!!.uid

                                if (status != null && status.equals("user", true)) {
                                    dbRead.collection("firehazard")
                                            .whereEqualTo("id", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val id = doc.getString("id")
                                                    val type = doc.getString("type")
                                                    val title = doc.getString("title")
                                                    val desc = doc.getString("desc")
                                                    val address = doc.getString("address")
                                                    val date = doc.getString("date")
                                                    val evid = doc.getString("evidenceURL")
                                                    val latitude = doc.getDouble("latitude")
                                                    val longitude = doc.getDouble("longitude")
                                                    val visibility = doc.getString("visibility")

                                                    // Add marker on the map
                                                    val location = LatLng(latitude!!, longitude!!)
                                                    mMarkFireHazard = mMap.addMarker(
                                                            MarkerOptions()
                                                                    .position(location)
                                                                    .title(type + " Incident Report")
                                                                    .snippet(date)
                                                                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.fire)))
                                                    mMarkFireHazard.tag = evid
                                                }
                                            }

                                } else if (status != null && status.equals("agency", true)) {
                                    dbRead.collection("agency")
                                            .whereEqualTo("uid", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val agencyName = doc.getString("name").toString()
                                                    if (agencyName != null) {
                                                        dbRead.collection("firehazard")
                                                                .whereEqualTo("reportedTo", agencyName)
                                                                .get()
                                                                .addOnSuccessListener { r ->
                                                                    for (d in r) {
                                                                        val id = d.getString("id")
                                                                        val type = d.getString("type")
                                                                        val title = d.getString("title")
                                                                        val desc = d.getString("desc")
                                                                        val address = d.getString("address")
                                                                        val date = d.getString("date")
                                                                        val evid = d.getString("evidenceURL")
                                                                        val latitude = d.getDouble("latitude")
                                                                        val longitude = d.getDouble("longitude")
                                                                        val visibility = d.getString("visibility")

                                                                        // Add marker on the map
                                                                        val location = LatLng(latitude!!, longitude!!)
                                                                        mMarkFireHazard = mMap.addMarker(
                                                                                MarkerOptions()
                                                                                        .position(location)
                                                                                        .title(type + " Incident Report")
                                                                                        .snippet(date)
                                                                                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.fire)))
                                                                        mMarkFireHazard.tag = evid
                                                                    }
                                                                }
                                                    }
                                                }
                                            }
                                }

                            }

                            }


                            //}
                        }


                    }
                    .addOnFailureListener { exception ->
                        //Log.d(TAG, "Error getting documents: ", exception)
                    }


            dbRead.collection("flooding")
                    .whereEqualTo("status", "Approved")
                    .get()
                    .addOnSuccessListener { result ->
                        for (document in result) {
                            //Log.d(TAG, "${document.id} => ${document.data}")

                            val id = document.getString("id")
                            val type = document.getString("type")
                            val title = document.getString("title")
                            val desc = document.getString("desc")
                            val address = document.getString("address")
                            val date = document.getString("date")
                            val evid = document.getString("evidenceURL")
                            val latitude = document.getDouble("latitude")
                            val longitude = document.getDouble("longitude")
                            val visibility = document.getString("visibility")

                            var current = LocalDateTime.now()
                            var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                            var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date

                            val cleanDate = date.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()
                            val cleanNow = fullLocaleTime.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()

                            if (cleanDate != null && cleanDate.equals(cleanNow, true)) {
                                if (visibility != null && visibility.equals("public", true)) {
                                // Add marker on the map
                                val location = LatLng(latitude!!, longitude!!)
                                mMarkFlooding = mMap.addMarker(
                                        MarkerOptions()
                                                .position(location)
                                                .title(type + " Incident Report")
                                                .snippet(date)
                                                .icon(BitmapDescriptorFactory.fromResource(R.drawable.flood)))
                                mMarkFlooding.tag = evid

                            } else if (visibility != null && visibility.equals("private", true)) {
                                // Get intent string extra tag
                                val status = intent.getStringExtra("Tag")
                                val currentUser = auth.currentUser
                                val uid = currentUser!!.uid

                                if (status != null && status.equals("user", true)) {
                                    dbRead.collection("flooding")
                                            .whereEqualTo("id", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val id = doc.getString("id")
                                                    val type = doc.getString("type")
                                                    val title = doc.getString("title")
                                                    val desc = doc.getString("desc")
                                                    val address = doc.getString("address")
                                                    val date = doc.getString("date")
                                                    val evid = doc.getString("evidenceURL")
                                                    val latitude = doc.getDouble("latitude")
                                                    val longitude = doc.getDouble("longitude")
                                                    val visibility = doc.getString("visibility")

                                                    // Add marker on the map
                                                    val location = LatLng(latitude!!, longitude!!)
                                                    mMarkFlooding = mMap.addMarker(
                                                            MarkerOptions()
                                                                    .position(location)
                                                                    .title(type + " Incident Report")
                                                                    .snippet(date)
                                                                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.flood)))
                                                    mMarkFlooding.tag = evid
                                                }
                                            }

                                } else if (status != null && status.equals("agency", true)) {
                                    dbRead.collection("agency")
                                            .whereEqualTo("uid", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val agencyName = doc.getString("name").toString()
                                                    if (agencyName != null) {
                                                        dbRead.collection("flooding")
                                                                .whereEqualTo("reportedTo", agencyName)
                                                                .get()
                                                                .addOnSuccessListener { r ->
                                                                    for (d in r) {
                                                                        val id = d.getString("id")
                                                                        val type = d.getString("type")
                                                                        val title = d.getString("title")
                                                                        val desc = d.getString("desc")
                                                                        val address = d.getString("address")
                                                                        val date = d.getString("date")
                                                                        val evid = d.getString("evidenceURL")
                                                                        val latitude = d.getDouble("latitude")
                                                                        val longitude = d.getDouble("longitude")
                                                                        val visibility = d.getString("visibility")

                                                                        // Add marker on the map
                                                                        val location = LatLng(latitude!!, longitude!!)
                                                                        mMarkFlooding = mMap.addMarker(
                                                                                MarkerOptions()
                                                                                        .position(location)
                                                                                        .title(type + " Incident Report")
                                                                                        .snippet(date)
                                                                                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.flood)))
                                                                        mMarkFlooding.tag = evid
                                                                    }
                                                                }
                                                    }
                                                }
                                            }
                                }

                            }
                            }


                            //}
                        }


                    }
                    .addOnFailureListener { exception ->
                        //Log.d(TAG, "Error getting documents: ", exception)
                    }


            dbRead.collection("illegal-drugs")
                    .whereEqualTo("status", "Approved")
                    .get()
                    .addOnSuccessListener { result ->
                        for (document in result) {
                            //Log.d(TAG, "${document.id} => ${document.data}")

                            val id = document.getString("id")
                            val type = document.getString("type")
                            val title = document.getString("title")
                            val desc = document.getString("desc")
                            val address = document.getString("address")
                            val date = document.getString("date")
                            val evid = document.getString("evidenceURL")
                            val latitude = document.getDouble("latitude")
                            val longitude = document.getDouble("longitude")
                            val visibility = document.getString("visibility")

                            var current = LocalDateTime.now()
                            var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                            var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date

                            val cleanDate = date.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()
                            val cleanNow = fullLocaleTime.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()

                            if (cleanDate != null && cleanDate.equals(cleanNow, true)) {
                                if (visibility != null && visibility.equals("public", true)) {
                                // Add marker on the map
                                val location = LatLng(latitude!!, longitude!!)
                                mMarkDrugs = mMap.addMarker(
                                        MarkerOptions()
                                                .position(location)
                                                .title(type + " Incident Report")
                                                .snippet(date)
                                                .icon(BitmapDescriptorFactory.fromResource(R.drawable.drug)))
                                mMarkDrugs.tag = evid

                            } else if (visibility != null && visibility.equals("private", true)) {
                                // Get intent string extra tag
                                val status = intent.getStringExtra("Tag")
                                val currentUser = auth.currentUser
                                val uid = currentUser!!.uid

                                if (status != null && status.equals("user", true)) {
                                    dbRead.collection("illegal-drugs")
                                            .whereEqualTo("id", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val id = doc.getString("id")
                                                    val type = doc.getString("type")
                                                    val title = doc.getString("title")
                                                    val desc = doc.getString("desc")
                                                    val address = doc.getString("address")
                                                    val date = doc.getString("date")
                                                    val evid = doc.getString("evidenceURL")
                                                    val latitude = doc.getDouble("latitude")
                                                    val longitude = doc.getDouble("longitude")
                                                    val visibility = doc.getString("visibility")

                                                    // Add marker on the map
                                                    val location = LatLng(latitude!!, longitude!!)
                                                    mMarkDrugs = mMap.addMarker(
                                                            MarkerOptions()
                                                                    .position(location)
                                                                    .title(type + " Incident Report")
                                                                    .snippet(date)
                                                                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.drug)))
                                                    mMarkDrugs.tag = evid
                                                }
                                            }

                                } else if (status != null && status.equals("agency", true)) {
                                    dbRead.collection("agency")
                                            .whereEqualTo("uid", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val agencyName = doc.getString("name").toString()
                                                    if (agencyName != null) {
                                                        dbRead.collection("illegal-drugs")
                                                                .whereEqualTo("reportedTo", agencyName)
                                                                .get()
                                                                .addOnSuccessListener { r ->
                                                                    for (d in r) {
                                                                        val id = d.getString("id")
                                                                        val type = d.getString("type")
                                                                        val title = d.getString("title")
                                                                        val desc = d.getString("desc")
                                                                        val address = d.getString("address")
                                                                        val date = d.getString("date")
                                                                        val evid = d.getString("evidenceURL")
                                                                        val latitude = d.getDouble("latitude")
                                                                        val longitude = d.getDouble("longitude")
                                                                        val visibility = d.getString("visibility")

                                                                        // Add marker on the map
                                                                        val location = LatLng(latitude!!, longitude!!)
                                                                        mMarkDrugs = mMap.addMarker(
                                                                                MarkerOptions()
                                                                                        .position(location)
                                                                                        .title(type + " Incident Report")
                                                                                        .snippet(date)
                                                                                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.drug)))
                                                                        mMarkDrugs.tag = evid
                                                                    }
                                                                }
                                                    }
                                                }
                                            }
                                }

                            }
                            }


                            //}
                        }


                    }
                    .addOnFailureListener { exception ->
                        //Log.d(TAG, "Error getting documents: ", exception)
                    }

            dbRead.collection("assault")
                    .whereEqualTo("status", "Approved")
                    .get()
                    .addOnSuccessListener { result ->
                        for (document in result) {
                            //Log.d(TAG, "${document.id} => ${document.data}")

                            val id = document.getString("id")
                            val type = document.getString("type")
                            val title = document.getString("title")
                            val desc = document.getString("desc")
                            val address = document.getString("address")
                            val date = document.getString("date")
                            val evid = document.getString("evidenceURL")
                            val latitude = document.getDouble("latitude")
                            val longitude = document.getDouble("longitude")
                            val visibility = document.getString("visibility")

                            var current = LocalDateTime.now()
                            var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                            var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date

                            val cleanDate = date.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()
                            val cleanNow = fullLocaleTime.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()

                            if (cleanDate != null && cleanDate.equals(cleanNow, true)) {
                                if (visibility != null && visibility.equals("public", true)) {
                                // Add marker on the map
                                val location = LatLng(latitude!!, longitude!!)
                                mMarkAssault = mMap.addMarker(
                                        MarkerOptions()
                                                .position(location)
                                                .title(type + " Incident Report")
                                                .snippet(date)
                                                .icon(BitmapDescriptorFactory.fromResource(R.drawable.general)))
                                mMarkAssault.tag = evid

                            } else if (visibility != null && visibility.equals("private", true)) {
                                // Get intent string extra tag
                                val status = intent.getStringExtra("Tag")
                                val currentUser = auth.currentUser
                                val uid = currentUser!!.uid

                                if (status != null && status.equals("user", true)) {
                                    dbRead.collection("assault")
                                            .whereEqualTo("id", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val id = doc.getString("id")
                                                    val type = doc.getString("type")
                                                    val title = doc.getString("title")
                                                    val desc = doc.getString("desc")
                                                    val address = doc.getString("address")
                                                    val date = doc.getString("date")
                                                    val evid = doc.getString("evidenceURL")
                                                    val latitude = doc.getDouble("latitude")
                                                    val longitude = doc.getDouble("longitude")
                                                    val visibility = doc.getString("visibility")

                                                    // Add marker on the map
                                                    val location = LatLng(latitude!!, longitude!!)
                                                    mMarkAssault = mMap.addMarker(
                                                            MarkerOptions()
                                                                    .position(location)
                                                                    .title(type + " Incident Report")
                                                                    .snippet(date)
                                                                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.general)))
                                                    mMarkAssault.tag = evid
                                                }
                                            }

                                } else if (status != null && status.equals("agency", true)) {
                                    dbRead.collection("agency")
                                            .whereEqualTo("uid", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val agencyName = doc.getString("name").toString()
                                                    if (agencyName != null) {
                                                        dbRead.collection("assault")
                                                                .whereEqualTo("reportedTo", agencyName)
                                                                .get()
                                                                .addOnSuccessListener { r ->
                                                                    for (d in r) {
                                                                        val id = d.getString("id")
                                                                        val type = d.getString("type")
                                                                        val title = d.getString("title")
                                                                        val desc = d.getString("desc")
                                                                        val address = d.getString("address")
                                                                        val date = d.getString("date")
                                                                        val evid = d.getString("evidenceURL")
                                                                        val latitude = d.getDouble("latitude")
                                                                        val longitude = d.getDouble("longitude")
                                                                        val visibility = d.getString("visibility")

                                                                        // Add marker on the map
                                                                        val location = LatLng(latitude!!, longitude!!)
                                                                        mMarkAssault = mMap.addMarker(
                                                                                MarkerOptions()
                                                                                        .position(location)
                                                                                        .title(type + " Incident Report")
                                                                                        .snippet(date)
                                                                                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.general)))
                                                                        mMarkAssault.tag = evid
                                                                    }
                                                                }
                                                    }
                                                }
                                            }
                                }

                            }
                            }


                            //}
                        }


                    }
                    .addOnFailureListener { exception ->
                        //Log.d(TAG, "Error getting documents: ", exception)
                    }


            dbRead.collection("general")
                    .whereEqualTo("status", "Approved")
                    .get()
                    .addOnSuccessListener { result ->
                        for (document in result) {
                            //Log.d(TAG, "${document.id} => ${document.data}")

                            val id = document.getString("id")
                            val type = document.getString("type")
                            val title = document.getString("title")
                            val desc = document.getString("desc")
                            val address = document.getString("address")
                            val date = document.getString("date")
                            val evid = document.getString("evidenceURL")
                            val latitude = document.getDouble("latitude")
                            val longitude = document.getDouble("longitude")
                            val visibility = document.getString("visibility")

                            var current = LocalDateTime.now()
                            var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                            var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date

                            val cleanDate = date.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()
                            val cleanNow = fullLocaleTime.toString().replaceAfter("at", " ").trim().removeSuffix("at").trim()

                            if (cleanDate != null && cleanDate.equals(cleanNow, true)) {
                                if (visibility != null && visibility.equals("public", true)) {
                                // Add marker on the map
                                val location = LatLng(latitude!!, longitude!!)
                                mMarkAssault= mMap.addMarker(
                                        MarkerOptions()
                                                .position(location)
                                                .title(type + " Incident Report")
                                                .snippet(date)
                                                .icon(BitmapDescriptorFactory.fromResource(R.drawable.general)))
                                mMarkAssault.tag = evid

                            } else if (visibility != null && visibility.equals("private", true)) {
                                // Get intent string extra tag
                                val status = intent.getStringExtra("Tag")
                                val currentUser = auth.currentUser
                                val uid = currentUser!!.uid

                                if (status != null && status.equals("user", true)) {
                                    dbRead.collection("general")
                                            .whereEqualTo("id", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val id = doc.getString("id")
                                                    val type = doc.getString("type")
                                                    val title = doc.getString("title")
                                                    val desc = doc.getString("desc")
                                                    val address = doc.getString("address")
                                                    val date = doc.getString("date")
                                                    val evid = doc.getString("evidenceURL")
                                                    val latitude = doc.getDouble("latitude")
                                                    val longitude = doc.getDouble("longitude")
                                                    val visibility = doc.getString("visibility")

                                                    // Add marker on the map
                                                    val location = LatLng(latitude!!, longitude!!)
                                                    mMarkAssault = mMap.addMarker(
                                                            MarkerOptions()
                                                                    .position(location)
                                                                    .title(type + " Incident Report")
                                                                    .snippet(date)
                                                                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.general)))
                                                    mMarkAssault.tag = evid
                                                }
                                            }

                                } else if (status != null && status.equals("agency", true)) {
                                    dbRead.collection("agency")
                                            .whereEqualTo("uid", uid)
                                            .get()
                                            .addOnSuccessListener { res ->
                                                for (doc in res) {
                                                    val agencyName = doc.getString("name").toString()
                                                    if (agencyName != null) {
                                                        dbRead.collection("general")
                                                                .whereEqualTo("reportedTo", agencyName)
                                                                .get()
                                                                .addOnSuccessListener { r ->
                                                                    for (d in r) {
                                                                        val id = d.getString("id")
                                                                        val type = d.getString("type")
                                                                        val title = d.getString("title")
                                                                        val desc = d.getString("desc")
                                                                        val address = d.getString("address")
                                                                        val date = d.getString("date")
                                                                        val evid = d.getString("evidenceURL")
                                                                        val latitude = d.getDouble("latitude")
                                                                        val longitude = d.getDouble("longitude")
                                                                        val visibility = d.getString("visibility")

                                                                        // Add marker on the map
                                                                        val location = LatLng(latitude!!, longitude!!)
                                                                        mMarkAssault = mMap.addMarker(
                                                                                MarkerOptions()
                                                                                        .position(location)
                                                                                        .title(type + " Incident Report")
                                                                                        .snippet(date)
                                                                                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.general)))
                                                                        mMarkAssault.tag = evid
                                                                    }
                                                                }
                                                    }
                                                }
                                            }
                                }

                            }

                            }


                            //}
                        }


                    }
                    .addOnFailureListener { exception ->
                        //Log.d(TAG, "Error getting documents: ", exception)
                    }


        }


        override fun onMarkerClick(marker: Marker): Boolean {
                //Toast.makeText(this@MapActivity, "Clicked: "+marker.title+ " "+marker.tag, Toast.LENGTH_LONG).show()

                if (marker.tag.toString().endsWith("-video", true)) {
                        val cleanURL = marker.tag.toString().substring(0, marker.tag.toString().lastIndexOf("-video"))
                        val mTitle = marker.title.toString()
                        showMarkerDialogVideo(cleanURL, mTitle) // Show Marker Custom Dialog
                } else if (marker.tag.toString().endsWith("-audio", true)) {
                        val cleanURL = marker.tag.toString().substring(0, marker.tag.toString().lastIndexOf("-audio"))
                        val mTitle = marker.title.toString()
                        showMarkerDialogAudio(cleanURL, mTitle) // Show Marker Custom Dialog
                } else if (marker.tag.toString().endsWith("-image", true)) {
                        val cleanURL = marker.tag.toString().substring(0, marker.tag.toString().lastIndexOf("-image"))
                        val mTitle = marker.title.toString()
                        showMarkerDialogImage(cleanURL, mTitle) // Show Marker Custom Dialog
                } else if (marker.tag.toString().endsWith("-docx", true)) {
                        val cleanURL = marker.tag.toString().substring(0, marker.tag.toString().lastIndexOf("-docx"))
                        val mTitle = marker.title.toString()
                        showMarkerDialogDocx(cleanURL, mTitle) // Show Marker Custom Dialog
                } else if (marker.tag.toString().endsWith("-pdf", true)) {
                        val cleanURL = marker.tag.toString().substring(0, marker.tag.toString().lastIndexOf("-pdf"))
                        val mTitle = marker.title.toString()
                        showMarkerDialogPDF(cleanURL, mTitle) // Show Marker Custom Dialog
                } else {
                        // Do Nothing
                }

                return false
        }

        private fun showWeatherDialogVideo(evid: String, title: String) {
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_weather, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mWeatherDialogVideoPopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mWeatherDialogVideoPopUp.setBackgroundDrawable(colorDrawable)
                mWeatherDialogVideoPopUp.isOutsideTouchable = true

                val user = auth.currentUser

                if (Build.VERSION.SDK_INT >= 21) {
                        mWeatherDialogVideoPopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mWeatherDialogVideoPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mWeatherDialogVideoPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

                val txtMarkerTitle = popUpView.findViewById<View>(R.id.txt_marker_title) as TextView
                val mMarkerImage = popUpView.findViewById<View>(R.id.img_mark) as ImageView
                val txtMarkerCondition = popUpView.findViewById<View>(R.id.txt_marker_condition) as TextView
                val txtMarkerTemp = popUpView.findViewById<View>(R.id.txt_marker_temp_value) as TextView
                val txtMarkerWindspeed = popUpView.findViewById<View>(R.id.txt_marker_windspeed_value) as TextView
                val txtMarkerWindangle = popUpView.findViewById<View>(R.id.txt_marker_windangle_value) as TextView
                val txtMarkerCloud = popUpView.findViewById<View>(R.id.txt_marker_clouds_value) as TextView
                val txtMarkerPressure = popUpView.findViewById<View>(R.id.txt_marker_pressure_value) as TextView
                val txtMarkerHumidity = popUpView.findViewById<View>(R.id.txt_marker_humidity_value) as TextView
                val txtMarkerAddress = popUpView.findViewById<View>(R.id.txt_marker_address) as TextView
                val txtMarkerDate = popUpView.findViewById<View>(R.id.txt_marker_date) as TextView

                val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton


                if (title.equals("Officer Incident Report", true)) {
                        dbRead.collection("officer")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                val wtemp = document.getString("weatherTemp")
                                                val wcondition = document.getString("weatherDesc")
                                                val wclouds = document.getString("weatherClouds")
                                                val wwindspeed = document.getString("weatherWindSpeed")
                                                val wwindangle = document.getString("weatherWindAngle")
                                                val whumidity = document.getString("weatherHumidity")
                                                val wpressure = document.getString("weatherPressure")

                                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                                        if (wcondition.contains("clear sky", true)){
                                                                mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                                        } else if (wcondition.contains("clouds", true)){
                                                                mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                                        } else if (wcondition.contains("rain", true)){
                                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                                        } else if (wcondition.contains("drizzle", true)){
                                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                                        } else if (wcondition.contains("thunderstorm", true)){
                                                                mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                                        } else if (wcondition.contains("snow", true)){
                                                                mMarkerImage.setBackgroundResource(R.drawable.snow)
                                                        } else if (wcondition.contains("atmosphere", true)){
                                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                                        } else if (wcondition.contains("mist", true)){
                                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                                        } else {
                                                            mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                                        }

                                                        txtMarkerTemp.setText(wtemp)
                                                        txtMarkerCondition.setText(wcondition)
                                                        txtMarkerCloud.setText(wclouds)
                                                        txtMarkerHumidity.setText(whumidity)
                                                        txtMarkerWindspeed.setText(wwindspeed)
                                                        txtMarkerWindangle.setText(wwindangle)
                                                        txtMarkerPressure.setText(wpressure)
                                                } else {

                                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                                        txtMarkerTemp.setText(":::")
                                                        txtMarkerCondition.setText(":::")
                                                        txtMarkerCloud.setText(":::")
                                                        txtMarkerHumidity.setText(":::")
                                                        txtMarkerWindspeed.setText(":::")
                                                        txtMarkerWindangle.setText(":::")
                                                        txtMarkerPressure.setText(":::")
                                                }

                                                txtMarkerTitle.setText(title)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Accident Incident Report", true)) {
                        dbRead.collection("accident")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        //Log.d(TAG, "${document.id} => ${document.data}")

                                        val id = document.getString("id")
                                        val documentID = document.getString("documentID")
                                        val subType = document.getString("subType")
                                        val xtitle = document.getString("title")
                                        val desc = document.getString("description")
                                        val address = document.getString("address")
                                        val date = document.getString("date")
                                        val evid = document.getString("evidenceURL")
                                        val latitude = document.getDouble("latitude")
                                        val longitude = document.getDouble("longitude")

                                        val wtemp = document.getString("weatherTemp")
                                        val wcondition = document.getString("weatherDesc")
                                        val wclouds = document.getString("weatherClouds")
                                        val wwindspeed = document.getString("weatherWindSpeed")
                                        val wwindangle = document.getString("weatherWindAngle")
                                        val whumidity = document.getString("weatherHumidity")
                                        val wpressure = document.getString("weatherPressure")

                                        if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                            if (wcondition.contains("clear sky", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                            } else if (wcondition.contains("clouds", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                            } else if (wcondition.contains("rain", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("drizzle", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("thunderstorm", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                            } else if (wcondition.contains("snow", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.snow)
                                            } else if (wcondition.contains("atmosphere", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else if (wcondition.contains("mist", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else {
                                                mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                            }

                                            txtMarkerTemp.setText(wtemp)
                                            txtMarkerCondition.setText(wcondition)
                                            txtMarkerCloud.setText(wclouds)
                                            txtMarkerHumidity.setText(whumidity)
                                            txtMarkerWindspeed.setText(wwindspeed)
                                            txtMarkerWindangle.setText(wwindangle)
                                            txtMarkerPressure.setText(wpressure)
                                        } else {

                                            mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                            txtMarkerTemp.setText(":::")
                                            txtMarkerCondition.setText(":::")
                                            txtMarkerCloud.setText(":::")
                                            txtMarkerHumidity.setText(":::")
                                            txtMarkerWindspeed.setText(":::")
                                            txtMarkerWindangle.setText(":::")
                                            txtMarkerPressure.setText(":::")
                                        }

                                        txtMarkerTitle.setText(title)
                                        txtMarkerAddress.setText(address.toString())
                                        txtMarkerDate.setText(date.toString())

                                        incidentID = documentID.toString()
                                        //val location = LatLng(latitude!!, longitude!!)

                                    }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Sexual-Assault Incident Report", true)) {
                        dbRead.collection("sexual-assault")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        //Log.d(TAG, "${document.id} => ${document.data}")

                                        val id = document.getString("id")
                                        val documentID = document.getString("documentID")
                                        val subType = document.getString("subType")
                                        val xtitle = document.getString("title")
                                        val desc = document.getString("description")
                                        val address = document.getString("address")
                                        val date = document.getString("date")
                                        val evid = document.getString("evidenceURL")
                                        val latitude = document.getDouble("latitude")
                                        val longitude = document.getDouble("longitude")

                                        val wtemp = document.getString("weatherTemp")
                                        val wcondition = document.getString("weatherDesc")
                                        val wclouds = document.getString("weatherClouds")
                                        val wwindspeed = document.getString("weatherWindSpeed")
                                        val wwindangle = document.getString("weatherWindAngle")
                                        val whumidity = document.getString("weatherHumidity")
                                        val wpressure = document.getString("weatherPressure")

                                        if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                            if (wcondition.contains("clear sky", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                            } else if (wcondition.contains("clouds", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                            } else if (wcondition.contains("rain", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("drizzle", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("thunderstorm", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                            } else if (wcondition.contains("snow", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.snow)
                                            } else if (wcondition.contains("atmosphere", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else if (wcondition.contains("mist", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else {
                                                mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                            }

                                            txtMarkerTemp.setText(wtemp)
                                            txtMarkerCondition.setText(wcondition)
                                            txtMarkerCloud.setText(wclouds)
                                            txtMarkerHumidity.setText(whumidity)
                                            txtMarkerWindspeed.setText(wwindspeed)
                                            txtMarkerWindangle.setText(wwindangle)
                                            txtMarkerPressure.setText(wpressure)
                                        } else {

                                            mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                            txtMarkerTemp.setText(":::")
                                            txtMarkerCondition.setText(":::")
                                            txtMarkerCloud.setText(":::")
                                            txtMarkerHumidity.setText(":::")
                                            txtMarkerWindspeed.setText(":::")
                                            txtMarkerWindangle.setText(":::")
                                            txtMarkerPressure.setText(":::")
                                        }

                                        txtMarkerTitle.setText(title)
                                        txtMarkerAddress.setText(address.toString())
                                        txtMarkerDate.setText(date.toString())

                                        incidentID = documentID.toString()
                                        //val location = LatLng(latitude!!, longitude!!)

                                    }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Theft Incident Report", true)) {
                        dbRead.collection("theft")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        //Log.d(TAG, "${document.id} => ${document.data}")

                                        val id = document.getString("id")
                                        val documentID = document.getString("documentID")
                                        val subType = document.getString("subType")
                                        val xtitle = document.getString("title")
                                        val desc = document.getString("description")
                                        val address = document.getString("address")
                                        val date = document.getString("date")
                                        val evid = document.getString("evidenceURL")
                                        val latitude = document.getDouble("latitude")
                                        val longitude = document.getDouble("longitude")

                                        val wtemp = document.getString("weatherTemp")
                                        val wcondition = document.getString("weatherDesc")
                                        val wclouds = document.getString("weatherClouds")
                                        val wwindspeed = document.getString("weatherWindSpeed")
                                        val wwindangle = document.getString("weatherWindAngle")
                                        val whumidity = document.getString("weatherHumidity")
                                        val wpressure = document.getString("weatherPressure")

                                        if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                            if (wcondition.contains("clear sky", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                            } else if (wcondition.contains("clouds", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                            } else if (wcondition.contains("rain", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("drizzle", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("thunderstorm", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                            } else if (wcondition.contains("snow", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.snow)
                                            } else if (wcondition.contains("atmosphere", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else if (wcondition.contains("mist", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else {
                                                mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                            }

                                            txtMarkerTemp.setText(wtemp)
                                            txtMarkerCondition.setText(wcondition)
                                            txtMarkerCloud.setText(wclouds)
                                            txtMarkerHumidity.setText(whumidity)
                                            txtMarkerWindspeed.setText(wwindspeed)
                                            txtMarkerWindangle.setText(wwindangle)
                                            txtMarkerPressure.setText(wpressure)
                                        } else {

                                            mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                            txtMarkerTemp.setText(":::")
                                            txtMarkerCondition.setText(":::")
                                            txtMarkerCloud.setText(":::")
                                            txtMarkerHumidity.setText(":::")
                                            txtMarkerWindspeed.setText(":::")
                                            txtMarkerWindangle.setText(":::")
                                            txtMarkerPressure.setText(":::")
                                        }

                                        txtMarkerTitle.setText(title)
                                        txtMarkerAddress.setText(address.toString())
                                        txtMarkerDate.setText(date.toString())

                                        incidentID = documentID.toString()
                                        //val location = LatLng(latitude!!, longitude!!)

                                    }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Murder Incident Report", true)) {
                        dbRead.collection("murder")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        //Log.d(TAG, "${document.id} => ${document.data}")

                                        val id = document.getString("id")
                                        val documentID = document.getString("documentID")
                                        val subType = document.getString("subType")
                                        val xtitle = document.getString("title")
                                        val desc = document.getString("description")
                                        val address = document.getString("address")
                                        val date = document.getString("date")
                                        val evid = document.getString("evidenceURL")
                                        val latitude = document.getDouble("latitude")
                                        val longitude = document.getDouble("longitude")

                                        val wtemp = document.getString("weatherTemp")
                                        val wcondition = document.getString("weatherDesc")
                                        val wclouds = document.getString("weatherClouds")
                                        val wwindspeed = document.getString("weatherWindSpeed")
                                        val wwindangle = document.getString("weatherWindAngle")
                                        val whumidity = document.getString("weatherHumidity")
                                        val wpressure = document.getString("weatherPressure")

                                        if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                            if (wcondition.contains("clear sky", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                            } else if (wcondition.contains("clouds", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                            } else if (wcondition.contains("rain", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("drizzle", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("thunderstorm", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                            } else if (wcondition.contains("snow", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.snow)
                                            } else if (wcondition.contains("atmosphere", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else if (wcondition.contains("mist", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else {
                                                mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                            }

                                            txtMarkerTemp.setText(wtemp)
                                            txtMarkerCondition.setText(wcondition)
                                            txtMarkerCloud.setText(wclouds)
                                            txtMarkerHumidity.setText(whumidity)
                                            txtMarkerWindspeed.setText(wwindspeed)
                                            txtMarkerWindangle.setText(wwindangle)
                                            txtMarkerPressure.setText(wpressure)
                                        } else {

                                            mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                            txtMarkerTemp.setText(":::")
                                            txtMarkerCondition.setText(":::")
                                            txtMarkerCloud.setText(":::")
                                            txtMarkerHumidity.setText(":::")
                                            txtMarkerWindspeed.setText(":::")
                                            txtMarkerWindangle.setText(":::")
                                            txtMarkerPressure.setText(":::")
                                        }

                                        txtMarkerTitle.setText(title)
                                        txtMarkerAddress.setText(address.toString())
                                        txtMarkerDate.setText(date.toString())

                                        incidentID = documentID.toString()
                                        //val location = LatLng(latitude!!, longitude!!)

                                    }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Terrorism Incident Report", true)) {
                        dbRead.collection("terrorism")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        //Log.d(TAG, "${document.id} => ${document.data}")

                                        val id = document.getString("id")
                                        val documentID = document.getString("documentID")
                                        val subType = document.getString("subType")
                                        val xtitle = document.getString("title")
                                        val desc = document.getString("description")
                                        val address = document.getString("address")
                                        val date = document.getString("date")
                                        val evid = document.getString("evidenceURL")
                                        val latitude = document.getDouble("latitude")
                                        val longitude = document.getDouble("longitude")

                                        val wtemp = document.getString("weatherTemp")
                                        val wcondition = document.getString("weatherDesc")
                                        val wclouds = document.getString("weatherClouds")
                                        val wwindspeed = document.getString("weatherWindSpeed")
                                        val wwindangle = document.getString("weatherWindAngle")
                                        val whumidity = document.getString("weatherHumidity")
                                        val wpressure = document.getString("weatherPressure")

                                        if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                            if (wcondition.contains("clear sky", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                            } else if (wcondition.contains("clouds", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                            } else if (wcondition.contains("rain", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("drizzle", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("thunderstorm", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                            } else if (wcondition.contains("snow", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.snow)
                                            } else if (wcondition.contains("atmosphere", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else if (wcondition.contains("mist", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else {
                                                mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                            }

                                            txtMarkerTemp.setText(wtemp)
                                            txtMarkerCondition.setText(wcondition)
                                            txtMarkerCloud.setText(wclouds)
                                            txtMarkerHumidity.setText(whumidity)
                                            txtMarkerWindspeed.setText(wwindspeed)
                                            txtMarkerWindangle.setText(wwindangle)
                                            txtMarkerPressure.setText(wpressure)
                                        } else {

                                            mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                            txtMarkerTemp.setText(":::")
                                            txtMarkerCondition.setText(":::")
                                            txtMarkerCloud.setText(":::")
                                            txtMarkerHumidity.setText(":::")
                                            txtMarkerWindspeed.setText(":::")
                                            txtMarkerWindangle.setText(":::")
                                            txtMarkerPressure.setText(":::")
                                        }

                                        txtMarkerTitle.setText(title)
                                        txtMarkerAddress.setText(address.toString())
                                        txtMarkerDate.setText(date.toString())

                                        incidentID = documentID.toString()
                                        //val location = LatLng(latitude!!, longitude!!)

                                    }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Flooding Incident Report", true)) {
                        dbRead.collection("flooding")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        //Log.d(TAG, "${document.id} => ${document.data}")

                                        val id = document.getString("id")
                                        val documentID = document.getString("documentID")
                                        val subType = document.getString("subType")
                                        val xtitle = document.getString("title")
                                        val desc = document.getString("description")
                                        val address = document.getString("address")
                                        val date = document.getString("date")
                                        val evid = document.getString("evidenceURL")
                                        val latitude = document.getDouble("latitude")
                                        val longitude = document.getDouble("longitude")

                                        val wtemp = document.getString("weatherTemp")
                                        val wcondition = document.getString("weatherDesc")
                                        val wclouds = document.getString("weatherClouds")
                                        val wwindspeed = document.getString("weatherWindSpeed")
                                        val wwindangle = document.getString("weatherWindAngle")
                                        val whumidity = document.getString("weatherHumidity")
                                        val wpressure = document.getString("weatherPressure")

                                        if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                            if (wcondition.contains("clear sky", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                            } else if (wcondition.contains("clouds", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                            } else if (wcondition.contains("rain", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("drizzle", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("thunderstorm", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                            } else if (wcondition.contains("snow", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.snow)
                                            } else if (wcondition.contains("atmosphere", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else if (wcondition.contains("mist", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else {
                                                mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                            }

                                            txtMarkerTemp.setText(wtemp)
                                            txtMarkerCondition.setText(wcondition)
                                            txtMarkerCloud.setText(wclouds)
                                            txtMarkerHumidity.setText(whumidity)
                                            txtMarkerWindspeed.setText(wwindspeed)
                                            txtMarkerWindangle.setText(wwindangle)
                                            txtMarkerPressure.setText(wpressure)
                                        } else {

                                            mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                            txtMarkerTemp.setText(":::")
                                            txtMarkerCondition.setText(":::")
                                            txtMarkerCloud.setText(":::")
                                            txtMarkerHumidity.setText(":::")
                                            txtMarkerWindspeed.setText(":::")
                                            txtMarkerWindangle.setText(":::")
                                            txtMarkerPressure.setText(":::")
                                        }

                                        txtMarkerTitle.setText(title)
                                        txtMarkerAddress.setText(address.toString())
                                        txtMarkerDate.setText(date.toString())

                                        incidentID = documentID.toString()
                                        //val location = LatLng(latitude!!, longitude!!)

                                    }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Firehazard Incident Report", true)) {
                        dbRead.collection("firehazard")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        //Log.d(TAG, "${document.id} => ${document.data}")

                                        val id = document.getString("id")
                                        val documentID = document.getString("documentID")
                                        val subType = document.getString("subType")
                                        val xtitle = document.getString("title")
                                        val desc = document.getString("description")
                                        val address = document.getString("address")
                                        val date = document.getString("date")
                                        val evid = document.getString("evidenceURL")
                                        val latitude = document.getDouble("latitude")
                                        val longitude = document.getDouble("longitude")

                                        val wtemp = document.getString("weatherTemp")
                                        val wcondition = document.getString("weatherDesc")
                                        val wclouds = document.getString("weatherClouds")
                                        val wwindspeed = document.getString("weatherWindSpeed")
                                        val wwindangle = document.getString("weatherWindAngle")
                                        val whumidity = document.getString("weatherHumidity")
                                        val wpressure = document.getString("weatherPressure")

                                        if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                            if (wcondition.contains("clear sky", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                            } else if (wcondition.contains("clouds", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                            } else if (wcondition.contains("rain", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("drizzle", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("thunderstorm", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                            } else if (wcondition.contains("snow", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.snow)
                                            } else if (wcondition.contains("atmosphere", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else if (wcondition.contains("mist", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else {
                                                mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                            }

                                            txtMarkerTemp.setText(wtemp)
                                            txtMarkerCondition.setText(wcondition)
                                            txtMarkerCloud.setText(wclouds)
                                            txtMarkerHumidity.setText(whumidity)
                                            txtMarkerWindspeed.setText(wwindspeed)
                                            txtMarkerWindangle.setText(wwindangle)
                                            txtMarkerPressure.setText(wpressure)
                                        } else {

                                            mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                            txtMarkerTemp.setText(":::")
                                            txtMarkerCondition.setText(":::")
                                            txtMarkerCloud.setText(":::")
                                            txtMarkerHumidity.setText(":::")
                                            txtMarkerWindspeed.setText(":::")
                                            txtMarkerWindangle.setText(":::")
                                            txtMarkerPressure.setText(":::")
                                        }

                                        txtMarkerTitle.setText(title)
                                        txtMarkerAddress.setText(address.toString())
                                        txtMarkerDate.setText(date.toString())

                                        incidentID = documentID.toString()
                                        //val location = LatLng(latitude!!, longitude!!)

                                    }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Illegal-Drugs Incident Report", true)) {
                        dbRead.collection("illegal-drugs")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        //Log.d(TAG, "${document.id} => ${document.data}")

                                        val id = document.getString("id")
                                        val documentID = document.getString("documentID")
                                        val subType = document.getString("subType")
                                        val xtitle = document.getString("title")
                                        val desc = document.getString("description")
                                        val address = document.getString("address")
                                        val date = document.getString("date")
                                        val evid = document.getString("evidenceURL")
                                        val latitude = document.getDouble("latitude")
                                        val longitude = document.getDouble("longitude")

                                        val wtemp = document.getString("weatherTemp")
                                        val wcondition = document.getString("weatherDesc")
                                        val wclouds = document.getString("weatherClouds")
                                        val wwindspeed = document.getString("weatherWindSpeed")
                                        val wwindangle = document.getString("weatherWindAngle")
                                        val whumidity = document.getString("weatherHumidity")
                                        val wpressure = document.getString("weatherPressure")

                                        if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                            if (wcondition.contains("clear sky", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                            } else if (wcondition.contains("clouds", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                            } else if (wcondition.contains("rain", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("drizzle", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("thunderstorm", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                            } else if (wcondition.contains("snow", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.snow)
                                            } else if (wcondition.contains("atmosphere", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else if (wcondition.contains("mist", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else {
                                                mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                            }

                                            txtMarkerTemp.setText(wtemp)
                                            txtMarkerCondition.setText(wcondition)
                                            txtMarkerCloud.setText(wclouds)
                                            txtMarkerHumidity.setText(whumidity)
                                            txtMarkerWindspeed.setText(wwindspeed)
                                            txtMarkerWindangle.setText(wwindangle)
                                            txtMarkerPressure.setText(wpressure)
                                        } else {

                                            mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                            txtMarkerTemp.setText(":::")
                                            txtMarkerCondition.setText(":::")
                                            txtMarkerCloud.setText(":::")
                                            txtMarkerHumidity.setText(":::")
                                            txtMarkerWindspeed.setText(":::")
                                            txtMarkerWindangle.setText(":::")
                                            txtMarkerPressure.setText(":::")
                                        }

                                        txtMarkerTitle.setText(title)
                                        txtMarkerAddress.setText(address.toString())
                                        txtMarkerDate.setText(date.toString())

                                        incidentID = documentID.toString()
                                        //val location = LatLng(latitude!!, longitude!!)

                                    }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Assault Incident Report", true)) {
                        dbRead.collection("assault")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        //Log.d(TAG, "${document.id} => ${document.data}")

                                        val id = document.getString("id")
                                        val documentID = document.getString("documentID")
                                        val subType = document.getString("subType")
                                        val xtitle = document.getString("title")
                                        val desc = document.getString("description")
                                        val address = document.getString("address")
                                        val date = document.getString("date")
                                        val evid = document.getString("evidenceURL")
                                        val latitude = document.getDouble("latitude")
                                        val longitude = document.getDouble("longitude")

                                        val wtemp = document.getString("weatherTemp")
                                        val wcondition = document.getString("weatherDesc")
                                        val wclouds = document.getString("weatherClouds")
                                        val wwindspeed = document.getString("weatherWindSpeed")
                                        val wwindangle = document.getString("weatherWindAngle")
                                        val whumidity = document.getString("weatherHumidity")
                                        val wpressure = document.getString("weatherPressure")

                                        if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                            if (wcondition.contains("clear sky", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                            } else if (wcondition.contains("clouds", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                            } else if (wcondition.contains("rain", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("drizzle", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("thunderstorm", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                            } else if (wcondition.contains("snow", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.snow)
                                            } else if (wcondition.contains("atmosphere", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else if (wcondition.contains("mist", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else {
                                                mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                            }

                                            txtMarkerTemp.setText(wtemp)
                                            txtMarkerCondition.setText(wcondition)
                                            txtMarkerCloud.setText(wclouds)
                                            txtMarkerHumidity.setText(whumidity)
                                            txtMarkerWindspeed.setText(wwindspeed)
                                            txtMarkerWindangle.setText(wwindangle)
                                            txtMarkerPressure.setText(wpressure)
                                        } else {

                                            mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                            txtMarkerTemp.setText(":::")
                                            txtMarkerCondition.setText(":::")
                                            txtMarkerCloud.setText(":::")
                                            txtMarkerHumidity.setText(":::")
                                            txtMarkerWindspeed.setText(":::")
                                            txtMarkerWindangle.setText(":::")
                                            txtMarkerPressure.setText(":::")
                                        }

                                        txtMarkerTitle.setText(title)
                                        txtMarkerAddress.setText(address.toString())
                                        txtMarkerDate.setText(date.toString())

                                        incidentID = documentID.toString()
                                        //val location = LatLng(latitude!!, longitude!!)

                                    }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("General Incident Report", true)) {
                        dbRead.collection("general")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        //Log.d(TAG, "${document.id} => ${document.data}")

                                        val id = document.getString("id")
                                        val documentID = document.getString("documentID")
                                        val subType = document.getString("subType")
                                        val xtitle = document.getString("title")
                                        val desc = document.getString("description")
                                        val address = document.getString("address")
                                        val date = document.getString("date")
                                        val evid = document.getString("evidenceURL")
                                        val latitude = document.getDouble("latitude")
                                        val longitude = document.getDouble("longitude")

                                        val wtemp = document.getString("weatherTemp")
                                        val wcondition = document.getString("weatherDesc")
                                        val wclouds = document.getString("weatherClouds")
                                        val wwindspeed = document.getString("weatherWindSpeed")
                                        val wwindangle = document.getString("weatherWindAngle")
                                        val whumidity = document.getString("weatherHumidity")
                                        val wpressure = document.getString("weatherPressure")

                                        if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                            if (wcondition.contains("clear sky", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                            } else if (wcondition.contains("clouds", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                            } else if (wcondition.contains("rain", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("drizzle", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.rain)
                                            } else if (wcondition.contains("thunderstorm", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                            } else if (wcondition.contains("snow", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.snow)
                                            } else if (wcondition.contains("atmosphere", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else if (wcondition.contains("mist", true)){
                                                mMarkerImage.setBackgroundResource(R.drawable.mist)
                                            } else {
                                                mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                            }

                                            txtMarkerTemp.setText(wtemp)
                                            txtMarkerCondition.setText(wcondition)
                                            txtMarkerCloud.setText(wclouds)
                                            txtMarkerHumidity.setText(whumidity)
                                            txtMarkerWindspeed.setText(wwindspeed)
                                            txtMarkerWindangle.setText(wwindangle)
                                            txtMarkerPressure.setText(wpressure)
                                        } else {

                                            mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                            txtMarkerTemp.setText(":::")
                                            txtMarkerCondition.setText(":::")
                                            txtMarkerCloud.setText(":::")
                                            txtMarkerHumidity.setText(":::")
                                            txtMarkerWindspeed.setText(":::")
                                            txtMarkerWindangle.setText(":::")
                                            txtMarkerPressure.setText(":::")
                                        }

                                        txtMarkerTitle.setText(title)
                                        txtMarkerAddress.setText(address.toString())
                                        txtMarkerDate.setText(date.toString())

                                        incidentID = documentID.toString()
                                        //val location = LatLng(latitude!!, longitude!!)

                                    }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                }

                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                btnConfirm.setOnClickListener {
                        mWeatherDialogVideoPopUp.dismiss()
                }

        }


        private fun showWeatherDialogAudio(evid: String, title: String) {
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_weather, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mWeatherDialogAudioPopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mWeatherDialogAudioPopUp.setBackgroundDrawable(colorDrawable)
                mWeatherDialogAudioPopUp.isOutsideTouchable = true

                val user = auth.currentUser

                if (Build.VERSION.SDK_INT >= 21) {
                        mWeatherDialogAudioPopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mWeatherDialogAudioPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mWeatherDialogAudioPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

            val txtMarkerTitle = popUpView.findViewById<View>(R.id.txt_marker_title) as TextView
            val mMarkerImage = popUpView.findViewById<View>(R.id.img_mark) as ImageView
            val txtMarkerCondition = popUpView.findViewById<View>(R.id.txt_marker_condition) as TextView
            val txtMarkerTemp = popUpView.findViewById<View>(R.id.txt_marker_temp_value) as TextView
            val txtMarkerWindspeed = popUpView.findViewById<View>(R.id.txt_marker_windspeed_value) as TextView
            val txtMarkerWindangle = popUpView.findViewById<View>(R.id.txt_marker_windangle_value) as TextView
            val txtMarkerCloud = popUpView.findViewById<View>(R.id.txt_marker_clouds_value) as TextView
            val txtMarkerPressure = popUpView.findViewById<View>(R.id.txt_marker_pressure_value) as TextView
            val txtMarkerHumidity = popUpView.findViewById<View>(R.id.txt_marker_humidity_value) as TextView
            val txtMarkerAddress = popUpView.findViewById<View>(R.id.txt_marker_address) as TextView
            val txtMarkerDate = popUpView.findViewById<View>(R.id.txt_marker_date) as TextView

            val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton


            if (title.equals("Officer Incident Report", true)) {
                dbRead.collection("officer")
                        .whereEqualTo("evidenceURL", evid + "-audio")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Accident Incident Report", true)) {
                dbRead.collection("accident")
                        .whereEqualTo("evidenceURL", evid + "-audio")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Sexual-Assault Incident Report", true)) {
                dbRead.collection("sexual-assault")
                        .whereEqualTo("evidenceURL", evid + "-audio")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Theft Incident Report", true)) {
                dbRead.collection("theft")
                        .whereEqualTo("evidenceURL", evid + "-audio")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Murder Incident Report", true)) {
                dbRead.collection("murder")
                        .whereEqualTo("evidenceURL", evid + "-audio")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Terrorism Incident Report", true)) {
                dbRead.collection("terrorism")
                        .whereEqualTo("evidenceURL", evid + "-audio")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Flooding Incident Report", true)) {
                dbRead.collection("flooding")
                        .whereEqualTo("evidenceURL", evid + "-audio")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Firehazard Incident Report", true)) {
                dbRead.collection("firehazard")
                        .whereEqualTo("evidenceURL", evid + "-audio")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Illegal-Drugs Incident Report", true)) {
                dbRead.collection("illegal-drugs")
                        .whereEqualTo("evidenceURL", evid + "-audio")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Assault Incident Report", true)) {
                dbRead.collection("assault")
                        .whereEqualTo("evidenceURL", evid + "-audio")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("General Incident Report", true)) {
                dbRead.collection("general")
                        .whereEqualTo("evidenceURL", evid + "-audio")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            }

                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                btnConfirm.setOnClickListener {
                        mWeatherDialogAudioPopUp.dismiss()
                }


        }


        private fun showWeatherDialogImage(evid: String, title: String) {
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_weather, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mWeatherDialogImagePopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mWeatherDialogImagePopUp.setBackgroundDrawable(colorDrawable)
                mWeatherDialogImagePopUp.isOutsideTouchable = true

                val user = auth.currentUser

                if (Build.VERSION.SDK_INT >= 21) {
                        mWeatherDialogImagePopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mWeatherDialogImagePopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mWeatherDialogImagePopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

            val txtMarkerTitle = popUpView.findViewById<View>(R.id.txt_marker_title) as TextView
            val mMarkerImage = popUpView.findViewById<View>(R.id.img_mark) as ImageView
            val txtMarkerCondition = popUpView.findViewById<View>(R.id.txt_marker_condition) as TextView
            val txtMarkerTemp = popUpView.findViewById<View>(R.id.txt_marker_temp_value) as TextView
            val txtMarkerWindspeed = popUpView.findViewById<View>(R.id.txt_marker_windspeed_value) as TextView
            val txtMarkerWindangle = popUpView.findViewById<View>(R.id.txt_marker_windangle_value) as TextView
            val txtMarkerCloud = popUpView.findViewById<View>(R.id.txt_marker_clouds_value) as TextView
            val txtMarkerPressure = popUpView.findViewById<View>(R.id.txt_marker_pressure_value) as TextView
            val txtMarkerHumidity = popUpView.findViewById<View>(R.id.txt_marker_humidity_value) as TextView
            val txtMarkerAddress = popUpView.findViewById<View>(R.id.txt_marker_address) as TextView
            val txtMarkerDate = popUpView.findViewById<View>(R.id.txt_marker_date) as TextView

            val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton


            if (title.equals("Officer Incident Report", true)) {
                dbRead.collection("officer")
                        .whereEqualTo("evidenceURL", evid + "-image")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Accident Incident Report", true)) {
                dbRead.collection("accident")
                        .whereEqualTo("evidenceURL", evid + "-image")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Sexual-Assault Incident Report", true)) {
                dbRead.collection("sexual-assault")
                        .whereEqualTo("evidenceURL", evid + "-image")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Theft Incident Report", true)) {
                dbRead.collection("theft")
                        .whereEqualTo("evidenceURL", evid + "-image")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Murder Incident Report", true)) {
                dbRead.collection("murder")
                        .whereEqualTo("evidenceURL", evid + "-image")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Terrorism Incident Report", true)) {
                dbRead.collection("terrorism")
                        .whereEqualTo("evidenceURL", evid + "-image")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Flooding Incident Report", true)) {
                dbRead.collection("flooding")
                        .whereEqualTo("evidenceURL", evid + "-image")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Firehazard Incident Report", true)) {
                dbRead.collection("firehazard")
                        .whereEqualTo("evidenceURL", evid + "-image")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Illegal-Drugs Incident Report", true)) {
                dbRead.collection("illegal-drugs")
                        .whereEqualTo("evidenceURL", evid + "-image")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Assault Incident Report", true)) {
                dbRead.collection("assault")
                        .whereEqualTo("evidenceURL", evid + "-image")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("General Incident Report", true)) {
                dbRead.collection("general")
                        .whereEqualTo("evidenceURL", evid + "-image")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            }

                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                btnConfirm.setOnClickListener {
                        mWeatherDialogImagePopUp.dismiss()
                }


        }


        private fun showWeatherDialogPdf(evid: String, title: String) {
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_weather, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mWeatherDialogPdfPopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mWeatherDialogPdfPopUp.setBackgroundDrawable(colorDrawable)
                mWeatherDialogPdfPopUp.isOutsideTouchable = true

                val user = auth.currentUser

                if (Build.VERSION.SDK_INT >= 21) {
                        mWeatherDialogPdfPopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mWeatherDialogPdfPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mWeatherDialogPdfPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

            val txtMarkerTitle = popUpView.findViewById<View>(R.id.txt_marker_title) as TextView
            val mMarkerImage = popUpView.findViewById<View>(R.id.img_mark) as ImageView
            val txtMarkerCondition = popUpView.findViewById<View>(R.id.txt_marker_condition) as TextView
            val txtMarkerTemp = popUpView.findViewById<View>(R.id.txt_marker_temp_value) as TextView
            val txtMarkerWindspeed = popUpView.findViewById<View>(R.id.txt_marker_windspeed_value) as TextView
            val txtMarkerWindangle = popUpView.findViewById<View>(R.id.txt_marker_windangle_value) as TextView
            val txtMarkerCloud = popUpView.findViewById<View>(R.id.txt_marker_clouds_value) as TextView
            val txtMarkerPressure = popUpView.findViewById<View>(R.id.txt_marker_pressure_value) as TextView
            val txtMarkerHumidity = popUpView.findViewById<View>(R.id.txt_marker_humidity_value) as TextView
            val txtMarkerAddress = popUpView.findViewById<View>(R.id.txt_marker_address) as TextView
            val txtMarkerDate = popUpView.findViewById<View>(R.id.txt_marker_date) as TextView

            val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton


            if (title.equals("Officer Incident Report", true)) {
                dbRead.collection("officer")
                        .whereEqualTo("evidenceURL", evid + "-pdf")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Accident Incident Report", true)) {
                dbRead.collection("accident")
                        .whereEqualTo("evidenceURL", evid + "-pdf")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Sexual-Assault Incident Report", true)) {
                dbRead.collection("sexual-assault")
                        .whereEqualTo("evidenceURL", evid + "-pdf")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Theft Incident Report", true)) {
                dbRead.collection("theft")
                        .whereEqualTo("evidenceURL", evid + "-pdf")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Murder Incident Report", true)) {
                dbRead.collection("murder")
                        .whereEqualTo("evidenceURL", evid + "-pdf")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Terrorism Incident Report", true)) {
                dbRead.collection("terrorism")
                        .whereEqualTo("evidenceURL", evid + "-pdf")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Flooding Incident Report", true)) {
                dbRead.collection("flooding")
                        .whereEqualTo("evidenceURL", evid + "-pdf")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Firehazard Incident Report", true)) {
                dbRead.collection("firehazard")
                        .whereEqualTo("evidenceURL", evid + "-pdf")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Illegal-Drugs Incident Report", true)) {
                dbRead.collection("illegal-drugs")
                        .whereEqualTo("evidenceURL", evid + "-pdf")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Assault Incident Report", true)) {
                dbRead.collection("assault")
                        .whereEqualTo("evidenceURL", evid + "-pdf")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("General Incident Report", true)) {
                dbRead.collection("general")
                        .whereEqualTo("evidenceURL", evid + "-pdf")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            }

                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                btnConfirm.setOnClickListener {
                        mWeatherDialogPdfPopUp.dismiss()
                }


        }


        private fun showWeatherDialogDocx(evid: String, title: String) {
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_weather, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mWeatherDialogDocxPopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mWeatherDialogDocxPopUp.setBackgroundDrawable(colorDrawable)
                mWeatherDialogDocxPopUp.isOutsideTouchable = true

                val user = auth.currentUser

                if (Build.VERSION.SDK_INT >= 21) {
                    mWeatherDialogDocxPopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                    mWeatherDialogDocxPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                    mWeatherDialogDocxPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

            val txtMarkerTitle = popUpView.findViewById<View>(R.id.txt_marker_title) as TextView
            val mMarkerImage = popUpView.findViewById<View>(R.id.img_mark) as ImageView
            val txtMarkerCondition = popUpView.findViewById<View>(R.id.txt_marker_condition) as TextView
            val txtMarkerTemp = popUpView.findViewById<View>(R.id.txt_marker_temp_value) as TextView
            val txtMarkerWindspeed = popUpView.findViewById<View>(R.id.txt_marker_windspeed_value) as TextView
            val txtMarkerWindangle = popUpView.findViewById<View>(R.id.txt_marker_windangle_value) as TextView
            val txtMarkerCloud = popUpView.findViewById<View>(R.id.txt_marker_clouds_value) as TextView
            val txtMarkerPressure = popUpView.findViewById<View>(R.id.txt_marker_pressure_value) as TextView
            val txtMarkerHumidity = popUpView.findViewById<View>(R.id.txt_marker_humidity_value) as TextView
            val txtMarkerAddress = popUpView.findViewById<View>(R.id.txt_marker_address) as TextView
            val txtMarkerDate = popUpView.findViewById<View>(R.id.txt_marker_date) as TextView

            val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton


            if (title.equals("Officer Incident Report", true)) {
                dbRead.collection("officer")
                        .whereEqualTo("evidenceURL", evid + "-docx")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Accident Incident Report", true)) {
                dbRead.collection("accident")
                        .whereEqualTo("evidenceURL", evid + "-docx")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Sexual-Assault Incident Report", true)) {
                dbRead.collection("sexual-assault")
                        .whereEqualTo("evidenceURL", evid + "-docx")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Theft Incident Report", true)) {
                dbRead.collection("theft")
                        .whereEqualTo("evidenceURL", evid + "-docx")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Murder Incident Report", true)) {
                dbRead.collection("murder")
                        .whereEqualTo("evidenceURL", evid + "-docx")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Terrorism Incident Report", true)) {
                dbRead.collection("terrorism")
                        .whereEqualTo("evidenceURL", evid + "-docx")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Flooding Incident Report", true)) {
                dbRead.collection("flooding")
                        .whereEqualTo("evidenceURL", evid + "-docx")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Firehazard Incident Report", true)) {
                dbRead.collection("firehazard")
                        .whereEqualTo("evidenceURL", evid + "-docx")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Illegal-Drugs Incident Report", true)) {
                dbRead.collection("illegal-drugs")
                        .whereEqualTo("evidenceURL", evid + "-docx")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("Assault Incident Report", true)) {
                dbRead.collection("assault")
                        .whereEqualTo("evidenceURL", evid + "-docx")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            } else if (title.equals("General Incident Report", true)) {
                dbRead.collection("general")
                        .whereEqualTo("evidenceURL", evid + "-docx")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                //Log.d(TAG, "${document.id} => ${document.data}")

                                val id = document.getString("id")
                                val documentID = document.getString("documentID")
                                val subType = document.getString("subType")
                                val xtitle = document.getString("title")
                                val desc = document.getString("description")
                                val address = document.getString("address")
                                val date = document.getString("date")
                                val evid = document.getString("evidenceURL")
                                val latitude = document.getDouble("latitude")
                                val longitude = document.getDouble("longitude")

                                val wtemp = document.getString("weatherTemp")
                                val wcondition = document.getString("weatherDesc")
                                val wclouds = document.getString("weatherClouds")
                                val wwindspeed = document.getString("weatherWindSpeed")
                                val wwindangle = document.getString("weatherWindAngle")
                                val whumidity = document.getString("weatherHumidity")
                                val wpressure = document.getString("weatherPressure")

                                if (wtemp != null && wcondition != null && wclouds != null && wwindspeed != null && wwindangle != null && whumidity != null){
                                    if (wcondition.contains("clear sky", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.clearsky)
                                    } else if (wcondition.contains("clouds", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.fewclouds)
                                    } else if (wcondition.contains("rain", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("drizzle", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.rain)
                                    } else if (wcondition.contains("thunderstorm", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.thunder)
                                    } else if (wcondition.contains("snow", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.snow)
                                    } else if (wcondition.contains("atmosphere", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else if (wcondition.contains("mist", true)){
                                        mMarkerImage.setBackgroundResource(R.drawable.mist)
                                    } else {
                                        mMarkerImage.setBackgroundResource(R.drawable.brokencloud)
                                    }

                                    txtMarkerTemp.setText(wtemp)
                                    txtMarkerCondition.setText(wcondition)
                                    txtMarkerCloud.setText(wclouds)
                                    txtMarkerHumidity.setText(whumidity)
                                    txtMarkerWindspeed.setText(wwindspeed)
                                    txtMarkerWindangle.setText(wwindangle)
                                    txtMarkerPressure.setText(wpressure)
                                } else {

                                    mMarkerImage.setBackgroundResource(R.drawable.brokencloud)

                                    txtMarkerTemp.setText(":::")
                                    txtMarkerCondition.setText(":::")
                                    txtMarkerCloud.setText(":::")
                                    txtMarkerHumidity.setText(":::")
                                    txtMarkerWindspeed.setText(":::")
                                    txtMarkerWindangle.setText(":::")
                                    txtMarkerPressure.setText(":::")
                                }

                                txtMarkerTitle.setText(title)
                                txtMarkerAddress.setText(address.toString())
                                txtMarkerDate.setText(date.toString())

                                incidentID = documentID.toString()
                                //val location = LatLng(latitude!!, longitude!!)

                            }
                        }
                        .addOnFailureListener { exception ->
                            //Log.d(TAG, "Error getting documents: ", exception)
                        }
            }


            btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                btnConfirm.setOnClickListener {
                        mWeatherDialogDocxPopUp.dismiss()
                }


        }


        private fun showMarkerDialogVideo(evid: String, title: String) {
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_marker, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mMarkerDialogVideoPopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mMarkerDialogVideoPopUp.setBackgroundDrawable(colorDrawable)
                mMarkerDialogVideoPopUp.isOutsideTouchable = true

                val user = auth.currentUser

                if (Build.VERSION.SDK_INT >= 21) {
                        mMarkerDialogVideoPopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mMarkerDialogVideoPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mMarkerDialogVideoPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

                //val txtTitle = popUpView.findViewById<View>(R.id.txt_about_us_title) as TextView
                //val txtDetail = popUpView.findViewById<View>(R.id.txt_about_us_detail) as TextView
                val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton
                val btnCall = popUpView.findViewById<View>(R.id.img_call) as ImageView
                val btnView = popUpView.findViewById<View>(R.id.img_open) as ImageView
                val btnShare = popUpView.findViewById<View>(R.id.img_share) as ImageView
                val btnMessage = popUpView.findViewById<View>(R.id.img_message) as ImageView

                val txtMarkerTitle = popUpView.findViewById<View>(R.id.txt_marker_title) as TextView
                val mMarkerImage = popUpView.findViewById<View>(R.id.img_mark) as ImageView
                val txtMarkerAddress = popUpView.findViewById<View>(R.id.txt_marker_address) as TextView
                val txtMarkerDate = popUpView.findViewById<View>(R.id.txt_marker_date) as TextView
                val txtMarkerDesc = popUpView.findViewById<View>(R.id.txt_marker_desc) as TextView
                val txtMarkerSubType = popUpView.findViewById<View>(R.id.txt_marker_ctype) as TextView


                if (title.equals("Officer Incident Report", true)) {
                        dbRead.collection("officer")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title)
                                                mMarkerImage.setImageResource(R.drawable.police)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Accident Incident Report", true)) {
                        dbRead.collection("accident")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title)
                                                mMarkerImage.setImageResource(R.drawable.accident)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Sexual-Assault Incident Report", true)) {
                        dbRead.collection("sexual-assault")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.rape)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Theft Incident Report", true)) {
                        dbRead.collection("theft")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.robbery)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Murder Incident Report", true)) {
                        dbRead.collection("murder")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.murder)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Terrorism Incident Report", true)) {
                        dbRead.collection("terrorism")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.terrorist)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Flooding Incident Report", true)) {
                        dbRead.collection("flooding")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.flood)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Firehazard Incident Report", true)) {
                        dbRead.collection("firehazard")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.fire)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Illegal-Drugs Incident Report", true)) {
                        dbRead.collection("illegal-drugs")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.drug)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Assault Incident Report", true)) {
                        dbRead.collection("assault")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.general)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("General Incident Report", true)) {
                        dbRead.collection("general")
                                .whereEqualTo("evidenceURL", evid + "-video")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.general)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                }

                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                //txtTitle.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_WEBSITE, "")
                //txtDetail.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_TEXT, "")
                btnConfirm.setOnClickListener {
                        mMarkerDialogVideoPopUp.dismiss()
                        //Toast.makeText(this@MapActivity, address+""+crimetype+""+mdate+""+lat+""+lon, Toast.LENGTH_LONG).show()
                }


                btnCall.setOnClickListener {
                        // Show weather forecast of an incident
                        showWeatherDialogVideo(evid, title)
                        mMarkerDialogVideoPopUp.dismiss()
                }

                btnView.setOnClickListener { view: View? ->
                        // Download video to local file
                        downloadVideoToLocalFile(evid)
                        mMarkerDialogVideoPopUp.dismiss()
                }


                btnMessage.setOnClickListener { view: View? ->
                        if (::incidentID.isInitialized){
                                startActivity(Intent(mContext, IncidentChatActivity::class.java).putExtra("Tag", incidentID))
                        } else {
                                Toast.makeText(mContext, "Sorry! You cannot perform this operation at this time", Toast.LENGTH_LONG).show()
                        }
                        mMarkerDialogVideoPopUp.dismiss()
                }

                btnShare.setOnClickListener {

                        UtilMethods.shareTheApp(mContext, title+" \n"+" EvidenceURL: "+evid+"\n"+" To learn more about the incident, " +
                                "Download eyewitness app from play store. Click here:"+" https://play.google.com/store/apps/details?id="+packageName+"/")
                        mMarkerDialogVideoPopUp.dismiss()
                }


        }


        private fun showMarkerDialogAudio(evid: String, title: String) {
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_marker, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mMarkerDialogAudioPopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mMarkerDialogAudioPopUp.setBackgroundDrawable(colorDrawable)
                mMarkerDialogAudioPopUp.isOutsideTouchable = true

                val user = auth.currentUser

                if (Build.VERSION.SDK_INT >= 21) {
                        mMarkerDialogAudioPopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mMarkerDialogAudioPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mMarkerDialogAudioPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

                //val txtTitle = popUpView.findViewById<View>(R.id.txt_about_us_title) as TextView
                //val txtDetail = popUpView.findViewById<View>(R.id.txt_about_us_detail) as TextView
                val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton
                val btnCall = popUpView.findViewById<View>(R.id.img_call) as ImageView
                val btnView = popUpView.findViewById<View>(R.id.img_open) as ImageView
                val btnShare = popUpView.findViewById<View>(R.id.img_share) as ImageView
                val btnMessage = popUpView.findViewById<View>(R.id.img_message) as ImageView


                val txtMarkerTitle = popUpView.findViewById<View>(R.id.txt_marker_title) as TextView
                val mMarkerImage = popUpView.findViewById<View>(R.id.img_mark) as ImageView
                val txtMarkerAddress = popUpView.findViewById<View>(R.id.txt_marker_address) as TextView
                val txtMarkerDate = popUpView.findViewById<View>(R.id.txt_marker_date) as TextView
                val txtMarkerDesc = popUpView.findViewById<View>(R.id.txt_marker_desc) as TextView
                val txtMarkerSubType = popUpView.findViewById<View>(R.id.txt_marker_ctype) as TextView


                if (title.equals("Officer Incident Report", true)) {
                        dbRead.collection("officer")
                                .whereEqualTo("evidenceURL", evid + "-audio")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.police)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Accident Incident Report", true)) {
                        dbRead.collection("accident")
                                .whereEqualTo("evidenceURL", evid + "-audio")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title)
                                                mMarkerImage.setImageResource(R.drawable.accident)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Sexual-Assault Incident Report", true)) {
                        dbRead.collection("sexual-assault")
                                .whereEqualTo("evidenceURL", evid + "-audio")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.rape)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Theft Incident Report", true)) {
                        dbRead.collection("theft")
                                .whereEqualTo("evidenceURL", evid + "-audio")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.robbery)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Murder Incident Report", true)) {
                        dbRead.collection("murder")
                                .whereEqualTo("evidenceURL", evid + "-audio")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.murder)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Terrorism Incident Report", true)) {
                        dbRead.collection("terrorism")
                                .whereEqualTo("evidenceURL", evid + "-audio")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.terrorist)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Firehazard Incident Report", true)) {
                        dbRead.collection("firehazard")
                                .whereEqualTo("evidenceURL", evid + "-audio")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.fire)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Flooding Incident Report", true)) {
                        dbRead.collection("flooding")
                                .whereEqualTo("evidenceURL", evid + "-audio")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.flood)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Illegal-Drugs Incident Report", true)) {
                        dbRead.collection("illegal-drugs")
                                .whereEqualTo("evidenceURL", evid + "-audio")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.drug)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Assault Incident Report", true)) {
                        dbRead.collection("assault")
                                .whereEqualTo("evidenceURL", evid + "-audio")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.general)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("General Incident Report", true)) {
                        dbRead.collection("general")
                                .whereEqualTo("evidenceURL", evid + "-audio")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.general)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                }


                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                //txtTitle.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_WEBSITE, "")
                //txtDetail.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_TEXT, "")
                btnConfirm.setOnClickListener {
                        mMarkerDialogAudioPopUp.dismiss()
                        //Toast.makeText(this@MapActivity, address+""+crimetype+""+mdate+""+lat+""+lon, Toast.LENGTH_LONG).show()
                }


                btnCall.setOnClickListener {
                        // Show weather forecast of an incident
                        showWeatherDialogAudio(evid, title)
                        mMarkerDialogAudioPopUp.dismiss()


                }

                btnView.setOnClickListener { view: View? ->
                        // Download audio to local file
                        downloadAudioToLocalFile(evid)
                        mMarkerDialogAudioPopUp.dismiss()
                }


                btnMessage.setOnClickListener { view: View? ->
                        if (::incidentID.isInitialized){
                                startActivity(Intent(mContext, IncidentChatActivity::class.java).putExtra("Tag", incidentID))
                        } else {
                                Toast.makeText(mContext, "Sorry! You cannot perform this operation at this time", Toast.LENGTH_LONG).show()
                        }
                        mMarkerDialogAudioPopUp.dismiss()
                }

                btnShare.setOnClickListener {

                    UtilMethods.shareTheApp(mContext, title+" \n"+" EvidenceURL: "+evid+"\n"+" To learn more about the incident, " +
                            "Download eyewitness app from play store. Click here:"+" https://play.google.com/store/apps/details?id="+packageName+"/")
                        mMarkerDialogAudioPopUp.dismiss()
                }


        }


        fun showMarkerDialogImage(evid: String, title: String) {
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_marker, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mMarkerDialogImagePopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mMarkerDialogImagePopUp.setBackgroundDrawable(colorDrawable)
                mMarkerDialogImagePopUp.isOutsideTouchable = true

                val user = auth.currentUser

                if (Build.VERSION.SDK_INT >= 21) {
                        mMarkerDialogImagePopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mMarkerDialogImagePopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mMarkerDialogImagePopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

                //val txtTitle = popUpView.findViewById<View>(R.id.txt_about_us_title) as TextView
                //val txtDetail = popUpView.findViewById<View>(R.id.txt_about_us_detail) as TextView
                val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton
                val btnCall = popUpView.findViewById<View>(R.id.img_call) as ImageView
                val btnView = popUpView.findViewById<View>(R.id.img_open) as ImageView
                val btnShare = popUpView.findViewById<View>(R.id.img_share) as ImageView
                val btnMessage = popUpView.findViewById<View>(R.id.img_message) as ImageView


                val txtMarkerTitle = popUpView.findViewById<View>(R.id.txt_marker_title) as TextView
                val mMarkerImage = popUpView.findViewById<View>(R.id.img_mark) as ImageView
                val txtMarkerAddress = popUpView.findViewById<View>(R.id.txt_marker_address) as TextView
                val txtMarkerDate = popUpView.findViewById<View>(R.id.txt_marker_date) as TextView
                val txtMarkerDesc = popUpView.findViewById<View>(R.id.txt_marker_desc) as TextView
                val txtMarkerSubType = popUpView.findViewById<View>(R.id.txt_marker_ctype) as TextView

                if (title.equals("Officer Incident Report", true)) {
                        dbRead.collection("officer")
                                .whereEqualTo("evidenceURL", evid + "-image")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.police)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Accident Incident Report", true)) {
                        dbRead.collection("accident")
                                .whereEqualTo("evidenceURL", evid + "-image")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title)
                                                mMarkerImage.setImageResource(R.drawable.accident)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Sexual-Assault Incident Report", true)) {
                        dbRead.collection("sexual-assault")
                                .whereEqualTo("evidenceURL", evid + "-image")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.rape)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Theft Incident Report", true)) {
                        dbRead.collection("theft")
                                .whereEqualTo("evidenceURL", evid + "-image")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.robbery)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Murder Incident Report", true)) {
                        dbRead.collection("murder")
                                .whereEqualTo("evidenceURL", evid + "-image")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.murder)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Terrorism Incident Report", true)) {
                        dbRead.collection("terrorism")
                                .whereEqualTo("evidenceURL", evid + "-image")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.terrorist)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Firehazard Incident Report", true)) {
                        dbRead.collection("firehazard")
                                .whereEqualTo("evidenceURL", evid + "-image")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.fire)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Flooding Incident Report", true)) {
                        dbRead.collection("flooding")
                                .whereEqualTo("evidenceURL", evid + "-image")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.flood)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Illegal-Drugs Incident Report", true)) {
                        dbRead.collection("illegal-drugs")
                                .whereEqualTo("evidenceURL", evid + "-image")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.drug)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Assault Incident Report", true)) {
                        dbRead.collection("assault")
                                .whereEqualTo("evidenceURL", evid + "-image")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.general)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("General Incident Report", true)) {
                        dbRead.collection("general")
                                .whereEqualTo("evidenceURL", evid + "-image")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.general)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                //incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                }


                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                //txtTitle.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_WEBSITE, "")
                //txtDetail.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_TEXT, "")
                btnConfirm.setOnClickListener {
                        mMarkerDialogImagePopUp.dismiss()
                        //Toast.makeText(this@MapActivity, address+""+crimetype+""+mdate+""+lat+""+lon, Toast.LENGTH_LONG).show()
                }


                btnCall.setOnClickListener {
                        // Show weather forecast of an incident
                        showWeatherDialogImage(evid, title)
                        mMarkerDialogImagePopUp.dismiss()


                }

                btnView.setOnClickListener { view: View? ->
                        // Download video to local file
                        downloadImageToLocalFile(evid)
                        mMarkerDialogImagePopUp.dismiss()
                }


                btnMessage.setOnClickListener { view: View? ->
                        if (::incidentID.isInitialized){
                                startActivity(Intent(mContext, IncidentChatActivity::class.java).putExtra("Tag", incidentID))
                        } else {
                                Toast.makeText(mContext, "Sorry! You cannot perform this operation at this time", Toast.LENGTH_LONG).show()
                        }
                        mMarkerDialogImagePopUp.dismiss()
                }

                btnShare.setOnClickListener {

                    UtilMethods.shareTheApp(mContext, title+" \n"+" EvidenceURL: "+evid+"\n"+" To learn more about the incident, " +
                            "Download eyewitness app from play store. Click here:"+" https://play.google.com/store/apps/details?id="+packageName+"/")
                        mMarkerDialogImagePopUp.dismiss()
                }


        }


        private fun showMarkerDialogDocx(evid: String, title: String) {
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_marker, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mMarkerDialogDocxPopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mMarkerDialogDocxPopUp.setBackgroundDrawable(colorDrawable)
                mMarkerDialogDocxPopUp.isOutsideTouchable = true

                val user = auth.currentUser

                if (Build.VERSION.SDK_INT >= 21) {
                        mMarkerDialogDocxPopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mMarkerDialogDocxPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mMarkerDialogDocxPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

                //val txtTitle = popUpView.findViewById<View>(R.id.txt_about_us_title) as TextView
                //val txtDetail = popUpView.findViewById<View>(R.id.txt_about_us_detail) as TextView
                val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton
                val btnCall = popUpView.findViewById<View>(R.id.img_call) as ImageView
                val btnView = popUpView.findViewById<View>(R.id.img_open) as ImageView
                val btnShare = popUpView.findViewById<View>(R.id.img_share) as ImageView
                val btnMessage = popUpView.findViewById<View>(R.id.img_message) as ImageView


                val txtMarkerTitle = popUpView.findViewById<View>(R.id.txt_marker_title) as TextView
                val mMarkerImage = popUpView.findViewById<View>(R.id.img_mark) as ImageView
                val txtMarkerAddress = popUpView.findViewById<View>(R.id.txt_marker_address) as TextView
                val txtMarkerDate = popUpView.findViewById<View>(R.id.txt_marker_date) as TextView
                val txtMarkerDesc = popUpView.findViewById<View>(R.id.txt_marker_desc) as TextView
                val txtMarkerSubType = popUpView.findViewById<View>(R.id.txt_marker_ctype) as TextView


                if (title.equals("Officer Incident Report", true)) {
                        dbRead.collection("officer")
                                .whereEqualTo("evidenceURL", evid + "-docx")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.police)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Accident Incident Report", true)) {
                        dbRead.collection("accident")
                                .whereEqualTo("evidenceURL", evid + "-docx")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title)
                                                mMarkerImage.setImageResource(R.drawable.accident)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Sexual-Assault Incident Report", true)) {
                        dbRead.collection("sexual-assault")
                                .whereEqualTo("evidenceURL", evid + "-docx")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.rape)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Theft Incident Report", true)) {
                        dbRead.collection("theft")
                                .whereEqualTo("evidenceURL", evid + "-docx")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.robbery)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Murder Incident Report", true)) {
                        dbRead.collection("murder")
                                .whereEqualTo("evidenceURL", evid + "-docx")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.murder)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Terrorism Incident Report", true)) {
                        dbRead.collection("terrorism")
                                .whereEqualTo("evidenceURL", evid + "-docx")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.terrorist)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Firehazard Incident Report", true)) {
                        dbRead.collection("firehazard")
                                .whereEqualTo("evidenceURL", evid + "-docx")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.fire)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Flooding Incident Report", true)) {
                        dbRead.collection("flooding")
                                .whereEqualTo("evidenceURL", evid + "-docx")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.flood)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Illegal-Drugs Incident Report", true)) {
                        dbRead.collection("illegal-drugs")
                                .whereEqualTo("evidenceURL", evid + "-docx")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.drug)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Assault Incident Report", true)) {
                        dbRead.collection("assault")
                                .whereEqualTo("evidenceURL", evid + "-docx")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.general)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("General Incident Report", true)) {
                        dbRead.collection("general")
                                .whereEqualTo("evidenceURL", evid + "-docx")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.general)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                }


                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                //txtTitle.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_WEBSITE, "")
                //txtDetail.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_TEXT, "")
                btnConfirm.setOnClickListener {
                        mMarkerDialogDocxPopUp.dismiss()
                        //Toast.makeText(this@MapActivity, address+""+crimetype+""+mdate+""+lat+""+lon, Toast.LENGTH_LONG).show()
                }


                btnCall.setOnClickListener {
                        // Show weather forecast of an incident
                        showWeatherDialogDocx(evid, title)
                        mMarkerDialogDocxPopUp.dismiss()


                }

                btnView.setOnClickListener { view: View? ->
                        // Download video to local file
                        downloadDocToLocalFile(evid)
                        mMarkerDialogDocxPopUp.dismiss()
                }


                btnMessage.setOnClickListener { view: View? ->
                        if (::incidentID.isInitialized) {
                                startActivity(Intent(mContext, IncidentChatActivity::class.java).putExtra("Tag", incidentID))
                        } else {
                                Toast.makeText(mContext, "Sorry! You cannot perform this operation at this time", Toast.LENGTH_LONG).show()
                        }
                        mMarkerDialogDocxPopUp.dismiss()
                }

                btnShare.setOnClickListener {

                    UtilMethods.shareTheApp(mContext, title+" \n"+" EvidenceURL: "+evid+"\n"+" To learn more about the incident, " +
                            "Download eyewitness app from play store. Click here:"+" https://play.google.com/store/apps/details?id="+packageName+"/")
                        mMarkerDialogDocxPopUp.dismiss()
                }


        }


        private fun showMarkerDialogPDF(evid: String, title: String) {
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_marker, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mMarkerDialogPdfPopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mMarkerDialogPdfPopUp.setBackgroundDrawable(colorDrawable)
                mMarkerDialogPdfPopUp.isOutsideTouchable = true

                val user = auth.currentUser

                if (Build.VERSION.SDK_INT >= 21) {
                        mMarkerDialogPdfPopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mMarkerDialogPdfPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mMarkerDialogPdfPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

                //val txtTitle = popUpView.findViewById<View>(R.id.txt_about_us_title) as TextView
                //val txtDetail = popUpView.findViewById<View>(R.id.txt_about_us_detail) as TextView
                val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton
                val btnCall = popUpView.findViewById<View>(R.id.img_call) as ImageView
                val btnView = popUpView.findViewById<View>(R.id.img_open) as ImageView
                val btnShare = popUpView.findViewById<View>(R.id.img_share) as ImageView
                val btnMessage = popUpView.findViewById<View>(R.id.img_message) as ImageView


                val txtMarkerTitle = popUpView.findViewById<View>(R.id.txt_marker_title) as TextView
                val mMarkerImage = popUpView.findViewById<View>(R.id.img_mark) as ImageView
                val txtMarkerAddress = popUpView.findViewById<View>(R.id.txt_marker_address) as TextView
                val txtMarkerDate = popUpView.findViewById<View>(R.id.txt_marker_date) as TextView
                val txtMarkerDesc = popUpView.findViewById<View>(R.id.txt_marker_desc) as TextView
                val txtMarkerSubType = popUpView.findViewById<View>(R.id.txt_marker_ctype) as TextView


                if (title.equals("Officer Incident Report", true)) {
                        dbRead.collection("officer")
                                .whereEqualTo("evidenceURL", evid + "-pdf")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.police)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Accident Incident Report", true)) {
                        dbRead.collection("accident")
                                .whereEqualTo("evidenceURL", evid + "-pdf")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title)
                                                mMarkerImage.setImageResource(R.drawable.accident)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Sexual-Assault Incident Report", true)) {
                        dbRead.collection("sexual-assault")
                                .whereEqualTo("evidenceURL", evid + "-pdf")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.rape)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Theft Incident Report", true)) {
                        dbRead.collection("theft")
                                .whereEqualTo("evidenceURL", evid + "-pdf")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.robbery)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Murder Incident Report", true)) {
                        dbRead.collection("murder")
                                .whereEqualTo("evidenceURL", evid + "-pdf")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.murder)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Terrorism Incident Report", true)) {
                        dbRead.collection("terrorism")
                                .whereEqualTo("evidenceURL", evid + "-pdf")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.terrorist)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Firehazard Incident Report", true)) {
                        dbRead.collection("firehazard")
                                .whereEqualTo("evidenceURL", evid + "-pdf")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.fire)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Flooding Incident Report", true)) {
                        dbRead.collection("flooding")
                                .whereEqualTo("evidenceURL", evid + "-pdf")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.flood)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Illegal-Drugs Incident Report", true)) {
                        dbRead.collection("illegal-drugs")
                                .whereEqualTo("evidenceURL", evid + "-pdf")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.drug)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("Assault Incident Report", true)) {
                        dbRead.collection("assault")
                                .whereEqualTo("evidenceURL", evid + "-pdf")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.general)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                } else if (title.equals("General Incident Report", true)) {
                        dbRead.collection("general")
                                .whereEqualTo("evidenceURL", evid + "-pdf")
                                .get()
                                .addOnSuccessListener { result ->
                                        for (document in result) {
                                                //Log.d(TAG, "${document.id} => ${document.data}")

                                                val id = document.getString("id")
                                                val documentID = document.getString("documentID")
                                                val subType = document.getString("subType")
                                                val xtitle = document.getString("title")
                                                val desc = document.getString("description")
                                                val address = document.getString("address")
                                                val date = document.getString("date")
                                                val evid = document.getString("evidenceURL")
                                                val latitude = document.getDouble("latitude")
                                                val longitude = document.getDouble("longitude")

                                                txtMarkerTitle.setText(title.toString())
                                                mMarkerImage.setImageResource(R.drawable.general)
                                                txtMarkerAddress.setText(address.toString())
                                                txtMarkerDate.setText(date.toString())
                                                txtMarkerDesc.setText(desc.toString())
                                                txtMarkerSubType.setText(subType.toString())

                                                incidentID = documentID.toString()
                                                //val location = LatLng(latitude!!, longitude!!)

                                        }
                                }
                                .addOnFailureListener { exception ->
                                        //Log.d(TAG, "Error getting documents: ", exception)
                                }
                }

                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                //txtTitle.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_WEBSITE, "")
                //txtDetail.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_TEXT, "")
                btnConfirm.setOnClickListener {
                        mMarkerDialogPdfPopUp.dismiss()
                        //Toast.makeText(this@MapActivity, address+""+crimetype+""+mdate+""+lat+""+lon, Toast.LENGTH_LONG).show()
                }


                btnCall.setOnClickListener {
                        // Show weather forecast of an incident
                        showWeatherDialogPdf(evid, title)
                        mMarkerDialogPdfPopUp.dismiss()


                }

                btnView.setOnClickListener { view: View? ->
                        // Download video to local file
                        downloadPdfToLocalFile(evid)
                        mMarkerDialogPdfPopUp.dismiss()
                }


                btnMessage.setOnClickListener { view: View? ->
                        if (::incidentID.isInitialized){
                                startActivity(Intent(mContext, IncidentChatActivity::class.java).putExtra("Tag", incidentID))
                        } else {
                                Toast.makeText(mContext, "Sorry! You cannot perform this operation at this time", Toast.LENGTH_LONG).show()
                        }
                        mMarkerDialogPdfPopUp.dismiss()
                }

                btnShare.setOnClickListener {

                    UtilMethods.shareTheApp(mContext, title+" \n"+" EvidenceURL: "+evid+"\n"+" To learn more about the incident, " +
                            "Download eyewitness app from play store. Click here:"+" https://play.google.com/store/apps/details?id="+packageName+"/")
                        mMarkerDialogPdfPopUp.dismiss()
                }


        }


        @RequiresApi(Build.VERSION_CODES.O)
        @SuppressLint("RestrictedApi")
        private fun showReportDialog(title: String, desc: String, address: String, lat: Double, lon: Double, state: String, country: String) {
                lateinit var selectedSpinItem: String
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_report, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mReportDialogPopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mReportDialogPopUp.setBackgroundDrawable(colorDrawable)
                mReportDialogPopUp.isOutsideTouchable = true


                if (Build.VERSION.SDK_INT >= 21) {
                        mReportDialogPopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mReportDialogPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mReportDialogPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

                val txtTitleAddress = popUpView.findViewById<View>(R.id.txt_address) as TextView
                txtTitleAddress.setText(address) // Set the text of the incident address
                val txtLawEnforcement = popUpView.findViewById<View>(R.id.txt_agency) as TextView


            val btnState = popUpView.findViewById<View>(R.id.btn_state) as AppCompatButton
            val btnCountry = popUpView.findViewById<View>(R.id.btn_country) as AppCompatButton
            val btnGlobal = popUpView.findViewById<View>(R.id.btn_global) as AppCompatButton

            btnState.setBackgroundColor(Color.parseColor("#2196F3"))
            btnState.setTextColor(Color.WHITE)
            btnGlobal.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
            btnGlobal.setTextColor(Color.BLACK)
            btnCountry.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
            btnCountry.setTextColor(Color.BLACK)

            // Access and query verified agencies in the agency collection
            if (::mState.isInitialized) {
                // Clear the ArrayList of agencies
                mAgencyList.clear()
                // Access and query verified agencies in the agency collection
                db.collection("agency")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                val mUID = document.getString("uid").toString()
                                val mAcode = document.getString("accesscode").toString()
                                val cState = document.getString("state").toString()
                                val mName = document.getString("name").toString()
                                if (!mAcode.isEmpty() && cState.equals(mState, true)) {
                                    val spinAgency = popUpView.findViewById<View>(R.id.spin_agency) as Spinner
                                    if (mName != null){
                                        mAgencyList.add(mName) // Add list of agencies
                                        getContentView(popUpView)?.let {
                                            ArrayAdapter<String>(mContext,
                                                    android.R.layout.simple_spinner_item, mAgencyList)
                                                    .also { adapter ->
                                                        // Specify the layout to use when the list of choices appears
                                                        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
                                                        // Apply the adapter to the spinner
                                                        spinAgency.adapter = adapter
                                                        if (adapter != null) {
                                                            txtLawEnforcement.text = "Select Law Enforcement Agency"
                                                        }
                                                        spinAgency.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
                                                            override fun onItemSelected(
                                                                    parent: AdapterView<*>?,
                                                                    view: View?,
                                                                    position: Int,
                                                                    id: Long
                                                            ) {
                                                                // Pick the selected item
                                                                val selectedItem = parent?.getItemAtPosition(position).toString()
                                                                if (selectedItem != null) {
                                                                    selectedSpinItem = selectedItem
                                                                    Toast.makeText(mContext, selectedSpinItem, Toast.LENGTH_LONG).show()
                                                                }
                                                            }

                                                            override fun onNothingSelected(parent: AdapterView<*>?) {

                                                            }
                                                        }
                                                    }
                                        }
                                    }


                                }
                            }
                        }
            }


            btnState.setOnClickListener {
                // Clear the ArrayList of agencies
                mAgencyList.clear()
                // Get the current user
                val user = auth.currentUser
                val uid = user?.uid
                if (uid != null) {
                    // Retrieve Officer collection
                    btnState.setBackgroundColor(Color.parseColor("#2196F3"))
                    btnState.setTextColor(Color.WHITE)
                    btnCountry.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnCountry.setTextColor(Color.BLACK)
                    btnGlobal.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnGlobal.setTextColor(Color.BLACK)

                    if (::mState.isInitialized) {
                        // Access and query verified agencies in the agency collection
                        db.collection("agency")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        val mUID = document.getString("uid").toString()
                                        val mAcode = document.getString("accesscode").toString()
                                        val cState = document.getString("state").toString()
                                        val mName = document.getString("name").toString()
                                        if (!mAcode.isEmpty() && cState.equals(mState, true)) {
                                            val spinAgency = popUpView.findViewById<View>(R.id.spin_agency) as Spinner
                                            if (mName != null){
                                                mAgencyList.add(mName) // Add list of agencies
                                                getContentView(popUpView)?.let {
                                                    ArrayAdapter<String>(mContext,
                                                            android.R.layout.simple_spinner_item, mAgencyList)
                                                            .also { adapter ->
                                                                // Specify the layout to use when the list of choices appears
                                                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
                                                                // Apply the adapter to the spinner
                                                                spinAgency.adapter = adapter
                                                                if (adapter != null) {
                                                                    txtLawEnforcement.text = "Select Law Enforcement Agency"
                                                                }
                                                                spinAgency.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
                                                                    override fun onItemSelected(
                                                                            parent: AdapterView<*>?,
                                                                            view: View?,
                                                                            position: Int,
                                                                            id: Long
                                                                    ) {
                                                                        // Pick the selected item
                                                                        val selectedItem = parent?.getItemAtPosition(position).toString()
                                                                        if (selectedItem != null) {
                                                                            selectedSpinItem = selectedItem
                                                                            Toast.makeText(mContext, selectedSpinItem, Toast.LENGTH_LONG).show()
                                                                        }
                                                                    }

                                                                    override fun onNothingSelected(parent: AdapterView<*>?) {

                                                                    }
                                                                }
                                                            }
                                                }
                                            }


                                        }
                                    }
                                }
                    }

                }
            }


            btnCountry.setOnClickListener {
                // Clear the ArrayList of agencies
                mAgencyList.clear()
                // Get the current user
                val user = auth.currentUser
                val uid = user?.uid
                if (uid != null) {
                    // Retrieve Officer collection
                    btnCountry.setBackgroundColor(Color.parseColor("#2196F3"))
                    btnCountry.setTextColor(Color.WHITE)
                    btnState.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnState.setTextColor(Color.BLACK)
                    btnGlobal.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnGlobal.setTextColor(Color.BLACK)

                    if (::mCountry.isInitialized) {
                        // Access and query verified agencies in the agency collection
                        db.collection("agency")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        val mUID = document.getString("uid").toString()
                                        val mAcode = document.getString("accesscode").toString()
                                        val cCountry = document.getString("country").toString()
                                        val mName = document.getString("name").toString()
                                        if (!mAcode.isEmpty() && cCountry.equals(mCountry, true)) {
                                            val spinAgency = popUpView.findViewById<View>(R.id.spin_agency) as Spinner
                                            if (mName != null){
                                                mAgencyList.add(mName) // Add list of agencies
                                                getContentView(popUpView)?.let {
                                                    ArrayAdapter<String>(mContext,
                                                            android.R.layout.simple_spinner_item, mAgencyList)
                                                            .also { adapter ->
                                                                // Specify the layout to use when the list of choices appears
                                                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
                                                                // Apply the adapter to the spinner
                                                                spinAgency.adapter = adapter
                                                                if (adapter != null) {
                                                                    txtLawEnforcement.text = "Select Law Enforcement Agency"
                                                                }
                                                                spinAgency.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
                                                                    override fun onItemSelected(
                                                                            parent: AdapterView<*>?,
                                                                            view: View?,
                                                                            position: Int,
                                                                            id: Long
                                                                    ) {
                                                                        // Pick the selected item
                                                                        val selectedItem = parent?.getItemAtPosition(position).toString()
                                                                        if (selectedItem != null) {
                                                                            selectedSpinItem = selectedItem
                                                                            Toast.makeText(mContext, selectedSpinItem, Toast.LENGTH_LONG).show()
                                                                        }
                                                                    }

                                                                    override fun onNothingSelected(parent: AdapterView<*>?) {

                                                                    }
                                                                }
                                                            }
                                                }
                                            }


                                        }
                                    }
                                }
                    }

                }
            }


            btnGlobal.setOnClickListener {
                // Clear the ArrayList of agencies
                mAgencyList.clear()
                // Get the current user
                val user = auth.currentUser
                val uid = user?.uid
                if (uid != null) {
                    // Retrieve Officer collection
                    btnGlobal.setBackgroundColor(Color.parseColor("#2196F3"))
                    btnGlobal.setTextColor(Color.WHITE)
                    btnCountry.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnCountry.setTextColor(Color.BLACK)
                    btnState.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnState.setTextColor(Color.BLACK)

                    if (::mCountry.isInitialized) {
                        // Access and query verified agencies in the agency collection
                        db.collection("agency")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        val mUID = document.getString("uid").toString()
                                        val mAcode = document.getString("accesscode").toString()
                                        val cCountry = document.getString("country").toString()
                                        val mName = document.getString("name").toString()
                                        if (!mAcode.isEmpty() && !cCountry.equals(mCountry, true)) {
                                            val spinAgency = popUpView.findViewById<View>(R.id.spin_agency) as Spinner
                                            if (mName != null){
                                                mAgencyList.add(mName) // Add list of agencies
                                                getContentView(popUpView)?.let {
                                                    ArrayAdapter<String>(mContext,
                                                            android.R.layout.simple_spinner_item, mAgencyList)
                                                            .also { adapter ->
                                                                // Specify the layout to use when the list of choices appears
                                                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
                                                                // Apply the adapter to the spinner
                                                                spinAgency.adapter = adapter
                                                                if (adapter != null) {
                                                                    txtLawEnforcement.text = "Select Law Enforcement Agency"
                                                                }
                                                                spinAgency.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
                                                                    override fun onItemSelected(
                                                                            parent: AdapterView<*>?,
                                                                            view: View?,
                                                                            position: Int,
                                                                            id: Long
                                                                    ) {
                                                                        // Pick the selected item
                                                                        val selectedItem = parent?.getItemAtPosition(position).toString()
                                                                        if (selectedItem != null) {
                                                                            selectedSpinItem = selectedItem
                                                                            Toast.makeText(mContext, selectedSpinItem, Toast.LENGTH_LONG).show()
                                                                        }
                                                                    }

                                                                    override fun onNothingSelected(parent: AdapterView<*>?) {

                                                                    }
                                                                }
                                                            }
                                                }
                                            }


                                        }
                                    }
                                }
                    }

                }
            }

                //val txtTitle = popUpView.findViewById<View>(R.id.txt_about_us_title) as TextView
                //val txtDetail = popUpView.findViewById<View>(R.id.txt_about_us_detail) as TextView
                val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton
                val btnPolice = popUpView.findViewById<View>(R.id.img_police) as ImageView
                val btnAccident = popUpView.findViewById<View>(R.id.img_accident) as ImageView
                val btnRape = popUpView.findViewById<View>(R.id.img_rape) as ImageView
                val btnRobbery = popUpView.findViewById<View>(R.id.img_robbery) as ImageView
                val btnMurder = popUpView.findViewById<View>(R.id.img_murder) as ImageView
                val btnTerrorist = popUpView.findViewById<View>(R.id.img_terrorist) as ImageView
                val btnFirehazard = popUpView.findViewById<View>(R.id.img_fire) as ImageView
                val btnFlooding = popUpView.findViewById<View>(R.id.img_flood) as ImageView
                val btnAssault = popUpView.findViewById<View>(R.id.img_general) as ImageView
                val btnIllegalDrugs = popUpView.findViewById<View>(R.id.img_drug) as ImageView

                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                //txtTitle.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_WEBSITE, "")
                //txtDetail.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_TEXT, "")
                btnConfirm.setOnClickListener { mReportDialogPopUp.dismiss() }

                btnPolice.setOnClickListener {
                        val crimetype = TOC_POLICE
                        var current = LocalDateTime.now()
                        var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                        var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon, selectedSpinItem, state, country)
                        } else {
                               Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnAccident.setOnClickListener {
                        val crimetype = TOC_ACCIDENT
                        var current = LocalDateTime.now()
                        var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                        var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon, selectedSpinItem, state, country)
                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnRape.setOnClickListener {
                        val crimetype = TOC_RAPE
                        var current = LocalDateTime.now()
                        var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                        var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon, selectedSpinItem, state, country)
                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnRobbery.setOnClickListener {
                        val crimetype = TOC_ROBBERY
                        var current = LocalDateTime.now()
                        var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                        var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon, selectedSpinItem, state, country)
                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnMurder.setOnClickListener {
                        val crimetype = TOC_MURDER
                        var current = LocalDateTime.now()
                        var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                        var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon, selectedSpinItem, state, country)
                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnTerrorist.setOnClickListener {
                        val crimetype = TOC_TERRORIST
                        var current = LocalDateTime.now()
                        var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                        var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon, selectedSpinItem, state, country)
                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }


                btnFirehazard.setOnClickListener {
                        val crimetype = TOC_FIRE
                        var current = LocalDateTime.now()
                        var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                        var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon, selectedSpinItem, state, country)
                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }


                btnFlooding.setOnClickListener {
                        val crimetype = TOC_FLOOD
                        var current = LocalDateTime.now()
                        var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                        var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon, selectedSpinItem, state, country)
                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }


                btnIllegalDrugs.setOnClickListener {
                        val crimetype = TOC_DRUG
                        var current = LocalDateTime.now()
                        var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                        var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon, selectedSpinItem, state, country)
                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnAssault.setOnClickListener {
                        val crimetype = TOC_ASSAULT
                        var current = LocalDateTime.now()
                        var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                        var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon, selectedSpinItem, state, country)
                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

        }


        private fun showUploadDialog(title: String, desc: String, address: String, crimetype: String, mdate: String, lat: Double, lon: Double, reportedTo: String, state: String, country: String) {
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_upload, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mUploadDialogPopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mUploadDialogPopUp.setBackgroundDrawable(colorDrawable)
                mUploadDialogPopUp.isOutsideTouchable = true

                val user = auth.currentUser

                if (Build.VERSION.SDK_INT >= 21) {
                        mUploadDialogPopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mUploadDialogPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mUploadDialogPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

                //val txtTitle = popUpView.findViewById<View>(R.id.txt_about_us_title) as TextView
                //val txtDetail = popUpView.findViewById<View>(R.id.txt_about_us_detail) as TextView
                val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton
                //val btnVideo = popUpView.findViewById<View>(R.id.img_video) as ImageView
                val btnCam = popUpView.findViewById<View>(R.id.img_cam) as ImageView
                val btnAudio = popUpView.findViewById<View>(R.id.img_audio) as ImageView
                val btnPhoto = popUpView.findViewById<View>(R.id.img_photo) as ImageView
                val btnDoc = popUpView.findViewById<View>(R.id.img_doc) as ImageView
                val btnPdf = popUpView.findViewById<View>(R.id.img_pdf) as ImageView


                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                //txtTitle.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_WEBSITE, "")
                //txtDetail.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_TEXT, "")
                btnConfirm.setOnClickListener {
                        mUploadDialogPopUp.dismiss()
                        //Toast.makeText(this@MapActivity, address+""+crimetype+""+mdate+""+lat+""+lon, Toast.LENGTH_LONG).show()
                }
                btnCam.setOnClickListener {
                    val intent = Intent()
                    intent.setType("video/*")
                    intent.setAction(Intent.ACTION_GET_CONTENT)
                    startActivityForResult(Intent.createChooser(intent, "Select Video"), VIDEO)

                        //Add data to firestore database
                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                        addDataToFirebase(user!!.uid, crimetype, title, desc, address, mdate, lat, lon, mStamp.toString(), "video", reportedTo, state, country)
                        val location = LatLng(lat, lon)
                        mMap?.moveCamera(CameraUpdateFactory.newLatLngZoom(location, DEFAULT_ZOOM.toFloat()))
                        mUploadDialogPopUp.dismiss()


                }


                btnAudio.setOnClickListener { view: View? ->
                        val intent = Intent()
                        intent.setType("audio/*")
                        intent.setAction(Intent.ACTION_GET_CONTENT)
                        startActivityForResult(Intent.createChooser(intent, "Select Audio"), AUDIO)

                        //Add data to firestore database
                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                        addDataToFirebase(user!!.uid, crimetype, title, desc, address, mdate, lat, lon, mStamp.toString(), "audio", reportedTo, state, country)
                        val location = LatLng(lat, lon)
                        mMap?.moveCamera(CameraUpdateFactory.newLatLngZoom(location, DEFAULT_ZOOM.toFloat()))
                        mUploadDialogPopUp.dismiss()


                }

                /*
                btnCam.setOnClickListener {
                        Intent(MediaStore.ACTION_IMAGE_CAPTURE).also { takeImageIntent ->
                                takeImageIntent.resolveActivity(packageManager)?.also {
                                        startActivityForResult(takeImageIntent, PHOTO)
                                }
                        }

                        //Add data to firestore database
                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                        addDataToFirebase(user!!.uid, crimetype, title, desc, address, mdate, lat, lon, mStamp.toString(), "image", reportedTo)
                        val location = LatLng(lat, lon)
                        mMap?.moveCamera(CameraUpdateFactory.newLatLngZoom(location, DEFAULT_ZOOM.toFloat()))
                        mUploadDialogPopUp.dismiss()
                }

                 */

                btnPhoto.setOnClickListener { view: View? ->
                        val intent = Intent()
                        intent.setType("image/*")
                        intent.setAction(Intent.ACTION_GET_CONTENT)
                        startActivityForResult(Intent.createChooser(intent, "Select Picture"), PHOTO)

                        //Add data to firestore database
                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                        addDataToFirebase(user!!.uid, crimetype, title, desc, address, mdate, lat, lon, mStamp.toString(), "image", reportedTo, state, country)
                        val location = LatLng(lat, lon)
                        mMap?.moveCamera(CameraUpdateFactory.newLatLngZoom(location, DEFAULT_ZOOM.toFloat()))
                        mUploadDialogPopUp.dismiss()

                }

                btnDoc.setOnClickListener { view: View? ->
                        val intent = Intent()
                        intent.setType("docx/*")
                        intent.setAction(Intent.ACTION_GET_CONTENT)
                        startActivityForResult(Intent.createChooser(intent, "Select DOCX"), DOCX)

                        //Add data to firestore database
                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                        addDataToFirebase(user!!.uid, crimetype, title, desc, address, mdate, lat, lon, mStamp.toString(), "docx", reportedTo, state, country)
                        val location = LatLng(lat, lon)
                        mMap?.moveCamera(CameraUpdateFactory.newLatLngZoom(location, DEFAULT_ZOOM.toFloat()))
                        mUploadDialogPopUp.dismiss()

                }

                btnPdf.setOnClickListener { view: View? ->
                        val intent = Intent()
                        intent.setType("pdf/*")
                        intent.setAction(Intent.ACTION_GET_CONTENT)
                        startActivityForResult(Intent.createChooser(intent, "Select PDF"), PDF)

                        //Add data to firestore database
                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                        addDataToFirebase(user!!.uid, crimetype, title, desc, address, mdate, lat, lon, mStamp.toString(), "pdf", reportedTo, state, country)
                        val location = LatLng(lat, lon)
                        mMap?.moveCamera(CameraUpdateFactory.newLatLngZoom(location, DEFAULT_ZOOM.toFloat()))
                        mUploadDialogPopUp.dismiss()


                }


        }


        // Duplicate method for instant incident reporting
        @RequiresApi(Build.VERSION_CODES.O)
        private fun showReportDialogHome(title: String, desc: String, address: String, lat: Double, lon: Double, state: String, country: String) {
                lateinit var selectedSpinItem: String
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_report, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                val txtTitleAddress = popUpView.findViewById<View>(R.id.txt_address) as TextView
                txtTitleAddress.setText(address) // Set the text of the incident address
                val txtLawEnforcement = popUpView.findViewById<View>(R.id.txt_agency) as TextView

                mReportDialogPopUp = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mReportDialogPopUp.setBackgroundDrawable(colorDrawable)
                mReportDialogPopUp.isOutsideTouchable = true


                if (Build.VERSION.SDK_INT >= 21) {
                        mReportDialogPopUp.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mReportDialogPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mReportDialogPopUp.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

            val btnState = popUpView.findViewById<View>(R.id.btn_state) as AppCompatButton
            val btnCountry = popUpView.findViewById<View>(R.id.btn_country) as AppCompatButton
            val btnGlobal = popUpView.findViewById<View>(R.id.btn_global) as AppCompatButton

            btnState.setBackgroundColor(Color.parseColor("#2196F3"))
            btnState.setTextColor(Color.WHITE)
            btnGlobal.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
            btnGlobal.setTextColor(Color.BLACK)
            btnCountry.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
            btnCountry.setTextColor(Color.BLACK)

            // Access and query verified agencies in the agency collection
            if (::mState.isInitialized) {
                // Clear the ArrayList of agencies
                mAgencyList.clear()
                // Access and query verified agencies in the agency collection
                db.collection("agency")
                        .get()
                        .addOnSuccessListener { result ->
                            for (document in result) {
                                val mUID = document.getString("uid").toString()
                                val mAcode = document.getString("accesscode").toString()
                                val cState = document.getString("state").toString()
                                val mName = document.getString("name").toString()
                                if (!mAcode.isEmpty() && cState.equals(mState, true)) {
                                    val spinAgency = popUpView.findViewById<View>(R.id.spin_agency) as Spinner
                                    if (mName != null){
                                        mAgencyList.add(mName) // Add list of agencies
                                        getContentView(popUpView)?.let {
                                            ArrayAdapter<String>(mContext,
                                                    android.R.layout.simple_spinner_item, mAgencyList)
                                                    .also { adapter ->
                                                        // Specify the layout to use when the list of choices appears
                                                        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
                                                        // Apply the adapter to the spinner
                                                        spinAgency.adapter = adapter
                                                        if (adapter != null) {
                                                            txtLawEnforcement.text = "Select Law Enforcement Agency"
                                                        }
                                                        spinAgency.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
                                                            override fun onItemSelected(
                                                                    parent: AdapterView<*>?,
                                                                    view: View?,
                                                                    position: Int,
                                                                    id: Long
                                                            ) {
                                                                // Pick the selected item
                                                                val selectedItem = parent?.getItemAtPosition(position).toString()
                                                                if (selectedItem != null) {
                                                                    selectedSpinItem = selectedItem
                                                                    Toast.makeText(mContext, selectedSpinItem, Toast.LENGTH_LONG).show()
                                                                }
                                                            }

                                                            override fun onNothingSelected(parent: AdapterView<*>?) {

                                                            }
                                                        }
                                                    }
                                        }
                                    }


                                }
                            }
                        }
            }


            btnState.setOnClickListener {
                // Clear the ArrayList of agencies
                mAgencyList.clear()
                // Get the current user
                val user = auth.currentUser
                val uid = user?.uid
                if (uid != null) {
                    // Retrieve Officer collection
                    btnState.setBackgroundColor(Color.parseColor("#2196F3"))
                    btnState.setTextColor(Color.WHITE)
                    btnCountry.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnCountry.setTextColor(Color.BLACK)
                    btnGlobal.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnGlobal.setTextColor(Color.BLACK)

                    if (::mState.isInitialized) {
                        // Access and query verified agencies in the agency collection
                        db.collection("agency")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        val mUID = document.getString("uid").toString()
                                        val mAcode = document.getString("accesscode").toString()
                                        val cState = document.getString("state").toString()
                                        val mName = document.getString("name").toString()
                                        if (!mAcode.isEmpty() && cState.equals(mState, true)) {
                                            val spinAgency = popUpView.findViewById<View>(R.id.spin_agency) as Spinner
                                            if (mName != null){
                                                mAgencyList.add(mName) // Add list of agencies
                                                getContentView(popUpView)?.let {
                                                    ArrayAdapter<String>(mContext,
                                                            android.R.layout.simple_spinner_item, mAgencyList)
                                                            .also { adapter ->
                                                                // Specify the layout to use when the list of choices appears
                                                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
                                                                // Apply the adapter to the spinner
                                                                spinAgency.adapter = adapter
                                                                if (adapter != null) {
                                                                    txtLawEnforcement.text = "Select Law Enforcement Agency"
                                                                }
                                                                spinAgency.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
                                                                    override fun onItemSelected(
                                                                            parent: AdapterView<*>?,
                                                                            view: View?,
                                                                            position: Int,
                                                                            id: Long
                                                                    ) {
                                                                        // Pick the selected item
                                                                        val selectedItem = parent?.getItemAtPosition(position).toString()
                                                                        if (selectedItem != null) {
                                                                            selectedSpinItem = selectedItem
                                                                            Toast.makeText(mContext, selectedSpinItem, Toast.LENGTH_LONG).show()
                                                                        }
                                                                    }

                                                                    override fun onNothingSelected(parent: AdapterView<*>?) {

                                                                    }
                                                                }
                                                            }
                                                }
                                            }


                                        }
                                    }
                                }
                    }

                }
            }


            btnCountry.setOnClickListener {
                // Clear the ArrayList of agencies
                mAgencyList.clear()
                // Get the current user
                val user = auth.currentUser
                val uid = user?.uid
                if (uid != null) {
                    // Retrieve Officer collection
                    btnCountry.setBackgroundColor(Color.parseColor("#2196F3"))
                    btnCountry.setTextColor(Color.WHITE)
                    btnState.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnState.setTextColor(Color.BLACK)
                    btnGlobal.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnGlobal.setTextColor(Color.BLACK)

                    if (::mCountry.isInitialized) {
                        // Access and query verified agencies in the agency collection
                        db.collection("agency")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        val mUID = document.getString("uid").toString()
                                        val mAcode = document.getString("accesscode").toString()
                                        val cCountry = document.getString("country").toString()
                                        val mName = document.getString("name").toString()
                                        if (!mAcode.isEmpty() && cCountry.equals(mCountry, true)) {
                                            val spinAgency = popUpView.findViewById<View>(R.id.spin_agency) as Spinner
                                            if (mName != null){
                                                mAgencyList.add(mName) // Add list of agencies
                                                getContentView(popUpView)?.let {
                                                    ArrayAdapter<String>(mContext,
                                                            android.R.layout.simple_spinner_item, mAgencyList)
                                                            .also { adapter ->
                                                                // Specify the layout to use when the list of choices appears
                                                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
                                                                // Apply the adapter to the spinner
                                                                spinAgency.adapter = adapter
                                                                if (adapter != null) {
                                                                    txtLawEnforcement.text = "Select Law Enforcement Agency"
                                                                }
                                                                spinAgency.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
                                                                    override fun onItemSelected(
                                                                            parent: AdapterView<*>?,
                                                                            view: View?,
                                                                            position: Int,
                                                                            id: Long
                                                                    ) {
                                                                        // Pick the selected item
                                                                        val selectedItem = parent?.getItemAtPosition(position).toString()
                                                                        if (selectedItem != null) {
                                                                            selectedSpinItem = selectedItem
                                                                            Toast.makeText(mContext, selectedSpinItem, Toast.LENGTH_LONG).show()
                                                                        }
                                                                    }

                                                                    override fun onNothingSelected(parent: AdapterView<*>?) {

                                                                    }
                                                                }
                                                            }
                                                }
                                            }


                                        }
                                    }
                                }
                    }

                }
            }


            btnGlobal.setOnClickListener {
                // Clear the ArrayList of agencies
                mAgencyList.clear()
                // Get the current user
                val user = auth.currentUser
                val uid = user?.uid
                if (uid != null) {
                    // Retrieve Officer collection
                    btnGlobal.setBackgroundColor(Color.parseColor("#2196F3"))
                    btnGlobal.setTextColor(Color.WHITE)
                    btnCountry.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnCountry.setTextColor(Color.BLACK)
                    btnState.setBackgroundColor(Color.parseColor("#FFF5F5F5"))
                    btnState.setTextColor(Color.BLACK)

                    if (::mCountry.isInitialized) {
                        // Access and query verified agencies in the agency collection
                        db.collection("agency")
                                .get()
                                .addOnSuccessListener { result ->
                                    for (document in result) {
                                        val mUID = document.getString("uid").toString()
                                        val mAcode = document.getString("accesscode").toString()
                                        val cCountry = document.getString("country").toString()
                                        val mName = document.getString("name").toString()
                                        if (!mAcode.isEmpty() && !cCountry.equals(mCountry, true)) {
                                            val spinAgency = popUpView.findViewById<View>(R.id.spin_agency) as Spinner
                                            if (mName != null){
                                                mAgencyList.add(mName) // Add list of agencies
                                                getContentView(popUpView)?.let {
                                                    ArrayAdapter<String>(mContext,
                                                            android.R.layout.simple_spinner_item, mAgencyList)
                                                            .also { adapter ->
                                                                // Specify the layout to use when the list of choices appears
                                                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
                                                                // Apply the adapter to the spinner
                                                                spinAgency.adapter = adapter
                                                                if (adapter != null) {
                                                                    txtLawEnforcement.text = "Select Law Enforcement Agency"
                                                                }
                                                                spinAgency.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
                                                                    override fun onItemSelected(
                                                                            parent: AdapterView<*>?,
                                                                            view: View?,
                                                                            position: Int,
                                                                            id: Long
                                                                    ) {
                                                                        // Pick the selected item
                                                                        val selectedItem = parent?.getItemAtPosition(position).toString()
                                                                        if (selectedItem != null) {
                                                                            selectedSpinItem = selectedItem
                                                                            Toast.makeText(mContext, selectedSpinItem, Toast.LENGTH_LONG).show()
                                                                        }
                                                                    }

                                                                    override fun onNothingSelected(parent: AdapterView<*>?) {

                                                                    }
                                                                }
                                                            }
                                                }
                                            }


                                        }
                                    }
                                }
                    }

                }
            }

                //val txtTitle = popUpView.findViewById<View>(R.id.txt_about_us_title) as TextView
                //val txtDetail = popUpView.findViewById<View>(R.id.txt_about_us_detail) as TextView
                val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton
                val btnPolice = popUpView.findViewById<View>(R.id.img_police) as ImageView
                val btnAccident = popUpView.findViewById<View>(R.id.img_accident) as ImageView
                val btnRape = popUpView.findViewById<View>(R.id.img_rape) as ImageView
                val btnRobbery = popUpView.findViewById<View>(R.id.img_robbery) as ImageView
                val btnMurder = popUpView.findViewById<View>(R.id.img_murder) as ImageView
                val btnTerrorist = popUpView.findViewById<View>(R.id.img_terrorist) as ImageView
                val btnFirehazard = popUpView.findViewById<View>(R.id.img_fire) as ImageView
                val btnFlooding = popUpView.findViewById<View>(R.id.img_flood) as ImageView
                val btnAssault = popUpView.findViewById<View>(R.id.img_general) as ImageView
                val btnIllegalDrugs = popUpView.findViewById<View>(R.id.img_drug) as ImageView

                val user = auth.currentUser

                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                //txtTitle.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_WEBSITE, "")
                //txtDetail.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_TEXT, "")
                btnConfirm.setOnClickListener { mReportDialogPopUp.dismiss() }

                btnPolice.setOnClickListener {
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                Intent(MediaStore.ACTION_VIDEO_CAPTURE).also { takeVideoIntent ->
                                takeVideoIntent.resolveActivity(packageManager)?.also {
                                        startActivityForResult(takeVideoIntent, VIDEO)
                                        }
                                }

                                val crimetype = TOC_POLICE
                                var current = LocalDateTime.now()
                                var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                                var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                                //showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon)

                                val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                                // Add data to firebase
                                addDataToFirebase(user!!.uid, crimetype, title, desc, address, fullLocaleTime, lat, lon, mStamp.toString(), "video", selectedSpinItem, state, country)

                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }

                        mReportDialogPopUp.dismiss()
                }

                btnAccident.setOnClickListener {
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                Intent(MediaStore.ACTION_VIDEO_CAPTURE).also { takeVideoIntent ->
                                        takeVideoIntent.resolveActivity(packageManager)?.also {
                                                startActivityForResult(takeVideoIntent, VIDEO)
                                        }
                                }

                                val crimetype = TOC_ACCIDENT
                                var current = LocalDateTime.now()
                                var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                                var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                                //showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon)
                                val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                                // Add data to firebase
                                addDataToFirebase(user!!.uid, crimetype, title, desc, address, fullLocaleTime, lat, lon, mStamp.toString(), "video", selectedSpinItem, state, country)

                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }

                        mReportDialogPopUp.dismiss()
                }

                btnRape.setOnClickListener {
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                Intent(MediaStore.ACTION_VIDEO_CAPTURE).also { takeVideoIntent ->
                                        takeVideoIntent.resolveActivity(packageManager)?.also {
                                                startActivityForResult(takeVideoIntent, VIDEO)
                                        }
                                }

                                val crimetype = TOC_RAPE
                                var current = LocalDateTime.now()
                                var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                                var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                                //showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon)
                                val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                                // Add data to firebase
                                addDataToFirebase(user!!.uid, crimetype, title, desc, address, fullLocaleTime, lat, lon, mStamp.toString(), "video", selectedSpinItem, state, country)

                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnRobbery.setOnClickListener {
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                Intent(MediaStore.ACTION_VIDEO_CAPTURE).also { takeVideoIntent ->
                                        takeVideoIntent.resolveActivity(packageManager)?.also {
                                                startActivityForResult(takeVideoIntent, VIDEO)
                                        }
                                }

                                val crimetype = TOC_ROBBERY
                                var current = LocalDateTime.now()
                                var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                                var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                                //showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon)
                                val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                                // Add data to firebase
                                addDataToFirebase(user!!.uid, crimetype, title, desc, address, fullLocaleTime, lat, lon, mStamp.toString(), "video", selectedSpinItem, state, country)

                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnMurder.setOnClickListener {
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                Intent(MediaStore.ACTION_VIDEO_CAPTURE).also { takeVideoIntent ->
                                        takeVideoIntent.resolveActivity(packageManager)?.also {
                                                startActivityForResult(takeVideoIntent, VIDEO)
                                        }
                                }

                                val crimetype = TOC_MURDER
                                var current = LocalDateTime.now()
                                var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                                var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                                //showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon)
                                val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                                // Add data to firebase
                                addDataToFirebase(user!!.uid, crimetype, title, desc, address, fullLocaleTime, lat, lon, mStamp.toString(), "video", selectedSpinItem, state, country)

                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnTerrorist.setOnClickListener {
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                Intent(MediaStore.ACTION_VIDEO_CAPTURE).also { takeVideoIntent ->
                                        takeVideoIntent.resolveActivity(packageManager)?.also {
                                                startActivityForResult(takeVideoIntent, VIDEO)
                                        }
                                }

                                val crimetype = TOC_TERRORIST
                                var current = LocalDateTime.now()
                                var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                                var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                                //showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon)
                                val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                                // Add data to firebase
                                addDataToFirebase(user!!.uid, crimetype, title, desc, address, fullLocaleTime, lat, lon, mStamp.toString(), "video", selectedSpinItem, state, country)

                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnFirehazard.setOnClickListener {
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                Intent(MediaStore.ACTION_VIDEO_CAPTURE).also { takeVideoIntent ->
                                        takeVideoIntent.resolveActivity(packageManager)?.also {
                                                startActivityForResult(takeVideoIntent, VIDEO)
                                        }
                                }

                                val crimetype = TOC_FIRE
                                var current = LocalDateTime.now()
                                var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                                var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                                //showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon)
                                val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                                // Add data to firebase
                                addDataToFirebase(user!!.uid, crimetype, title, desc, address, fullLocaleTime, lat, lon, mStamp.toString(), "video", selectedSpinItem, state, country)

                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnFlooding.setOnClickListener {
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                Intent(MediaStore.ACTION_VIDEO_CAPTURE).also { takeVideoIntent ->
                                        takeVideoIntent.resolveActivity(packageManager)?.also {
                                                startActivityForResult(takeVideoIntent, VIDEO)
                                        }
                                }

                                val crimetype = TOC_FLOOD
                                var current = LocalDateTime.now()
                                var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                                var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                                //showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon)
                                val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                                // Add data to firebase
                                addDataToFirebase(user!!.uid, crimetype, title, desc, address, fullLocaleTime, lat, lon, mStamp.toString(), "video", selectedSpinItem, state, country)

                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnAssault.setOnClickListener {
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                Intent(MediaStore.ACTION_VIDEO_CAPTURE).also { takeVideoIntent ->
                                        takeVideoIntent.resolveActivity(packageManager)?.also {
                                                startActivityForResult(takeVideoIntent, VIDEO)
                                        }
                                }

                                val crimetype = TOC_ASSAULT
                                var current = LocalDateTime.now()
                                var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                                var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                                //showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon)
                                val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                                // Add data to firebase
                                addDataToFirebase(user!!.uid, crimetype, title, desc, address, fullLocaleTime, lat, lon, mStamp.toString(), "video", selectedSpinItem, state, country)

                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

                btnIllegalDrugs.setOnClickListener {
                        val txtAgency = txtLawEnforcement.text.toString()
                        if (!txtAgency.equals("Loading...", true)) {
                                Intent(MediaStore.ACTION_VIDEO_CAPTURE).also { takeVideoIntent ->
                                        takeVideoIntent.resolveActivity(packageManager)?.also {
                                                startActivityForResult(takeVideoIntent, VIDEO)
                                        }
                                }

                                val crimetype = TOC_DRUG
                                var current = LocalDateTime.now()
                                var fullLocaleFormat = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT)
                                var fullLocaleTime = current.format(fullLocaleFormat) // Retrieve only date
                                //showUploadDialog(title, desc, address, crimetype, fullLocaleTime, lat, lon)
                                val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                                // Add data to firebase
                                addDataToFirebase(user!!.uid, crimetype, title, desc, address, fullLocaleTime, lat, lon, mStamp.toString(), "video", selectedSpinItem, state, country)

                        } else {
                                Toast.makeText(mContext, "Error! You must select a law enforcement agency", Toast.LENGTH_LONG).show()
                        }
                        mReportDialogPopUp.dismiss()
                }

        }


        override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
                super.onActivityResult(requestCode, resultCode, data)
                //val uriTxt = findViewById<View>(R.id.uriTxt) as TextView
                if (resultCode == RESULT_OK) {
                        if (requestCode == PDF) {
                                filePath = data!!.data!!
                                uploadPdf()
                        } else if (requestCode == DOCX) {
                                filePath = data!!.data!!
                                uploadDoc()
                        } else if (requestCode == AUDIO) {
                                filePath = data!!.data!!
                                uploadAudio()
                        } else if (requestCode == VIDEO) {
                                filePath = data!!.data!!
                                uploadVideo()
                        } else if (requestCode == PHOTO) {
                                filePath = data!!.data!!
                                uploadPhoto()
                        }
                }

        }


        private fun addDataToFirebase(ID: String, mType: String, Title: String, Desc: String, Address: String, mDate: String, Latitude: Double, Longitude: Double, mEvid: String, MimeType: String, mReportedTo: String, mState: String, mCountry: String) {
                mIncident.setIncidentID(ID)
                mIncident.setIncidentType(mType)
                mIncident.setIncidentTitle(Title)
                mIncident.setIncidentDesc(Desc)
                mIncident.setIncidentAddress(Address)
                mIncident.setIncidentDate(mDate)
                mIncident.setIncidentLatitude(Latitude)
                mIncident.setIncidentLongitude(Longitude)
                mIncident.setIncidentMimeType(MimeType)
                mIncident.setIncidentEvidenceURL(mEvid)
                mIncident.setIncidentReportedTo(mReportedTo)
                mIncident.setIncidentState(mState)
                mIncident.setIncidentCountry(mCountry)

                val id = mIncident.getIncidentID()
                val type = mIncident.getIncidentType()
                val title = mIncident.getIncidentTitle()
                val desc = mIncident.getIncidentDesc()
                val address = mIncident.getIncidentAddress()
                val date = mIncident.getIncidentDate()
                val lat = mIncident.getIncidentLatitude()
                val lon = mIncident.getIncidentLongitude()
                val mimetype = mIncident.getIncidentMimeType()
                val evidence = mIncident.getIncidentEvidenceURL()
                val reportedTo = mIncident.getIncidentReportedTo()
                val state = mIncident.getIncidentState()
                val country = mIncident.getIncidentCountry()

                val incident = hashMapOf(
                        "id" to id,
                        "type" to type,
                        "title" to title,
                        "description" to desc,
                        "address" to address,
                        "mimetype" to mimetype,
                        "date" to date,
                        "latitude" to lat,
                        "longitude" to lon,
                        "evidenceURL" to evidence,
                        "documentID" to "",
                        "subType" to "",
                        "reportedTo" to reportedTo,
                        "status" to "Under Review",
                        "state" to state,
                        "country" to country,
                        "visibility" to "private",
                        "notifyUser" to "unread",
                        "notifyAdmin" to "unread",
                        "reviewedBy" to "",
                        "reviewInfo" to "The following complaint has been reported to "+reportedTo+"."+" The report will be reviewed by an authority who would make a final decision.",
                        "weatherDesc" to "",
                        "weatherTemp" to "",
                        "weatherTempMax" to "",
                        "weatherTempMin" to "",
                        "weatherClouds" to "",
                        "weatherFeelsLike" to "",
                        "weatherPressure" to "",
                        "weatherWindSpeed" to "",
                        "weatherWindAngle" to "",
                        "weatherHumidity" to "",
                        "weatherSunrise" to "",
                        "weatherSunset" to ""
                )

                if (type.equals("Officer", true)) {
                        // Add a new document with a generated ID
                        db.collection("officer")
                                .add(incident)
                                .addOnSuccessListener { documentReference ->
                                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
                                        // Update the collection and add docuemnt ID
                                        val mDocumentID = documentReference.id
                                        val modifyRef = db.collection("officer").document(documentReference.id)
                                        modifyRef.update("documentID", mDocumentID)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                }
                                .addOnFailureListener { e ->
                                        Log.w(TAG, "Error adding document", e)
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }

                }
                if (type.equals("Accident", true)) {
                        // Add a new document with a generated ID
                        db.collection("accident")
                                .add(incident)
                                .addOnSuccessListener { documentReference ->
                                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
                                        // Update the collection and add docuemnt ID
                                        val mDocumentID = documentReference.id
                                        val modifyRef = db.collection("accident").document(documentReference.id)
                                        modifyRef.update("documentID", mDocumentID)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                }
                                .addOnFailureListener { e ->
                                        Log.w(TAG, "Error adding document", e)
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }

                }
                if (type.equals("Theft", true)) {
                        // Add a new document with a generated ID
                        db.collection("theft")
                                .add(incident)
                                .addOnSuccessListener { documentReference ->
                                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
                                        // Update the collection and add docuemnt ID
                                        val mDocumentID = documentReference.id
                                        val modifyRef = db.collection("theft").document(documentReference.id)
                                        modifyRef.update("documentID", mDocumentID)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                }
                                .addOnFailureListener { e ->
                                        Log.w(TAG, "Error adding document", e)
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }

                }
                if (type.equals("Terrorism", true)) {
                        // Add a new document with a generated ID
                        db.collection("terrorism")
                                .add(incident)
                                .addOnSuccessListener { documentReference ->
                                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
                                        // Update the collection and add docuemnt ID
                                        val mDocumentID = documentReference.id
                                        val modifyRef = db.collection("terrorism").document(documentReference.id)
                                        modifyRef.update("documentID", mDocumentID)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                }
                                .addOnFailureListener { e ->
                                        Log.w(TAG, "Error adding document", e)
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }

                }
                if (type.equals("Murder", true)) {
                        // Add a new document with a generated ID
                        db.collection("murder")
                                .add(incident)
                                .addOnSuccessListener { documentReference ->
                                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
                                        // Update the collection and add docuemnt ID
                                        val mDocumentID = documentReference.id
                                        val modifyRef = db.collection("murder").document(documentReference.id)
                                        modifyRef.update("documentID", mDocumentID)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                }
                                .addOnFailureListener { e ->
                                        Log.w(TAG, "Error adding document", e)
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }

                }
                if (type.equals("Sexual-Assault", true)) {
                        // Add a new document with a generated ID
                        db.collection("sexual-assault")
                                .add(incident)
                                .addOnSuccessListener { documentReference ->
                                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
                                        // Update the collection and add docuemnt ID
                                        val mDocumentID = documentReference.id
                                        val modifyRef = db.collection("sexual-assault").document(documentReference.id)
                                        modifyRef.update("documentID", mDocumentID)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                }
                                .addOnFailureListener { e ->
                                        Log.w(TAG, "Error adding document", e)
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }

                }
                if (type.equals("Firehazard", true)) {
                        // Add a new document with a generated ID
                        db.collection("firehazard")
                                .add(incident)
                                .addOnSuccessListener { documentReference ->
                                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
                                        // Update the collection and add docuemnt ID
                                        val mDocumentID = documentReference.id
                                        val modifyRef = db.collection("firehazard").document(documentReference.id)
                                        modifyRef.update("documentID", mDocumentID)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                }
                                .addOnFailureListener { e ->
                                        Log.w(TAG, "Error adding document", e)
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }

                }
                if (type.equals("Flooding", true)) {
                        // Add a new document with a generated ID
                        db.collection("flooding")
                                .add(incident)
                                .addOnSuccessListener { documentReference ->
                                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
                                        // Update the collection and add docuemnt ID
                                        val mDocumentID = documentReference.id
                                        val modifyRef = db.collection("flooding").document(documentReference.id)
                                        modifyRef.update("documentID", mDocumentID)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                }
                                .addOnFailureListener { e ->
                                        Log.w(TAG, "Error adding document", e)
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }

                }
                if (type.equals("Illegal-Drugs", true)) {
                        // Add a new document with a generated ID
                        db.collection("illegal-drugs")
                                .add(incident)
                                .addOnSuccessListener { documentReference ->
                                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
                                        // Update the collection and add docuemnt ID
                                        val mDocumentID = documentReference.id
                                        val modifyRef = db.collection("illegal-drugs").document(documentReference.id)
                                        modifyRef.update("documentID", mDocumentID)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                }
                                .addOnFailureListener { e ->
                                        Log.w(TAG, "Error adding document", e)
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }

                }
                if (type.equals("Assault", true)) {
                        // Add a new document with a generated ID
                        db.collection("assault")
                                .add(incident)
                                .addOnSuccessListener { documentReference ->
                                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
                                        // Update the collection and add docuemnt ID
                                        val mDocumentID = documentReference.id
                                        val modifyRef = db.collection("assault").document(documentReference.id)
                                        modifyRef.update("documentID", mDocumentID)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                }
                                .addOnFailureListener { e ->
                                        Log.w(TAG, "Error adding document", e)
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }

                }

        }


        private fun uploadVideo() {
                if (filePath != null) {
                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(Date())
                        mRefVideo = mStorageRef.child("eyewitness/evidence/video/" + UUID.randomUUID().toString())
                        val mPath: AssetFileDescriptor = applicationContext.contentResolver.openAssetFileDescriptor(filePath, "r")!!
                        // Get length of file in Bytes
                        val mByteSize: Long = mPath.length
                        // Convert the bytes to Kilobytes
                        val mKBSize: Long = mByteSize / 1024
                        // Convert the kilobytes to Megabytes
                        val mMBSize: Long = mKBSize / 1024
                        // Convert the megabytes to Gigabytes
                        val mGBSize: Long = mMBSize / 1024

                        val currentUserId = auth.currentUser?.uid.toString()
                        val userStatus = intent.getStringExtra("Tag")
                        if (userStatus.equals("user", true)) {
                                db.collection("users")
                                        .whereEqualTo("uid", currentUserId)
                                        .get()
                                        .addOnSuccessListener { result ->
                                                for (document in result) {
                                                        val documentID = document.getString("documentID")
                                                        val storageCap: Long? = document.getString("storageCap")?.toLong()
                                                        val storageUsed: Long? = document.getString("storageUsed")?.toLong()
                                                        val sCapSize: Long? = storageCap
                                                        val sUsedSize: Long? = storageUsed
                                                        if (mMBSize < sCapSize!!) {
                                                                if (sUsedSize!! < sCapSize) {
                                                                        val progress = ProgressDialog(this)
                                                                        progress.setTitle("Uploading....")
                                                                        progress.show()
                                                                        mRefVideo.putFile(filePath).addOnSuccessListener(object : OnSuccessListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onSuccess(p0: UploadTask.TaskSnapshot?) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Uploaded successfully", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                        // Modigy Used Storage
                                                                                        val modify = db.collection("users").document(documentID.toString())
                                                                                        val mTotalStorageUsed = mMBSize + sUsedSize
                                                                                        val mUpdatedStorageUsed = mTotalStorageUsed.toString()
                                                                                        modify.update("storageUsed", mUpdatedStorageUsed)
                                                                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                        mRefVideo.downloadUrl.addOnSuccessListener { evidURL ->
                                                                                                if (evidURL != null) {
                                                                                                        // Update the collection and add evidenceURL
                                                                                                        val type = mIncident.getIncidentType().toString().toLowerCase()
                                                                                                        // init for metadata
                                                                                                        val latmeta = mIncident.getIncidentLatitude()
                                                                                                        val lonmeta = mIncident.getIncidentLongitude()
                                                                                                        val addsmeta = mIncident.getIncidentAddress().toString()
                                                                                                        val datemeta = mIncident.getIncidentDate().toString()
                                                                                                        val mimetype = mIncident.getIncidentMimeType().toString()
                                                                                                        val typemeta = mIncident.getIncidentType().toString() +" Incident Report"
                                                                                                        val evidmeta = evidURL.toString()

                                                                                                        /* Obtain the public key material to initiate the encryption of metadata.
                                                                                                        val publicKeysetHandle = masterKeysetHandle.publicKeysetHandle
                                                                                                        // Get the primitive. For Encryption
                                                                                                        val hybridEncrypt: HybridEncrypt = publicKeysetHandle.getPrimitive(HybridEncrypt::class.java)
                                                                                                        // Use the primitive and encrypt the metatdata
                                                                                                        val encryptedlat = hybridEncrypt.encrypt(latmeta.toString().toByteArray(), latmeta.toString().toByteArray())
                                                                                                        val encryptedlon = hybridEncrypt.encrypt(lonmeta.toString().toByteArray(), lonmeta.toString().toByteArray())
                                                                                                        val encryptedadds = hybridEncrypt.encrypt(addsmeta.toByteArray(), addsmeta.toByteArray())
                                                                                                        val encrypteddate = hybridEncrypt.encrypt(datemeta.toByteArray(), datemeta.toByteArray())
                                                                                                        val encryptedmime = hybridEncrypt.encrypt(mimetype.toByteArray(), mimetype.toByteArray())
                                                                                                        val encryptedtype = hybridEncrypt.encrypt(typemeta.toByteArray(), typemeta.toByteArray())
                                                                                                        val encryptedevid = hybridEncrypt.encrypt(evidmeta.toByteArray(), evidmeta.toByteArray())

                                                                                                        // Creating and applying the encryptted metadata to the evidence file
                                                                                                        val mStorageMeta = StorageMetadata.Builder().setCustomMetadata("coordinates", encryptedlat.toString()+", "+encryptedlon.toString())
                                                                                                        .setCustomMetadata("address", encryptedadds.toString()).setCustomMetadata("date", encrypteddate.toString()).setCustomMetadata("incident", encryptedtype.toString())
                                                                                                                .setCustomMetadata("mimetype", encryptedmime.toString()).setCustomMetadata("evidence", encryptedevid.toString())
                                                                                                                .build()

                                                                                                        // Update the evidence file with the above metadata
                                                                                                        mRefVideo.updateMetadata(mStorageMeta).addOnSuccessListener { updatedMetadata ->
                                                                                                                // Evidence file has been updated with metadata
                                                                                                                //Toast.makeText(mContext, updatedMetadata.toString(), Toast.LENGTH_LONG).show()
                                                                                                        }.addOnFailureListener {
                                                                                                                // Uh-oh, an error occurred!
                                                                                                        }
                                                                                                        */

                                                                                                        // Start an asynchronous task for the weather api
                                                                                                        var mGenerateURL = "https://api.openweathermap.org/data/2.5/weather?lat="+latmeta+"&lon="+lonmeta+"&appid="+getString(R.string.weather_api_key)+"&units=metric"
                                                                                                        //mGenerateURL = mGenerateURL.replace(" ".toRegex(), "%20")

                                                                                                        db.collection(type)
                                                                                                                .whereEqualTo("evidenceURL", mIncident.getIncidentEvidenceURL().toString())
                                                                                                                .get()
                                                                                                                .addOnSuccessListener { result ->
                                                                                                                        for (document in result) {
                                                                                                                                //Log.d(TAG, "${document.id} => ${document.data}")
                                                                                                                                val documentID = document.getString("documentID")
                                                                                                                                val mEvidURL = evidURL.toString() + "-video"
                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                modify.update("evidenceURL", mEvidURL)
                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                // Init metadata for the following file incident

                                                                                                                                                // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                                                                        }
                                                                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                                                            // Check if complaint has been reported to [Eyewitness Community, Human Right Community, Neighborhood Community, News Media Community, Law Enforcement Community]
                                                                        val reportedTo = document.getString("reportedTo").toString()
                                                                        val subtype = document.getString("subType").toString()
                                                                        val stitle = document.getString("title").toString()
                                                                        val sdesc = document.getString("description").toString()
                                                                        if (!reportedTo.isEmpty() && reportedTo.equals("Eyewitness Community", true) ){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Eyewitness Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Eyewitness Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Legal Practitioners Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Legal Practitioners Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Legal Practitioners Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Human Rights Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Human Rights Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Human Rights Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("News Media Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by News Media Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by News Media Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Law Enforcement Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Law Enforcement Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Law Enforcement Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                            }

                                                                        }

                                                                                                                                AndroidNetworking.get(mGenerateURL).setPriority(Priority.MEDIUM).build()
                                                                                                                                        .getAsJSONObject(object: JSONObjectRequestListener {
                                                                                                                                                override fun onResponse(response: JSONObject) {
                                                                                                                                                        try {

                                                                                                                                                                // Retrieve the Generated JSONObject & JSONArray
                                                                                                                                                                val mWeather = response.getJSONArray("weather").getJSONObject(0)
                                                                                                                                                                val mWind = response.getJSONObject("wind")
                                                                                                                                                                val mMain = response.getJSONObject("main")
                                                                                                                                                                val mSys = response.getJSONObject("sys")
                                                                                                                                                                val mSky = response.getJSONObject("clouds")

                                                                                                                                                                val mDesc = mWeather.getString("description")
                                                                                                                                                                val mTemp = mMain.getString("temp") + "°C"
                                                                                                                                                                val mPressure = mMain.getString("pressure") + "hPs"
                                                                                                                                                                val mHumidity = mMain.getString("humidity") + " %"
                                                                                                                                                                val mWindSpeed = mWind.getString("speed") + " m/s"
                                                                                                                                                                val mWindAngle = mWind.getString("deg") + " deg"
                                                                                                                                                                val mFeelsLike = mMain.getString("feels_like") + "°C"
                                                                                                                                                                val mTempMin = mMain.getString("temp_min") + "°C"
                                                                                                                                                                val mTempMax = mMain.getString("temp_max") + "°C"
                                                                                                                                                                val mSunrise = mSys.getString("sunrise")
                                                                                                                                                                val mSunset = mSys.getString("sunset")
                                                                                                                                                                val mCloud = mSky.getString("all") + " %"



                                                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                                                modify.update("weatherDesc", mDesc)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener {
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                                        }

                                                                                                                                                                modify.update("weatherTemp", mTemp)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherPressure", mPressure)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherHumidity", mHumidity)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherWindSpeed", mWindSpeed)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                modify.update("weatherWindAngle", mWindAngle)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherFeelsLike", mFeelsLike)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMin", mTempMin)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMax", mTempMax)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunrise", mSunrise)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunset", mSunset)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherClouds", mCloud)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}




                                                                                                                                                                //Toast.makeText(mContext, mTemp, Toast.LENGTH_LONG).show()

                                                                                                                                                        } catch (e: Exception) {
                                                                                                                                                                Toast.makeText(mContext, e.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        }
                                                                                                                                                }

                                                                                                                                                override fun onError(anError: ANError?) {
                                                                                                                                                        Toast.makeText(mContext, anError.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        // Get user status from an input string extra
                                                                                                                                                        val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                        // Create an array and pass user credentials via intent put extra
                                                                                                                                                        val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                        // Start activity to describe incident
                                                                                                                                                        startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                }
                                                                                                                                        })


                                                                                                                                // Obtain the SupportMapFragment and get notified when the map is ready to be used.
                                                                                                                                val mapFragment = supportFragmentManager
                                                                                                                                        .findFragmentById(R.id.map) as SupportMapFragment
                                                                                                                                mapFragment.getMapAsync(this@MapActivity)

                                                                                                                        }
                                                                                                                }
                                                                                                                .addOnFailureListener { exception ->
                                                                                                                        //Log.d(TAG, "Error getting documents: ", exception)
                                                                                                                }
                                                                                                }
                                                                                        }.addOnFailureListener { err ->
                                                                                                Toast.makeText(this@MapActivity, err.toString(), Toast.LENGTH_LONG).show()
                                                                                        }

                                                                                }
                                                                        }).addOnFailureListener(object : OnFailureListener {
                                                                                override fun onFailure(@NonNull e: Exception) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                }
                                                                        }).addOnProgressListener(object : OnProgressListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onProgress(taskSnapshot: UploadTask.TaskSnapshot) {
                                                                                        val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                                                        progress.setMessage("Uploaded " + progres_time.toInt() + " %")

                                                                                }
                                                                        })

                                                                } else {
                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                        Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                .show()
                                                                }

                                                        } else {
                                                                val parentLayout: View = findViewById(android.R.id.content)
                                                                Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                        .show()
                                                        }


                                                }

                                        }
                                        .addOnFailureListener { e ->


                                        }

                        } else if (userStatus.equals("agency", true)) {
                                db.collection("agency")
                                        .whereEqualTo("uid", currentUserId)
                                        .get()
                                        .addOnSuccessListener { result ->
                                                for (document in result) {
                                                        val documentID = document.getString("documentID")
                                                        val storageCap: Long? = document.getString("storageCap")?.toLong()
                                                        val storageUsed: Long? = document.getString("storageUsed")?.toLong()
                                                        val sCapSize: Long? = storageCap
                                                        val sUsedSize: Long? = storageUsed
                                                        if (mMBSize < sCapSize!!) {
                                                                if (sUsedSize!! < sCapSize) {
                                                                        val progress = ProgressDialog(this)
                                                                        progress.setTitle("Uploading....")
                                                                        progress.show()
                                                                        mRefVideo.putFile(filePath).addOnSuccessListener(object : OnSuccessListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onSuccess(p0: UploadTask.TaskSnapshot?) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Uploaded successfully", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                        // Modify Used Storage
                                                                                        val modify = db.collection("agency").document(documentID.toString())
                                                                                        val mTotalStorageUsed = mMBSize + sUsedSize
                                                                                        val mUpdatedStorageUsed = mTotalStorageUsed.toString()
                                                                                        modify.update("storageUsed", mUpdatedStorageUsed)
                                                                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                        mRefVideo.downloadUrl.addOnSuccessListener { evidURL ->
                                                                                                if (evidURL != null) {
                                                                                                        // Update the collection and add evidenceURL
                                                                                                        val type = mIncident.getIncidentType().toString().toLowerCase()
                                                                                                        // init for metadata
                                                                                                        val latmeta = mIncident.getIncidentLatitude()
                                                                                                        val lonmeta = mIncident.getIncidentLongitude()
                                                                                                        val addsmeta = mIncident.getIncidentAddress().toString()
                                                                                                        val datemeta = mIncident.getIncidentDate().toString()
                                                                                                        val mimetype = mIncident.getIncidentMimeType().toString()
                                                                                                        val typemeta = mIncident.getIncidentType().toString() +" Incident Report"
                                                                                                        val evidmeta = evidURL.toString()

                                                                                                        /* Obtain the public key material to initiate the encryption of metadata.
                                                                                                        val publicKeysetHandle = privateKeysetHandle.publicKeysetHandle
                                                                                                        // Get the primitive. For Encryption
                                                                                                        val hybridEncrypt: HybridEncrypt = publicKeysetHandle.getPrimitive(HybridEncrypt::class.java)
                                                                                                        // Use the primitive and encrypt the metatdata
                                                                                                        val encryptedlat = hybridEncrypt.encrypt(latmeta.toString().toByteArray(), latmeta.toString().toByteArray())
                                                                                                        val encryptedlon = hybridEncrypt.encrypt(lonmeta.toString().toByteArray(), lonmeta.toString().toByteArray())
                                                                                                        val encryptedadds = hybridEncrypt.encrypt(addsmeta.toByteArray(), addsmeta.toByteArray())
                                                                                                        val encrypteddate = hybridEncrypt.encrypt(datemeta.toByteArray(), datemeta.toByteArray())
                                                                                                        val encryptedmime = hybridEncrypt.encrypt(mimetype.toByteArray(), mimetype.toByteArray())
                                                                                                        val encryptedtype = hybridEncrypt.encrypt(typemeta.toByteArray(), typemeta.toByteArray())
                                                                                                        val encryptedevid = hybridEncrypt.encrypt(evidmeta.toByteArray(), evidmeta.toByteArray())

                                                                                                        // Creating and applying the encryptted metadata to the evidence file
                                                                                                        val mStorageMeta = StorageMetadata.Builder().setCustomMetadata("coordinates", encryptedlat.toString()+", "+encryptedlon.toString())
                                                                                                        .setCustomMetadata("address", encryptedadds.toString()).setCustomMetadata("date", encrypteddate.toString()).setCustomMetadata("incident", encryptedtype.toString())
                                                                                                                .setCustomMetadata("mimetype", encryptedmime.toString()).setCustomMetadata("evidence", encryptedevid.toString())
                                                                                                                .build()

                                                                                                        // Update the evidence file with the above metadata
                                                                                                        mRefVideo.updateMetadata(mStorageMeta).addOnSuccessListener { updatedMetadata ->
                                                                                                                // Evidence file has been updated with metadata
                                                                                                                //Toast.makeText(mContext, updatedMetadata.toString(), Toast.LENGTH_LONG).show()
                                                                                                        }.addOnFailureListener {
                                                                                                                // Uh-oh, an error occurred!
                                                                                                        }
                                                                                                        */

                                                                                                        // Start an asynchronous task for the weather api
                                                                                                        var mGenerateURL = "https://api.openweathermap.org/data/2.5/weather?lat="+latmeta+"&lon="+lonmeta+"&appid="+getString(R.string.weather_api_key)+"&units=metric"
                                                                                                        //mGenerateURL = mGenerateURL.replace(" ".toRegex(), "%20")

                                                                                                        db.collection(type)
                                                                                                                .whereEqualTo("evidenceURL", mIncident.getIncidentEvidenceURL().toString())
                                                                                                                .get()
                                                                                                                .addOnSuccessListener { result ->
                                                                                                                        for (document in result) {
                                                                                                                                //Log.d(TAG, "${document.id} => ${document.data}")
                                                                                                                                val documentID = document.getString("documentID")
                                                                                                                                val mEvidURL = evidURL.toString() + "-video"
                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                modify.update("evidenceURL", mEvidURL)
                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                // Init metadata for the following file incident

                                                                                                                                                // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                                                                        }
                                                                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                                                           // Check if complaint has been reported to [Eyewitness Community, Human Right Community, Neighborhood Community, News Media Community, Law Enforcement Community]
                                                                        val reportedTo = document.getString("reportedTo").toString()
                                                                        val subtype = document.getString("subType").toString()
                                                                        val stitle = document.getString("title").toString()
                                                                        val sdesc = document.getString("description").toString()
                                                                        if (!reportedTo.isEmpty() && reportedTo.equals("Eyewitness Community", true) ){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Eyewitness Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Eyewitness Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Legal Practitioners Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Legal Practitioners Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Legal Practitioners Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Human Rights Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Human Rights Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Human Rights Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("News Media Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by News Media Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by News Media Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Law Enforcement Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Law Enforcement Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Law Enforcement Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                            }

                                                                        }

                                                                                                                                AndroidNetworking.get(mGenerateURL).setPriority(Priority.MEDIUM).build()
                                                                                                                                        .getAsJSONObject(object: JSONObjectRequestListener {
                                                                                                                                                override fun onResponse(response: JSONObject) {
                                                                                                                                                        try {

                                                                                                                                                                // Retrieve the Generated JSONObject & JSONArray
                                                                                                                                                                val mWeather = response.getJSONArray("weather").getJSONObject(0)
                                                                                                                                                                val mWind = response.getJSONObject("wind")
                                                                                                                                                                val mMain = response.getJSONObject("main")
                                                                                                                                                                val mSys = response.getJSONObject("sys")
                                                                                                                                                                val mSky = response.getJSONObject("clouds")

                                                                                                                                                                val mDesc = mWeather.getString("description")
                                                                                                                                                                val mTemp = mMain.getString("temp") + "°C"
                                                                                                                                                                val mPressure = mMain.getString("pressure") + "hPs"
                                                                                                                                                                val mHumidity = mMain.getString("humidity") + " %"
                                                                                                                                                                val mWindSpeed = mWind.getString("speed") + " m/s"
                                                                                                                                                                val mWindAngle = mWind.getString("deg") + " deg"
                                                                                                                                                                val mFeelsLike = mMain.getString("feels_like") + "°C"
                                                                                                                                                                val mTempMin = mMain.getString("temp_min") + "°C"
                                                                                                                                                                val mTempMax = mMain.getString("temp_max") + "°C"
                                                                                                                                                                val mSunrise = mSys.getString("sunrise")
                                                                                                                                                                val mSunset = mSys.getString("sunset")
                                                                                                                                                                val mCloud = mSky.getString("all") + " %"



                                                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                                                modify.update("weatherDesc", mDesc)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener {
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                                        }

                                                                                                                                                                modify.update("weatherTemp", mTemp)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherPressure", mPressure)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherHumidity", mHumidity)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherWindSpeed", mWindSpeed)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                modify.update("weatherWindAngle", mWindAngle)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherFeelsLike", mFeelsLike)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMin", mTempMin)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMax", mTempMax)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunrise", mSunrise)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunset", mSunset)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherClouds", mCloud)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}




                                                                                                                                                                //Toast.makeText(mContext, mTemp, Toast.LENGTH_LONG).show()

                                                                                                                                                        } catch (e: Exception) {
                                                                                                                                                                Toast.makeText(mContext, e.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        }
                                                                                                                                                }

                                                                                                                                                override fun onError(anError: ANError?) {
                                                                                                                                                        Toast.makeText(mContext, anError.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        // Get user status from an input string extra
                                                                                                                                                        val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                        // Create an array and pass user credentials via intent put extra
                                                                                                                                                        val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                        // Start activity to describe incident
                                                                                                                                                        startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                }
                                                                                                                                        })


                                                                                                                                // Obtain the SupportMapFragment and get notified when the map is ready to be used.
                                                                                                                                val mapFragment = supportFragmentManager
                                                                                                                                        .findFragmentById(R.id.map) as SupportMapFragment
                                                                                                                                mapFragment.getMapAsync(this@MapActivity)

                                                                                                                        }
                                                                                                                }
                                                                                                                .addOnFailureListener { exception ->
                                                                                                                        //Log.d(TAG, "Error getting documents: ", exception)
                                                                                                                }
                                                                                                }
                                                                                        }.addOnFailureListener { err ->
                                                                                                Toast.makeText(this@MapActivity, err.toString(), Toast.LENGTH_LONG).show()
                                                                                        }

                                                                                }
                                                                        }).addOnFailureListener(object : OnFailureListener {
                                                                                override fun onFailure(@NonNull e: Exception) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                }
                                                                        }).addOnProgressListener(object : OnProgressListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onProgress(taskSnapshot: UploadTask.TaskSnapshot) {
                                                                                        val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                                                        progress.setMessage("Uploaded " + progres_time.toInt() + " %")

                                                                                }
                                                                        })

                                                                } else {
                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                        Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                .show()
                                                                }

                                                        } else {
                                                                val parentLayout: View = findViewById(android.R.id.content)
                                                                Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                        .show()
                                                        }


                                                }

                                        }
                                        .addOnFailureListener { e ->


                                        }
                        }

                }
        }


        private fun uploadAudio() {
                if (filePath != null) {
                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(Date())
                        mRefAudio = mStorageRef.child("eyewitness/evidence/audio/" + UUID.randomUUID().toString())
                        val mPath: AssetFileDescriptor = applicationContext.contentResolver.openAssetFileDescriptor(filePath, "r")!!
                        // Get length of file in Bytes
                        val mByteSize: Long = mPath.length
                        // Convert the bytes to Kilobytes
                        val mKBSize: Long = mByteSize / 1024
                        // Convert the kilobytes to Megabytes
                        val mMBSize: Long = mKBSize / 1024
                        // Convert the megabytes to Gigabytes
                        val mGBSize: Long = mMBSize / 1024

                        val currentUserId = auth.currentUser?.uid.toString()
                        val userStatus = intent.getStringExtra("Tag")
                        if (userStatus.equals("user", true)) {
                                db.collection("users")
                                        .whereEqualTo("uid", currentUserId)
                                        .get()
                                        .addOnSuccessListener { result ->
                                                for (document in result) {
                                                        val documentID = document.getString("documentID")
                                                        val storageCap: Long? = document.getString("storageCap")?.toLong()
                                                        val storageUsed: Long? = document.getString("storageUsed")?.toLong()
                                                        val sCapSize: Long? = storageCap
                                                        val sUsedSize: Long? = storageUsed
                                                        if (mMBSize < sCapSize!!) {
                                                                if (sUsedSize!! < sCapSize) {
                                                                        val progress = ProgressDialog(this)
                                                                        progress.setTitle("Uploading....")
                                                                        progress.show()

                                                                        mRefAudio.putFile(filePath).addOnSuccessListener(object : OnSuccessListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onSuccess(p0: UploadTask.TaskSnapshot?) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Uploaded successfully", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                        // Modigy Used Storage
                                                                                        val modify = db.collection("users").document(documentID.toString())
                                                                                        val mTotalStorageUsed = mMBSize + sUsedSize
                                                                                        val mUpdatedStorageUsed = mTotalStorageUsed.toString()
                                                                                        modify.update("storageUsed", mUpdatedStorageUsed)
                                                                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                        mRefAudio.downloadUrl.addOnSuccessListener { evidURL ->
                                                                                                if (evidURL != null) {
                                                                                                        // Update the collection and add evidenceURL
                                                                                                        val type = mIncident.getIncidentType().toString().toLowerCase()
                                                                                                        // init for metadata
                                                                                                        val latmeta = mIncident.getIncidentLatitude()
                                                                                                        val lonmeta = mIncident.getIncidentLongitude()
                                                                                                        val addsmeta = mIncident.getIncidentAddress().toString()
                                                                                                        val datemeta = mIncident.getIncidentDate().toString()
                                                                                                        val mimetype = mIncident.getIncidentMimeType().toString()
                                                                                                        val typemeta = mIncident.getIncidentType().toString() +" Incident Report"
                                                                                                        val evidmeta = evidURL.toString()

                                                                                                        /* Obtain the public key material to initiate the encryption of metadata.
                                                                                                        val publicKeysetHandle = privateKeysetHandle.publicKeysetHandle
                                                                                                        // Get the primitive. For Encryption
                                                                                                        val hybridEncrypt: HybridEncrypt = publicKeysetHandle.getPrimitive(HybridEncrypt::class.java)
                                                                                                        // Use the primitive and encrypt the metatdata
                                                                                                        val encryptedlat = hybridEncrypt.encrypt(latmeta.toString().toByteArray(), latmeta.toString().toByteArray())
                                                                                                        val encryptedlon = hybridEncrypt.encrypt(lonmeta.toString().toByteArray(), lonmeta.toString().toByteArray())
                                                                                                        val encryptedadds = hybridEncrypt.encrypt(addsmeta.toByteArray(), addsmeta.toByteArray())
                                                                                                        val encrypteddate = hybridEncrypt.encrypt(datemeta.toByteArray(), datemeta.toByteArray())
                                                                                                        val encryptedmime = hybridEncrypt.encrypt(mimetype.toByteArray(), mimetype.toByteArray())
                                                                                                        val encryptedtype = hybridEncrypt.encrypt(typemeta.toByteArray(), typemeta.toByteArray())
                                                                                                        val encryptedevid = hybridEncrypt.encrypt(evidmeta.toByteArray(), evidmeta.toByteArray())

                                                                                                        // Creating and applying the encryptted metadata to the evidence file
                                                                                                        val mStorageMeta = StorageMetadata.Builder().setCustomMetadata("coordinates", encryptedlat.toString()+", "+encryptedlon.toString())
                                                                                                        .setCustomMetadata("address", encryptedadds.toString()).setCustomMetadata("date", encrypteddate.toString()).setCustomMetadata("incident", encryptedtype.toString())
                                                                                                                .setCustomMetadata("mimetype", encryptedmime.toString()).setCustomMetadata("evidence", encryptedevid.toString())
                                                                                                                .build()

                                                                                                        // Update the evidence file with the above metadata
                                                                                                        mRefAudio.updateMetadata(mStorageMeta).addOnSuccessListener { updatedMetadata ->
                                                                                                                // Evidence file has been updated with metadata
                                                                                                                //Toast.makeText(mContext, updatedMetadata.toString(), Toast.LENGTH_LONG).show()
                                                                                                        }.addOnFailureListener {
                                                                                                                // Uh-oh, an error occurred!
                                                                                                        }

                                                                                                         */

                                                                                                        // Start an asynchronous task for the weather api
                                                                                                        var mGenerateURL = "https://api.openweathermap.org/data/2.5/weather?lat="+latmeta+"&lon="+lonmeta+"&appid="+getString(R.string.weather_api_key)+"&units=metric"
                                                                                                        //mGenerateURL = mGenerateURL.replace(" ".toRegex(), "%20")

                                                                                                        db.collection(type)
                                                                                                                .whereEqualTo("evidenceURL", mIncident.getIncidentEvidenceURL().toString())
                                                                                                                .get()
                                                                                                                .addOnSuccessListener { result ->
                                                                                                                        for (document in result) {
                                                                                                                                //Log.d(TAG, "${document.id} => ${document.data}")
                                                                                                                                val documentID = document.getString("documentID")
                                                                                                                                val mEvidURL = evidURL.toString() + "-audio"
                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                modify.update("evidenceURL", mEvidURL)
                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                // Init metadata for the following file incident

                                                                                                                                                // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                                                                        }
                                                                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                                                            // Check if complaint has been reported to [Eyewitness Community, Human Right Community, Neighborhood Community, News Media Community, Law Enforcement Community]
                                                                        val reportedTo = document.getString("reportedTo").toString()
                                                                        val subtype = document.getString("subType").toString()
                                                                        val stitle = document.getString("title").toString()
                                                                        val sdesc = document.getString("description").toString()
                                                                        if (!reportedTo.isEmpty() && reportedTo.equals("Eyewitness Community", true) ){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Eyewitness Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Eyewitness Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Legal Practitioners Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Legal Practitioners Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Legal Practitioners Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Human Rights Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Human Rights Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Human Rights Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("News Media Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by News Media Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by News Media Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Law Enforcement Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Law Enforcement Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Law Enforcement Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                            }

                                                                        }

                                                                                                                                AndroidNetworking.get(mGenerateURL).setPriority(Priority.MEDIUM).build()
                                                                                                                                        .getAsJSONObject(object: JSONObjectRequestListener {
                                                                                                                                                override fun onResponse(response: JSONObject) {
                                                                                                                                                        try {

                                                                                                                                                                // Retrieve the Generated JSONObject & JSONArray
                                                                                                                                                                val mWeather = response.getJSONArray("weather").getJSONObject(0)
                                                                                                                                                                val mWind = response.getJSONObject("wind")
                                                                                                                                                                val mMain = response.getJSONObject("main")
                                                                                                                                                                val mSys = response.getJSONObject("sys")
                                                                                                                                                                val mSky = response.getJSONObject("clouds")

                                                                                                                                                                val mDesc = mWeather.getString("description")
                                                                                                                                                                val mTemp = mMain.getString("temp") + "°C"
                                                                                                                                                                val mPressure = mMain.getString("pressure") + "hPs"
                                                                                                                                                                val mHumidity = mMain.getString("humidity") + " %"
                                                                                                                                                                val mWindSpeed = mWind.getString("speed") + " m/s"
                                                                                                                                                                val mWindAngle = mWind.getString("deg") + " deg"
                                                                                                                                                                val mFeelsLike = mMain.getString("feels_like") + "°C"
                                                                                                                                                                val mTempMin = mMain.getString("temp_min") + "°C"
                                                                                                                                                                val mTempMax = mMain.getString("temp_max") + "°C"
                                                                                                                                                                val mSunrise = mSys.getString("sunrise")
                                                                                                                                                                val mSunset = mSys.getString("sunset")
                                                                                                                                                                val mCloud = mSky.getString("all") + " %"


                                                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                                                modify.update("weatherDesc", mDesc)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener {
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                                        }

                                                                                                                                                                modify.update("weatherTemp", mTemp)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherPressure", mPressure)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherHumidity", mHumidity)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherWindSpeed", mWindSpeed)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                modify.update("weatherWindAngle", mWindAngle)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherFeelsLike", mFeelsLike)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMin", mTempMin)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMax", mTempMax)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunrise", mSunrise)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunset", mSunset)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherClouds", mCloud)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                //Toast.makeText(mContext, mTemp, Toast.LENGTH_LONG).show()

                                                                                                                                                        } catch (e: Exception) {
                                                                                                                                                                Toast.makeText(mContext, e.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        }
                                                                                                                                                }

                                                                                                                                                override fun onError(anError: ANError?) {
                                                                                                                                                        Toast.makeText(mContext, anError.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        // Get user status from an input string extra
                                                                                                                                                        val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                        // Create an array and pass user credentials via intent put extra
                                                                                                                                                        val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                        // Start activity to describe incident
                                                                                                                                                        startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                }
                                                                                                                                        })

                                                                                                                                // Obtain the SupportMapFragment and get notified when the map is ready to be used.
                                                                                                                                val mapFragment = supportFragmentManager
                                                                                                                                        .findFragmentById(R.id.map) as SupportMapFragment
                                                                                                                                mapFragment.getMapAsync(this@MapActivity)

                                                                                                                        }
                                                                                                                }
                                                                                                                .addOnFailureListener { exception ->
                                                                                                                        //Log.d(TAG, "Error getting documents: ", exception)
                                                                                                                }
                                                                                                }
                                                                                        }.addOnFailureListener { err ->
                                                                                                Toast.makeText(this@MapActivity, err.toString(), Toast.LENGTH_LONG).show()
                                                                                        }


                                                                                }
                                                                        }).addOnFailureListener(object : OnFailureListener {
                                                                                override fun onFailure(@NonNull e: Exception) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                }
                                                                        }).addOnProgressListener(object : OnProgressListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onProgress(taskSnapshot: UploadTask.TaskSnapshot) {
                                                                                        val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                                                        progress.setMessage("Uploaded " + progres_time.toInt() + " %")

                                                                                }
                                                                        })

                                                                } else {
                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                        Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                .show()
                                                                }

                                                        } else {
                                                                val parentLayout: View = findViewById(android.R.id.content)
                                                                Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                        .show()
                                                        }


                                                }

                                        }
                                        .addOnFailureListener { e ->


                                        }

                        } else if (userStatus.equals("agency", true)) {
                                db.collection("agency")
                                        .whereEqualTo("uid", currentUserId)
                                        .get()
                                        .addOnSuccessListener { result ->
                                                for (document in result) {
                                                        val documentID = document.getString("documentID")
                                                        val storageCap: Long? = document.getString("storageCap")?.toLong()
                                                        val storageUsed: Long? = document.getString("storageUsed")?.toLong()
                                                        val sCapSize: Long? = storageCap
                                                        val sUsedSize: Long? = storageUsed
                                                        if (mMBSize < sCapSize!!) {
                                                                if (sUsedSize!! < sCapSize) {
                                                                        val progress = ProgressDialog(this)
                                                                        progress.setTitle("Uploading....")
                                                                        progress.show()

                                                                        mRefAudio.putFile(filePath).addOnSuccessListener(object : OnSuccessListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onSuccess(p0: UploadTask.TaskSnapshot?) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Uploaded successfully", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                        // Modigy Used Storage
                                                                                        val modify = db.collection("agency").document(documentID.toString())
                                                                                        val mTotalStorageUsed = mMBSize + sUsedSize
                                                                                        val mUpdatedStorageUsed = mTotalStorageUsed.toString()
                                                                                        modify.update("storageUsed", mUpdatedStorageUsed)
                                                                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                        mRefAudio.downloadUrl.addOnSuccessListener { evidURL ->
                                                                                                if (evidURL != null) {
                                                                                                        // Update the collection and add evidenceURL
                                                                                                        val type = mIncident.getIncidentType().toString().toLowerCase()
                                                                                                        // init for metadata
                                                                                                        val latmeta = mIncident.getIncidentLatitude()
                                                                                                        val lonmeta = mIncident.getIncidentLongitude()
                                                                                                        val addsmeta = mIncident.getIncidentAddress().toString()
                                                                                                        val datemeta = mIncident.getIncidentDate().toString()
                                                                                                        val mimetype = mIncident.getIncidentMimeType().toString()
                                                                                                        val typemeta = mIncident.getIncidentType().toString() +" Incident Report"
                                                                                                        val evidmeta = evidURL.toString()

                                                                                                        /* Obtain the public key material to initiate the encryption of metadata.
                                                                                                        val publicKeysetHandle = privateKeysetHandle.publicKeysetHandle
                                                                                                        // Get the primitive. For Encryption
                                                                                                        val hybridEncrypt: HybridEncrypt = publicKeysetHandle.getPrimitive(HybridEncrypt::class.java)
                                                                                                        // Use the primitive and encrypt the metatdata
                                                                                                        val encryptedlat = hybridEncrypt.encrypt(latmeta.toString().toByteArray(), latmeta.toString().toByteArray())
                                                                                                        val encryptedlon = hybridEncrypt.encrypt(lonmeta.toString().toByteArray(), lonmeta.toString().toByteArray())
                                                                                                        val encryptedadds = hybridEncrypt.encrypt(addsmeta.toByteArray(), addsmeta.toByteArray())
                                                                                                        val encrypteddate = hybridEncrypt.encrypt(datemeta.toByteArray(), datemeta.toByteArray())
                                                                                                        val encryptedmime = hybridEncrypt.encrypt(mimetype.toByteArray(), mimetype.toByteArray())
                                                                                                        val encryptedtype = hybridEncrypt.encrypt(typemeta.toByteArray(), typemeta.toByteArray())
                                                                                                        val encryptedevid = hybridEncrypt.encrypt(evidmeta.toByteArray(), evidmeta.toByteArray())

                                                                                                        // Creating and applying the encryptted metadata to the evidence file
                                                                                                        val mStorageMeta = StorageMetadata.Builder().setCustomMetadata("coordinates", encryptedlat.toString()+", "+encryptedlon.toString())
                                                                                                        .setCustomMetadata("address", encryptedadds.toString()).setCustomMetadata("date", encrypteddate.toString()).setCustomMetadata("incident", encryptedtype.toString())
                                                                                                                .setCustomMetadata("mimetype", encryptedmime.toString()).setCustomMetadata("evidence", encryptedevid.toString())
                                                                                                                .build()

                                                                                                        // Update the evidence file with the above metadata
                                                                                                        mRefAudio.updateMetadata(mStorageMeta).addOnSuccessListener { updatedMetadata ->
                                                                                                                // Evidence file has been updated with metadata
                                                                                                                //Toast.makeText(mContext, updatedMetadata.toString(), Toast.LENGTH_LONG).show()
                                                                                                        }.addOnFailureListener {
                                                                                                                // Uh-oh, an error occurred!
                                                                                                        }

                                                                                                         */

                                                                                                        // Start an asynchronous task for the weather api
                                                                                                        var mGenerateURL = "https://api.openweathermap.org/data/2.5/weather?lat="+latmeta+"&lon="+lonmeta+"&appid="+getString(R.string.weather_api_key)+"&units=metric"
                                                                                                        //mGenerateURL = mGenerateURL.replace(" ".toRegex(), "%20")

                                                                                                        db.collection(type)
                                                                                                                .whereEqualTo("evidenceURL", mIncident.getIncidentEvidenceURL().toString())
                                                                                                                .get()
                                                                                                                .addOnSuccessListener { result ->
                                                                                                                        for (document in result) {
                                                                                                                                //Log.d(TAG, "${document.id} => ${document.data}")
                                                                                                                                val documentID = document.getString("documentID")
                                                                                                                                val mEvidURL = evidURL.toString() + "-audio"
                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                modify.update("evidenceURL", mEvidURL)
                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                // Init metadata for the following file incident

                                                                                                                                                // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                                                                        }
                                                                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                                                           // Check if complaint has been reported to [Eyewitness Community, Human Right Community, Neighborhood Community, News Media Community, Law Enforcement Community]
                                                                        val reportedTo = document.getString("reportedTo").toString()
                                                                        val subtype = document.getString("subType").toString()
                                                                        val stitle = document.getString("title").toString()
                                                                        val sdesc = document.getString("description").toString()
                                                                        if (!reportedTo.isEmpty() && reportedTo.equals("Eyewitness Community", true) ){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Eyewitness Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Eyewitness Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Legal Practitioners Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Legal Practitioners Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Legal Practitioners Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Human Rights Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Human Rights Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Human Rights Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("News Media Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by News Media Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by News Media Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Law Enforcement Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Law Enforcement Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Law Enforcement Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                            }

                                                                        }

                                                                                                                                AndroidNetworking.get(mGenerateURL).setPriority(Priority.MEDIUM).build()
                                                                                                                                        .getAsJSONObject(object: JSONObjectRequestListener {
                                                                                                                                                override fun onResponse(response: JSONObject) {
                                                                                                                                                        try {

                                                                                                                                                                // Retrieve the Generated JSONObject & JSONArray
                                                                                                                                                                val mWeather = response.getJSONArray("weather").getJSONObject(0)
                                                                                                                                                                val mWind = response.getJSONObject("wind")
                                                                                                                                                                val mMain = response.getJSONObject("main")
                                                                                                                                                                val mSys = response.getJSONObject("sys")
                                                                                                                                                                val mSky = response.getJSONObject("clouds")

                                                                                                                                                                val mDesc = mWeather.getString("description")
                                                                                                                                                                val mTemp = mMain.getString("temp") + "°C"
                                                                                                                                                                val mPressure = mMain.getString("pressure") + "hPs"
                                                                                                                                                                val mHumidity = mMain.getString("humidity") + " %"
                                                                                                                                                                val mWindSpeed = mWind.getString("speed") + " m/s"
                                                                                                                                                                val mWindAngle = mWind.getString("deg") + " deg"
                                                                                                                                                                val mFeelsLike = mMain.getString("feels_like") + "°C"
                                                                                                                                                                val mTempMin = mMain.getString("temp_min") + "°C"
                                                                                                                                                                val mTempMax = mMain.getString("temp_max") + "°C"
                                                                                                                                                                val mSunrise = mSys.getString("sunrise")
                                                                                                                                                                val mSunset = mSys.getString("sunset")
                                                                                                                                                                val mCloud = mSky.getString("all") + " %"


                                                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                                                modify.update("weatherDesc", mDesc)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener {
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                                        }

                                                                                                                                                                modify.update("weatherTemp", mTemp)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherPressure", mPressure)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherHumidity", mHumidity)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherWindSpeed", mWindSpeed)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                modify.update("weatherWindAngle", mWindAngle)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherFeelsLike", mFeelsLike)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMin", mTempMin)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMax", mTempMax)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunrise", mSunrise)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunset", mSunset)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherClouds", mCloud)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                //Toast.makeText(mContext, mTemp, Toast.LENGTH_LONG).show()

                                                                                                                                                        } catch (e: Exception) {
                                                                                                                                                                Toast.makeText(mContext, e.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        }
                                                                                                                                                }

                                                                                                                                                override fun onError(anError: ANError?) {
                                                                                                                                                        Toast.makeText(mContext, anError.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        // Get user status from an input string extra
                                                                                                                                                        val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                        // Create an array and pass user credentials via intent put extra
                                                                                                                                                        val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                        // Start activity to describe incident
                                                                                                                                                        startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                }
                                                                                                                                        })

                                                                                                                                // Obtain the SupportMapFragment and get notified when the map is ready to be used.
                                                                                                                                val mapFragment = supportFragmentManager
                                                                                                                                        .findFragmentById(R.id.map) as SupportMapFragment
                                                                                                                                mapFragment.getMapAsync(this@MapActivity)

                                                                                                                        }
                                                                                                                }
                                                                                                                .addOnFailureListener { exception ->
                                                                                                                        //Log.d(TAG, "Error getting documents: ", exception)
                                                                                                                }
                                                                                                }
                                                                                        }.addOnFailureListener { err ->
                                                                                                Toast.makeText(this@MapActivity, err.toString(), Toast.LENGTH_LONG).show()
                                                                                        }


                                                                                }
                                                                        }).addOnFailureListener(object : OnFailureListener {
                                                                                override fun onFailure(@NonNull e: Exception) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                }
                                                                        }).addOnProgressListener(object : OnProgressListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onProgress(taskSnapshot: UploadTask.TaskSnapshot) {
                                                                                        val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                                                        progress.setMessage("Uploaded " + progres_time.toInt() + " %")

                                                                                }
                                                                        })

                                                                } else {
                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                        Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                .show()
                                                                }

                                                        } else {
                                                                val parentLayout: View = findViewById(android.R.id.content)
                                                                Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                        .show()
                                                        }


                                                }

                                        }
                                        .addOnFailureListener { e ->


                                        }
                        }


                }
        }


        private fun uploadPhoto() {
                if (filePath != null) {
                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(Date())
                        mRefPhoto = mStorageRef.child("eyewitness/evidence/image/" + UUID.randomUUID().toString())
                        val mPath: AssetFileDescriptor = applicationContext.contentResolver.openAssetFileDescriptor(filePath, "r")!!
                        // Get length of file in Bytes
                        val mByteSize: Long = mPath.length
                        // Convert the bytes to Kilobytes
                        val mKBSize: Long = mByteSize / 1024
                        // Convert the kilobytes to Megabytes
                        val mMBSize: Long = mKBSize / 1024
                        // Convert the megabytes to Gigabytes
                        val mGBSize: Long = mMBSize / 1024

                        val currentUserId = auth.currentUser?.uid.toString()
                        val userStatus = intent.getStringExtra("Tag")
                        if (userStatus.equals("user", true)) {
                                db.collection("users")
                                        .whereEqualTo("uid", currentUserId)
                                        .get()
                                        .addOnSuccessListener { result ->
                                                for (document in result) {
                                                        val documentID = document.getString("documentID")
                                                        val storageCap: Long? = document.getString("storageCap")?.toLong()
                                                        val storageUsed: Long? = document.getString("storageUsed")?.toLong()
                                                        val sCapSize: Long? = storageCap
                                                        val sUsedSize: Long? = storageUsed
                                                        if (mMBSize < sCapSize!!) {
                                                                if (sUsedSize!! < sCapSize) {
                                                                        val progress = ProgressDialog(this)
                                                                        progress.setTitle("Uploading....")
                                                                        progress.show()

                                                                        mRefPhoto.putFile(filePath).addOnSuccessListener(object : OnSuccessListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onSuccess(p0: UploadTask.TaskSnapshot?) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Uploaded successfully", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                        // Modigy Used Storage
                                                                                        val modify = db.collection("users").document(documentID.toString())
                                                                                        val mTotalStorageUsed = mMBSize + sUsedSize
                                                                                        val mUpdatedStorageUsed = mTotalStorageUsed.toString()
                                                                                        modify.update("storageUsed", mUpdatedStorageUsed)
                                                                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                                        mRefPhoto.downloadUrl.addOnSuccessListener { evidURL ->
                                                                                                if (evidURL != null) {
                                                                                                        // Update the collection and add evidenceURL
                                                                                                        val type = mIncident.getIncidentType().toString().toLowerCase()
                                                                                                        // init for metadata
                                                                                                        val latmeta = mIncident.getIncidentLatitude()
                                                                                                        val lonmeta = mIncident.getIncidentLongitude()
                                                                                                        val addsmeta = mIncident.getIncidentAddress().toString()
                                                                                                        val datemeta = mIncident.getIncidentDate().toString()
                                                                                                        val mimetype = mIncident.getIncidentMimeType().toString()
                                                                                                        val typemeta = mIncident.getIncidentType().toString() +" Incident Report"
                                                                                                        val evidmeta = evidURL.toString()

                                                                                                        /* Obtain the public key material to initiate the encryption of metadata.
                                                                                                        val publicKeysetHandle = privateKeysetHandle.publicKeysetHandle
                                                                                                        // Get the primitive. For Encryption
                                                                                                        val hybridEncrypt: HybridEncrypt = publicKeysetHandle.getPrimitive(HybridEncrypt::class.java)
                                                                                                        // Use the primitive and encrypt the metatdata
                                                                                                        val encryptedlat = hybridEncrypt.encrypt(latmeta.toString().toByteArray(), latmeta.toString().toByteArray())
                                                                                                        val encryptedlon = hybridEncrypt.encrypt(lonmeta.toString().toByteArray(), lonmeta.toString().toByteArray())
                                                                                                        val encryptedadds = hybridEncrypt.encrypt(addsmeta.toByteArray(), addsmeta.toByteArray())
                                                                                                        val encrypteddate = hybridEncrypt.encrypt(datemeta.toByteArray(), datemeta.toByteArray())
                                                                                                        val encryptedmime = hybridEncrypt.encrypt(mimetype.toByteArray(), mimetype.toByteArray())
                                                                                                        val encryptedtype = hybridEncrypt.encrypt(typemeta.toByteArray(), typemeta.toByteArray())
                                                                                                        val encryptedevid = hybridEncrypt.encrypt(evidmeta.toByteArray(), evidmeta.toByteArray())

                                                                                                        // Creating and applying the encryptted metadata to the evidence file
                                                                                                        val mStorageMeta = StorageMetadata.Builder().setCustomMetadata("coordinates", encryptedlat.toString()+", "+encryptedlon.toString())
                                                                                                                .setCustomMetadata("address", encryptedadds.toString()).setCustomMetadata("date", encrypteddate.toString()).setCustomMetadata("incident", encryptedtype.toString())
                                                                                                                .setCustomMetadata("mimetype", encryptedmime.toString()).setCustomMetadata("evidence", encryptedevid.toString())
                                                                                                                .build()

                                                                                                        // Update the evidence file with the above metadata
                                                                                                        mRefPhoto.updateMetadata(mStorageMeta).addOnSuccessListener { updatedMetadata ->
                                                                                                                // Evidence file has been updated with metadata
                                                                                                                //Toast.makeText(mContext, updatedMetadata.toString(), Toast.LENGTH_LONG).show()
                                                                                                        }.addOnFailureListener {
                                                                                                                // Uh-oh, an error occurred!
                                                                                                        }

                                                                                                         */

                                                                                                        // Start an asynchronous task for the weather api
                                                                                                        var mGenerateURL = "https://api.openweathermap.org/data/2.5/weather?lat="+latmeta+"&lon="+lonmeta+"&appid="+getString(R.string.weather_api_key)+"&units=metric"
                                                                                                        //mGenerateURL = mGenerateURL.replace(" ".toRegex(), "%20")

                                                                                                        db.collection(type)
                                                                                                                .whereEqualTo("evidenceURL", mIncident.getIncidentEvidenceURL().toString())
                                                                                                                .get()
                                                                                                                .addOnSuccessListener { result ->
                                                                                                                        for (document in result) {
                                                                                                                                //Log.d(TAG, "${document.id} => ${document.data}")
                                                                                                                                val documentID = document.getString("documentID")
                                                                                                                                val mEvidURL = evidURL.toString() + "-image"
                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                modify.update("evidenceURL", mEvidURL)
                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                // Init metadata for the following file incident

                                                                                                                                                // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                                                                        }
                                                                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                                                            // Check if complaint has been reported to [Eyewitness Community, Human Right Community, Neighborhood Community, News Media Community, Law Enforcement Community]
                                                                        val reportedTo = document.getString("reportedTo").toString()
                                                                        val subtype = document.getString("subType").toString()
                                                                        val stitle = document.getString("title").toString()
                                                                        val sdesc = document.getString("description").toString()
                                                                        if (!reportedTo.isEmpty() && reportedTo.equals("Eyewitness Community", true) ){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Eyewitness Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Eyewitness Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Legal Practitioners Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Legal Practitioners Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Legal Practitioners Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Human Rights Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Human Rights Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Human Rights Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("News Media Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by News Media Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by News Media Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Law Enforcement Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Law Enforcement Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Law Enforcement Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                            }

                                                                        }

                                                                                                                                AndroidNetworking.get(mGenerateURL).setPriority(Priority.MEDIUM).build()
                                                                                                                                        .getAsJSONObject(object: JSONObjectRequestListener {
                                                                                                                                                override fun onResponse(response: JSONObject) {
                                                                                                                                                        try {

                                                                                                                                                                // Retrieve the Generated JSONObject & JSONArray
                                                                                                                                                                val mWeather = response.getJSONArray("weather").getJSONObject(0)
                                                                                                                                                                val mWind = response.getJSONObject("wind")
                                                                                                                                                                val mMain = response.getJSONObject("main")
                                                                                                                                                                val mSys = response.getJSONObject("sys")
                                                                                                                                                                val mSky = response.getJSONObject("clouds")

                                                                                                                                                                val mDesc = mWeather.getString("description")
                                                                                                                                                                val mTemp = mMain.getString("temp") + "°C"
                                                                                                                                                                val mPressure = mMain.getString("pressure") + "hPs"
                                                                                                                                                                val mHumidity = mMain.getString("humidity") + " %"
                                                                                                                                                                val mWindSpeed = mWind.getString("speed") + " m/s"
                                                                                                                                                                val mWindAngle = mWind.getString("deg") + " deg"
                                                                                                                                                                val mFeelsLike = mMain.getString("feels_like") + "°C"
                                                                                                                                                                val mTempMin = mMain.getString("temp_min") + "°C"
                                                                                                                                                                val mTempMax = mMain.getString("temp_max") + "°C"
                                                                                                                                                                val mSunrise = mSys.getString("sunrise")
                                                                                                                                                                val mSunset = mSys.getString("sunset")
                                                                                                                                                                val mCloud = mSky.getString("all") + " %"



                                                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                                                modify.update("weatherDesc", mDesc)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))

                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener {
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                                        }

                                                                                                                                                                modify.update("weatherTemp", mTemp)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherPressure", mPressure)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherHumidity", mHumidity)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherWindSpeed", mWindSpeed)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                modify.update("weatherWindAngle", mWindAngle)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherFeelsLike", mFeelsLike)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMin", mTempMin)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMax", mTempMax)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunrise", mSunrise)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunset", mSunset)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherClouds", mCloud)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}




                                                                                                                                                                //Toast.makeText(mContext, mTemp, Toast.LENGTH_LONG).show()

                                                                                                                                                        } catch (e: Exception) {
                                                                                                                                                                Toast.makeText(mContext, e.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        }
                                                                                                                                                }

                                                                                                                                                override fun onError(anError: ANError?) {
                                                                                                                                                        Toast.makeText(mContext, anError.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        // Get user status from an input string extra
                                                                                                                                                        val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                        // Create an array and pass user credentials via intent put extra
                                                                                                                                                        val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                        // Start activity to describe incident
                                                                                                                                                        startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                }
                                                                                                                                        })

                                                                                                                                // Obtain the SupportMapFragment and get notified when the map is ready to be used.
                                                                                                                                val mapFragment = supportFragmentManager
                                                                                                                                        .findFragmentById(R.id.map) as SupportMapFragment
                                                                                                                                mapFragment.getMapAsync(this@MapActivity)
                                                                                                                        }
                                                                                                                }
                                                                                                                .addOnFailureListener { exception ->
                                                                                                                        //Log.d(TAG, "Error getting documents: ", exception)
                                                                                                                }
                                                                                                }
                                                                                        }.addOnFailureListener { err ->
                                                                                                Toast.makeText(this@MapActivity, err.toString(), Toast.LENGTH_LONG).show()
                                                                                        }


                                                                                }
                                                                        }).addOnFailureListener(object : OnFailureListener {
                                                                                override fun onFailure(@NonNull e: Exception) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                }
                                                                        }).addOnProgressListener(object : OnProgressListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onProgress(taskSnapshot: UploadTask.TaskSnapshot) {
                                                                                        val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                                                        progress.setMessage("Uploaded " + progres_time.toInt() + " %")

                                                                                }
                                                                        })


                                                                } else {
                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                        Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                .show()
                                                                }

                                                        } else {
                                                                val parentLayout: View = findViewById(android.R.id.content)
                                                                Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                        .show()
                                                        }




                                                }

                                        }
                                        .addOnFailureListener { e ->


                                        }



                        } else if (userStatus.equals("agency", true)) {
                                db.collection("agency")
                                        .whereEqualTo("uid", currentUserId)
                                        .get()
                                        .addOnSuccessListener { result ->
                                                for (document in result) {
                                                        val documentID = document.getString("documentID")
                                                        val storageCap: Long? = document.getString("storageCap")?.toLong()
                                                        val storageUsed: Long? = document.getString("storageUsed")?.toLong()
                                                        val sCapSize: Long? = storageCap
                                                        val sUsedSize: Long? = storageUsed
                                                        if (mMBSize < sCapSize!!) {
                                                                if (sUsedSize!! < sCapSize) {
                                                                        val progress = ProgressDialog(this)
                                                                        progress.setTitle("Uploading....")
                                                                        progress.show()
                                                                        mRefPhoto.putFile(filePath).addOnSuccessListener(object : OnSuccessListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onSuccess(p0: UploadTask.TaskSnapshot?) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Uploaded successfully", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                        // Modigy Used Storage
                                                                                        val modify = db.collection("agency").document(documentID.toString())
                                                                                        val mTotalStorageUsed = mMBSize + sUsedSize
                                                                                        val mUpdatedStorageUsed = mTotalStorageUsed.toString()
                                                                                        modify.update("storageUsed", mUpdatedStorageUsed)
                                                                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                        mRefPhoto.downloadUrl.addOnSuccessListener { evidURL ->
                                                                                                if (evidURL != null) {
                                                                                                        // Update the collection and add evidenceURL
                                                                                                        val type = mIncident.getIncidentType().toString().toLowerCase()
                                                                                                        // init for metadata
                                                                                                        val latmeta = mIncident.getIncidentLatitude()
                                                                                                        val lonmeta = mIncident.getIncidentLongitude()
                                                                                                        val addsmeta = mIncident.getIncidentAddress().toString()
                                                                                                        val datemeta = mIncident.getIncidentDate().toString()
                                                                                                        val mimetype = mIncident.getIncidentMimeType().toString()
                                                                                                        val typemeta = mIncident.getIncidentType().toString() +" Incident Report"
                                                                                                        val evidmeta = evidURL.toString()

                                                                                                        /* Obtain the public key material to initiate the encryption of metadata.
                                                                                                        val publicKeysetHandle = privateKeysetHandle.publicKeysetHandle
                                                                                                        // Get the primitive. For Encryption
                                                                                                        val hybridEncrypt: HybridEncrypt = publicKeysetHandle.getPrimitive(HybridEncrypt::class.java)
                                                                                                        // Use the primitive and encrypt the metatdata
                                                                                                        val encryptedlat = hybridEncrypt.encrypt(latmeta.toString().toByteArray(), latmeta.toString().toByteArray())
                                                                                                        val encryptedlon = hybridEncrypt.encrypt(lonmeta.toString().toByteArray(), lonmeta.toString().toByteArray())
                                                                                                        val encryptedadds = hybridEncrypt.encrypt(addsmeta.toByteArray(), addsmeta.toByteArray())
                                                                                                        val encrypteddate = hybridEncrypt.encrypt(datemeta.toByteArray(), datemeta.toByteArray())
                                                                                                        val encryptedmime = hybridEncrypt.encrypt(mimetype.toByteArray(), mimetype.toByteArray())
                                                                                                        val encryptedtype = hybridEncrypt.encrypt(typemeta.toByteArray(), typemeta.toByteArray())
                                                                                                        val encryptedevid = hybridEncrypt.encrypt(evidmeta.toByteArray(), evidmeta.toByteArray())

                                                                                                        // Creating and applying the encryptted metadata to the evidence file
                                                                                                        val mStorageMeta = StorageMetadata.Builder().setCustomMetadata("coordinates", encryptedlat.toString()+", "+encryptedlon.toString())
                                                                                                                .setCustomMetadata("address", encryptedadds.toString()).setCustomMetadata("date", encrypteddate.toString()).setCustomMetadata("incident", encryptedtype.toString())
                                                                                                                .setCustomMetadata("mimetype", encryptedmime.toString()).setCustomMetadata("evidence", encryptedevid.toString())
                                                                                                                .build()

                                                                                                        // Update the evidence file with the above metadata
                                                                                                        mRefPhoto.updateMetadata(mStorageMeta).addOnSuccessListener { updatedMetadata ->
                                                                                                                // Evidence file has been updated with metadata
                                                                                                                //Toast.makeText(mContext, updatedMetadata.toString(), Toast.LENGTH_LONG).show()
                                                                                                        }.addOnFailureListener {
                                                                                                                // Uh-oh, an error occurred!
                                                                                                        }

                                                                                                         */

                                                                                                        // Start an asynchronous task for the weather api
                                                                                                        var mGenerateURL = "https://api.openweathermap.org/data/2.5/weather?lat="+latmeta+"&lon="+lonmeta+"&appid="+getString(R.string.weather_api_key)+"&units=metric"
                                                                                                        //mGenerateURL = mGenerateURL.replace(" ".toRegex(), "%20")

                                                                                                        db.collection(type)
                                                                                                                .whereEqualTo("evidenceURL", mIncident.getIncidentEvidenceURL().toString())
                                                                                                                .get()
                                                                                                                .addOnSuccessListener { result ->
                                                                                                                        for (document in result) {
                                                                                                                                //Log.d(TAG, "${document.id} => ${document.data}")
                                                                                                                                val documentID = document.getString("documentID")
                                                                                                                                val mEvidURL = evidURL.toString() + "-image"
                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                modify.update("evidenceURL", mEvidURL)
                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                // Init metadata for the following file incident

                                                                                                                                                // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                                                                        }
                                                                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                                                                            // Check if complaint has been reported to [Eyewitness Community, Human Right Community, Neighborhood Community, News Media Community, Law Enforcement Community]
                                                                        val reportedTo = document.getString("reportedTo").toString()
                                                                        val subtype = document.getString("subType").toString()
                                                                        val stitle = document.getString("title").toString()
                                                                        val sdesc = document.getString("description").toString()
                                                                        if (!reportedTo.isEmpty() && reportedTo.equals("Eyewitness Community", true) ){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Eyewitness Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Eyewitness Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Legal Practitioners Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Legal Practitioners Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Legal Practitioners Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Human Rights Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Human Rights Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Human Rights Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("News Media Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by News Media Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by News Media Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Law Enforcement Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Law Enforcement Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Law Enforcement Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                            }

                                                                        }


                                                                                                                                AndroidNetworking.get(mGenerateURL).setPriority(Priority.MEDIUM).build()
                                                                                                                                        .getAsJSONObject(object: JSONObjectRequestListener {
                                                                                                                                                override fun onResponse(response: JSONObject) {
                                                                                                                                                        try {

                                                                                                                                                                // Retrieve the Generated JSONObject & JSONArray
                                                                                                                                                                val mWeather = response.getJSONArray("weather").getJSONObject(0)
                                                                                                                                                                val mWind = response.getJSONObject("wind")
                                                                                                                                                                val mMain = response.getJSONObject("main")
                                                                                                                                                                val mSys = response.getJSONObject("sys")
                                                                                                                                                                val mSky = response.getJSONObject("clouds")

                                                                                                                                                                val mDesc = mWeather.getString("description")
                                                                                                                                                                val mTemp = mMain.getString("temp") + "°C"
                                                                                                                                                                val mPressure = mMain.getString("pressure") + "hPs"
                                                                                                                                                                val mHumidity = mMain.getString("humidity") + " %"
                                                                                                                                                                val mWindSpeed = mWind.getString("speed") + " m/s"
                                                                                                                                                                val mWindAngle = mWind.getString("deg") + " deg"
                                                                                                                                                                val mFeelsLike = mMain.getString("feels_like") + "°C"
                                                                                                                                                                val mTempMin = mMain.getString("temp_min") + "°C"
                                                                                                                                                                val mTempMax = mMain.getString("temp_max") + "°C"
                                                                                                                                                                val mSunrise = mSys.getString("sunrise")
                                                                                                                                                                val mSunset = mSys.getString("sunset")
                                                                                                                                                                val mCloud = mSky.getString("all") + " %"



                                                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                                                modify.update("weatherDesc", mDesc)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))

                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener {
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                                        }

                                                                                                                                                                modify.update("weatherTemp", mTemp)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherPressure", mPressure)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherHumidity", mHumidity)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherWindSpeed", mWindSpeed)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                modify.update("weatherWindAngle", mWindAngle)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherFeelsLike", mFeelsLike)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMin", mTempMin)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMax", mTempMax)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunrise", mSunrise)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunset", mSunset)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherClouds", mCloud)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}




                                                                                                                                                                //Toast.makeText(mContext, mTemp, Toast.LENGTH_LONG).show()

                                                                                                                                                        } catch (e: Exception) {
                                                                                                                                                                Toast.makeText(mContext, e.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        }
                                                                                                                                                }

                                                                                                                                                override fun onError(anError: ANError?) {
                                                                                                                                                        Toast.makeText(mContext, anError.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        // Get user status from an input string extra
                                                                                                                                                        val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                        // Create an array and pass user credentials via intent put extra
                                                                                                                                                        val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                        // Start activity to describe incident
                                                                                                                                                        startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                }
                                                                                                                                        })

                                                                                                                                // Obtain the SupportMapFragment and get notified when the map is ready to be used.
                                                                                                                                val mapFragment = supportFragmentManager
                                                                                                                                        .findFragmentById(R.id.map) as SupportMapFragment
                                                                                                                                mapFragment.getMapAsync(this@MapActivity)
                                                                                                                        }
                                                                                                                }
                                                                                                                .addOnFailureListener { exception ->
                                                                                                                        //Log.d(TAG, "Error getting documents: ", exception)
                                                                                                                }
                                                                                                }
                                                                                        }.addOnFailureListener { err ->
                                                                                                Toast.makeText(this@MapActivity, err.toString(), Toast.LENGTH_LONG).show()
                                                                                        }


                                                                                }
                                                                        }).addOnFailureListener(object : OnFailureListener {
                                                                                override fun onFailure(@NonNull e: Exception) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                }
                                                                        }).addOnProgressListener(object : OnProgressListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onProgress(taskSnapshot: UploadTask.TaskSnapshot) {
                                                                                        val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                                                        progress.setMessage("Uploaded " + progres_time.toInt() + " %")

                                                                                }
                                                                        })

                                                                } else {
                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                        Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                .show()
                                                                }

                                                        } else {
                                                                val parentLayout: View = findViewById(android.R.id.content)
                                                                Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                        .show()
                                                        }


                                                }

                                        }
                                        .addOnFailureListener { e ->


                                        }
                        }

                }
        }


        private fun uploadDoc() {
                if (filePath != null) {
                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(Date())
                        mRefDOC = mStorageRef.child("eyewitness/evidence/docx/" + UUID.randomUUID().toString())
                        val mPath: AssetFileDescriptor = applicationContext.contentResolver.openAssetFileDescriptor(filePath, "r")!!
                        // Get length of file in Bytes
                        val mByteSize: Long = mPath.length
                        // Convert the bytes to Kilobytes
                        val mKBSize: Long = mByteSize / 1024
                        // Convert the kilobytes to Megabytes
                        val mMBSize: Long = mKBSize / 1024
                        // Convert the megabytes to Gigabytes
                        val mGBSize: Long = mMBSize / 1024

                        val currentUserId = auth.currentUser?.uid.toString()
                        val userStatus = intent.getStringExtra("Tag")
                        if (userStatus.equals("user", true)) {
                                db.collection("users")
                                        .whereEqualTo("uid", currentUserId)
                                        .get()
                                        .addOnSuccessListener { result ->
                                                for (document in result) {
                                                        val documentID = document.getString("documentID")
                                                        val storageCap: Long? = document.getString("storageCap")?.toLong()
                                                        val storageUsed: Long? = document.getString("storageUsed")?.toLong()
                                                        val sCapSize: Long? = storageCap
                                                        val sUsedSize: Long? = storageUsed
                                                        if (mMBSize < sCapSize!!) {
                                                                if (sUsedSize!! < sCapSize) {
                                                                        val progress = ProgressDialog(this)
                                                                        progress.setTitle("Uploading....")
                                                                        progress.show()

                                                                        mRefDOC.putFile(filePath).addOnSuccessListener(object : OnSuccessListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onSuccess(p0: UploadTask.TaskSnapshot?) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Uploaded successfully", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                        // Modigy Used Storage
                                                                                        val modify = db.collection("users").document(documentID.toString())
                                                                                        val mTotalStorageUsed = mMBSize + sUsedSize
                                                                                        val mUpdatedStorageUsed = mTotalStorageUsed.toString()
                                                                                        modify.update("storageUsed", mUpdatedStorageUsed)
                                                                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                        mRefDOC.downloadUrl.addOnSuccessListener { evidURL ->
                                                                                                if (evidURL != null) {
                                                                                                        // Update the collection and add evidenceURL
                                                                                                        val type = mIncident.getIncidentType().toString().toLowerCase()
                                                                                                        // init for metadata
                                                                                                        val latmeta = mIncident.getIncidentLatitude()
                                                                                                        val lonmeta = mIncident.getIncidentLongitude()
                                                                                                        val addsmeta = mIncident.getIncidentAddress().toString()
                                                                                                        val datemeta = mIncident.getIncidentDate().toString()
                                                                                                        val mimetype = mIncident.getIncidentMimeType().toString()
                                                                                                        val typemeta = mIncident.getIncidentType().toString() +" Incident Report"
                                                                                                        val evidmeta = evidURL.toString()

                                                                                                        /* Obtain the public key material to initiate the encryption of metadata.
                                                                                                        val publicKeysetHandle = privateKeysetHandle.publicKeysetHandle
                                                                                                        // Get the primitive. For Encryption
                                                                                                        val hybridEncrypt: HybridEncrypt = publicKeysetHandle.getPrimitive(HybridEncrypt::class.java)
                                                                                                        // Use the primitive and encrypt the metatdata
                                                                                                        val encryptedlat = hybridEncrypt.encrypt(latmeta.toString().toByteArray(), latmeta.toString().toByteArray())
                                                                                                        val encryptedlon = hybridEncrypt.encrypt(lonmeta.toString().toByteArray(), lonmeta.toString().toByteArray())
                                                                                                        val encryptedadds = hybridEncrypt.encrypt(addsmeta.toByteArray(), addsmeta.toByteArray())
                                                                                                        val encrypteddate = hybridEncrypt.encrypt(datemeta.toByteArray(), datemeta.toByteArray())
                                                                                                        val encryptedmime = hybridEncrypt.encrypt(mimetype.toByteArray(), mimetype.toByteArray())
                                                                                                        val encryptedtype = hybridEncrypt.encrypt(typemeta.toByteArray(), typemeta.toByteArray())
                                                                                                        val encryptedevid = hybridEncrypt.encrypt(evidmeta.toByteArray(), evidmeta.toByteArray())

                                                                                                        // Creating and applying the encryptted metadata to the evidence file
                                                                                                        val mStorageMeta = StorageMetadata.Builder().setCustomMetadata("coordinates", encryptedlat.toString()+", "+encryptedlon.toString())
                                                                                                                .setCustomMetadata("address", encryptedadds.toString()).setCustomMetadata("date", encrypteddate.toString()).setCustomMetadata("incident", encryptedtype.toString())
                                                                                                                .setCustomMetadata("mimetype", encryptedmime.toString()).setCustomMetadata("evidence", encryptedevid.toString())
                                                                                                                .build()

                                                                                                        // Update the evidence file with the above metadata
                                                                                                        mRefDOC.updateMetadata(mStorageMeta).addOnSuccessListener { updatedMetadata ->
                                                                                                                // Evidence file has been updated with metadata
                                                                                                                //Toast.makeText(mContext, updatedMetadata.toString(), Toast.LENGTH_LONG).show()
                                                                                                        }.addOnFailureListener {
                                                                                                                // Uh-oh, an error occurred!
                                                                                                        }

                                                                                                         */

                                                                                                        // Start an asynchronous task for the weather api
                                                                                                        var mGenerateURL = "https://api.openweathermap.org/data/2.5/weather?lat="+latmeta+"&lon="+lonmeta+"&appid="+getString(R.string.weather_api_key)+"&units=metric"
                                                                                                        //mGenerateURL = mGenerateURL.replace(" ".toRegex(), "%20")

                                                                                                        db.collection(type)
                                                                                                                .whereEqualTo("evidenceURL", mIncident.getIncidentEvidenceURL().toString())
                                                                                                                .get()
                                                                                                                .addOnSuccessListener { result ->
                                                                                                                        for (document in result) {
                                                                                                                                //Log.d(TAG, "${document.id} => ${document.data}")
                                                                                                                                val documentID = document.getString("documentID")
                                                                                                                                val mEvidURL = evidURL.toString() + "-docx"
                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                modify.update("evidenceURL", mEvidURL)
                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                // Init metadata for the following file incident

                                                                                                                                                // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                                                                        }
                                                                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                                                            // Check if complaint has been reported to [Eyewitness Community, Human Right Community, Neighborhood Community, News Media Community, Law Enforcement Community]
                                                                        val reportedTo = document.getString("reportedTo").toString()
                                                                        val subtype = document.getString("subType").toString()
                                                                        val stitle = document.getString("title").toString()
                                                                        val sdesc = document.getString("description").toString()
                                                                        if (!reportedTo.isEmpty() && reportedTo.equals("Eyewitness Community", true) ){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Eyewitness Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Eyewitness Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Legal Practitioners Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Legal Practitioners Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Legal Practitioners Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Human Rights Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Human Rights Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Human Rights Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("News Media Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by News Media Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by News Media Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Law Enforcement Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Law Enforcement Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Law Enforcement Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                            }

                                                                        }

                                                                                                                                AndroidNetworking.get(mGenerateURL).setPriority(Priority.MEDIUM).build()
                                                                                                                                        .getAsJSONObject(object: JSONObjectRequestListener {
                                                                                                                                                override fun onResponse(response: JSONObject) {
                                                                                                                                                        try {

                                                                                                                                                                // Retrieve the Generated JSONObject & JSONArray
                                                                                                                                                                val mWeather = response.getJSONArray("weather").getJSONObject(0)
                                                                                                                                                                val mWind = response.getJSONObject("wind")
                                                                                                                                                                val mMain = response.getJSONObject("main")
                                                                                                                                                                val mSys = response.getJSONObject("sys")
                                                                                                                                                                val mSky = response.getJSONObject("clouds")

                                                                                                                                                                val mDesc = mWeather.getString("description")
                                                                                                                                                                val mTemp = mMain.getString("temp") + "°C"
                                                                                                                                                                val mPressure = mMain.getString("pressure") + "hPs"
                                                                                                                                                                val mHumidity = mMain.getString("humidity") + " %"
                                                                                                                                                                val mWindSpeed = mWind.getString("speed") + " m/s"
                                                                                                                                                                val mWindAngle = mWind.getString("deg") + " deg"
                                                                                                                                                                val mFeelsLike = mMain.getString("feels_like") + "°C"
                                                                                                                                                                val mTempMin = mMain.getString("temp_min") + "°C"
                                                                                                                                                                val mTempMax = mMain.getString("temp_max") + "°C"
                                                                                                                                                                val mSunrise = mSys.getString("sunrise")
                                                                                                                                                                val mSunset = mSys.getString("sunset")
                                                                                                                                                                val mCloud = mSky.getString("all") + " %"


                                                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                                                modify.update("weatherDesc", mDesc)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener {
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                                        }

                                                                                                                                                                modify.update("weatherTemp", mTemp)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherPressure", mPressure)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherHumidity", mHumidity)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherWindSpeed", mWindSpeed)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                modify.update("weatherWindAngle", mWindAngle)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherFeelsLike", mFeelsLike)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMin", mTempMin)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMax", mTempMax)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunrise", mSunrise)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunset", mSunset)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherClouds", mCloud)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                //Toast.makeText(mContext, mTemp, Toast.LENGTH_LONG).show()

                                                                                                                                                        } catch (e: Exception) {
                                                                                                                                                                Toast.makeText(mContext, e.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        }
                                                                                                                                                }

                                                                                                                                                override fun onError(anError: ANError?) {
                                                                                                                                                        Toast.makeText(mContext, anError.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        // Get user status from an input string extra
                                                                                                                                                        val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                        // Create an array and pass user credentials via intent put extra
                                                                                                                                                        val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                        // Start activity to describe incident
                                                                                                                                                        startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                }
                                                                                                                                        })

                                                                                                                                // Obtain the SupportMapFragment and get notified when the map is ready to be used.
                                                                                                                                val mapFragment = supportFragmentManager
                                                                                                                                        .findFragmentById(R.id.map) as SupportMapFragment
                                                                                                                                mapFragment.getMapAsync(this@MapActivity)

                                                                                                                        }
                                                                                                                }
                                                                                                                .addOnFailureListener { exception ->
                                                                                                                        //Log.d(TAG, "Error getting documents: ", exception)
                                                                                                                }
                                                                                                }
                                                                                        }.addOnFailureListener { err ->
                                                                                                Toast.makeText(this@MapActivity, err.toString(), Toast.LENGTH_LONG).show()
                                                                                        }


                                                                                }
                                                                        }).addOnFailureListener(object : OnFailureListener {
                                                                                override fun onFailure(@NonNull e: Exception) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                }
                                                                        }).addOnProgressListener(object : OnProgressListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onProgress(taskSnapshot: UploadTask.TaskSnapshot) {
                                                                                        val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                                                        progress.setMessage("Uploaded " + progres_time.toInt() + " %")

                                                                                }
                                                                        })

                                                                } else {
                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                        Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                .show()
                                                                }

                                                        } else {
                                                                val parentLayout: View = findViewById(android.R.id.content)
                                                                Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                        .show()
                                                        }


                                                }

                                        }
                                        .addOnFailureListener { e ->


                                        }

                        } else if (userStatus.equals("agency", true)) {
                                db.collection("agency")
                                        .whereEqualTo("uid", currentUserId)
                                        .get()
                                        .addOnSuccessListener { result ->
                                                for (document in result) {
                                                        val documentID = document.getString("documentID")
                                                        val storageCap: Long? = document.getString("storageCap")?.toLong()
                                                        val storageUsed: Long? = document.getString("storageUsed")?.toLong()
                                                        val sCapSize: Long? = storageCap
                                                        val sUsedSize: Long? = storageUsed
                                                        if (mMBSize < sCapSize!!) {
                                                                if (sUsedSize!! < sCapSize) {
                                                                        val progress = ProgressDialog(this)
                                                                        progress.setTitle("Uploading....")
                                                                        progress.show()

                                                                        mRefDOC.putFile(filePath).addOnSuccessListener(object : OnSuccessListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onSuccess(p0: UploadTask.TaskSnapshot?) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Uploaded successfully", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                        // Modigy Used Storage
                                                                                        val modify = db.collection("agency").document(documentID.toString())
                                                                                        val mTotalStorageUsed = mMBSize + sUsedSize
                                                                                        val mUpdatedStorageUsed = mTotalStorageUsed.toString()
                                                                                        modify.update("storageUsed", mUpdatedStorageUsed)
                                                                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                        mRefDOC.downloadUrl.addOnSuccessListener { evidURL ->
                                                                                                if (evidURL != null) {
                                                                                                        // Update the collection and add evidenceURL
                                                                                                        val type = mIncident.getIncidentType().toString().toLowerCase()
                                                                                                        // init for metadata
                                                                                                        val latmeta = mIncident.getIncidentLatitude()
                                                                                                        val lonmeta = mIncident.getIncidentLongitude()
                                                                                                        val addsmeta = mIncident.getIncidentAddress().toString()
                                                                                                        val datemeta = mIncident.getIncidentDate().toString()
                                                                                                        val mimetype = mIncident.getIncidentMimeType().toString()
                                                                                                        val typemeta = mIncident.getIncidentType().toString() +" Incident Report"
                                                                                                        val evidmeta = evidURL.toString()

                                                                                                        /* Obtain the public key material to initiate the encryption of metadata.
                                                                                                        val publicKeysetHandle = privateKeysetHandle.publicKeysetHandle
                                                                                                        // Get the primitive. For Encryption
                                                                                                        val hybridEncrypt: HybridEncrypt = publicKeysetHandle.getPrimitive(HybridEncrypt::class.java)
                                                                                                        // Use the primitive and encrypt the metatdata
                                                                                                        val encryptedlat = hybridEncrypt.encrypt(latmeta.toString().toByteArray(), latmeta.toString().toByteArray())
                                                                                                        val encryptedlon = hybridEncrypt.encrypt(lonmeta.toString().toByteArray(), lonmeta.toString().toByteArray())
                                                                                                        val encryptedadds = hybridEncrypt.encrypt(addsmeta.toByteArray(), addsmeta.toByteArray())
                                                                                                        val encrypteddate = hybridEncrypt.encrypt(datemeta.toByteArray(), datemeta.toByteArray())
                                                                                                        val encryptedmime = hybridEncrypt.encrypt(mimetype.toByteArray(), mimetype.toByteArray())
                                                                                                        val encryptedtype = hybridEncrypt.encrypt(typemeta.toByteArray(), typemeta.toByteArray())
                                                                                                        val encryptedevid = hybridEncrypt.encrypt(evidmeta.toByteArray(), evidmeta.toByteArray())

                                                                                                        // Creating and applying the encryptted metadata to the evidence file
                                                                                                        val mStorageMeta = StorageMetadata.Builder().setCustomMetadata("coordinates", encryptedlat.toString()+", "+encryptedlon.toString())
                                                                                                                .setCustomMetadata("address", encryptedadds.toString()).setCustomMetadata("date", encrypteddate.toString()).setCustomMetadata("incident", encryptedtype.toString())
                                                                                                                .setCustomMetadata("mimetype", encryptedmime.toString()).setCustomMetadata("evidence", encryptedevid.toString())
                                                                                                                .build()

                                                                                                        // Update the evidence file with the above metadata
                                                                                                        mRefDOC.updateMetadata(mStorageMeta).addOnSuccessListener { updatedMetadata ->
                                                                                                                // Evidence file has been updated with metadata
                                                                                                                //Toast.makeText(mContext, updatedMetadata.toString(), Toast.LENGTH_LONG).show()
                                                                                                        }.addOnFailureListener {
                                                                                                                // Uh-oh, an error occurred!
                                                                                                        }

                                                                                                         */

                                                                                                        // Start an asynchronous task for the weather api
                                                                                                        var mGenerateURL = "https://api.openweathermap.org/data/2.5/weather?lat="+latmeta+"&lon="+lonmeta+"&appid="+getString(R.string.weather_api_key)+"&units=metric"
                                                                                                        //mGenerateURL = mGenerateURL.replace(" ".toRegex(), "%20")

                                                                                                        db.collection(type)
                                                                                                                .whereEqualTo("evidenceURL", mIncident.getIncidentEvidenceURL().toString())
                                                                                                                .get()
                                                                                                                .addOnSuccessListener { result ->
                                                                                                                        for (document in result) {
                                                                                                                                //Log.d(TAG, "${document.id} => ${document.data}")
                                                                                                                                val documentID = document.getString("documentID")
                                                                                                                                val mEvidURL = evidURL.toString() + "-docx"
                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                modify.update("evidenceURL", mEvidURL)
                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                // Init metadata for the following file incident

                                                                                                                                                // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                                                                        }
                                                                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                                                            // Check if complaint has been reported to [Eyewitness Community, Human Right Community, Neighborhood Community, News Media Community, Law Enforcement Community]
                                                                        val reportedTo = document.getString("reportedTo").toString()
                                                                        val subtype = document.getString("subType").toString()
                                                                        val stitle = document.getString("title").toString()
                                                                        val sdesc = document.getString("description").toString()
                                                                        if (!reportedTo.isEmpty() && reportedTo.equals("Eyewitness Community", true) ){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Eyewitness Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Eyewitness Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Legal Practitioners Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Legal Practitioners Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Legal Practitioners Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Human Rights Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Human Rights Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Human Rights Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("News Media Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by News Media Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by News Media Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Law Enforcement Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Law Enforcement Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Law Enforcement Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                            }

                                                                        }

                                                                                                                                AndroidNetworking.get(mGenerateURL).setPriority(Priority.MEDIUM).build()
                                                                                                                                        .getAsJSONObject(object: JSONObjectRequestListener {
                                                                                                                                                override fun onResponse(response: JSONObject) {
                                                                                                                                                        try {

                                                                                                                                                                // Retrieve the Generated JSONObject & JSONArray
                                                                                                                                                                val mWeather = response.getJSONArray("weather").getJSONObject(0)
                                                                                                                                                                val mWind = response.getJSONObject("wind")
                                                                                                                                                                val mMain = response.getJSONObject("main")
                                                                                                                                                                val mSys = response.getJSONObject("sys")
                                                                                                                                                                val mSky = response.getJSONObject("clouds")

                                                                                                                                                                val mDesc = mWeather.getString("description")
                                                                                                                                                                val mTemp = mMain.getString("temp") + "°C"
                                                                                                                                                                val mPressure = mMain.getString("pressure") + "hPs"
                                                                                                                                                                val mHumidity = mMain.getString("humidity") + " %"
                                                                                                                                                                val mWindSpeed = mWind.getString("speed") + " m/s"
                                                                                                                                                                val mWindAngle = mWind.getString("deg") + " deg"
                                                                                                                                                                val mFeelsLike = mMain.getString("feels_like") + "°C"
                                                                                                                                                                val mTempMin = mMain.getString("temp_min") + "°C"
                                                                                                                                                                val mTempMax = mMain.getString("temp_max") + "°C"
                                                                                                                                                                val mSunrise = mSys.getString("sunrise")
                                                                                                                                                                val mSunset = mSys.getString("sunset")
                                                                                                                                                                val mCloud = mSky.getString("all") + " %"


                                                                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                                                                modify.update("weatherDesc", mDesc)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener {
                                                                                                                                                                                // Get user status from an input string extra
                                                                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                                                // Start activity to describe incident
                                                                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                                        }

                                                                                                                                                                modify.update("weatherTemp", mTemp)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherPressure", mPressure)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherHumidity", mHumidity)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherWindSpeed", mWindSpeed)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                modify.update("weatherWindAngle", mWindAngle)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherFeelsLike", mFeelsLike)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMin", mTempMin)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherTempMax", mTempMax)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunrise", mSunrise)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherSunset", mSunset)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                                                                modify.update("weatherClouds", mCloud)
                                                                                                                                                                        .addOnSuccessListener {
                                                                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                                                                // Init metadata for the following file incident


                                                                                                                                                                        }
                                                                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                                                                //Toast.makeText(mContext, mTemp, Toast.LENGTH_LONG).show()

                                                                                                                                                        } catch (e: Exception) {
                                                                                                                                                                Toast.makeText(mContext, e.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        }
                                                                                                                                                }

                                                                                                                                                override fun onError(anError: ANError?) {
                                                                                                                                                        Toast.makeText(mContext, anError.toString(), Toast.LENGTH_LONG).show()
                                                                                                                                                        // Get user status from an input string extra
                                                                                                                                                        val mStatus = intent.getStringExtra("Tag")
                                                                                                                                                        // Create an array and pass user credentials via intent put extra
                                                                                                                                                        val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                                        // Start activity to describe incident
                                                                                                                                                        startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                                                }
                                                                                                                                        })

                                                                                                                                // Obtain the SupportMapFragment and get notified when the map is ready to be used.
                                                                                                                                val mapFragment = supportFragmentManager
                                                                                                                                        .findFragmentById(R.id.map) as SupportMapFragment
                                                                                                                                mapFragment.getMapAsync(this@MapActivity)

                                                                                                                        }
                                                                                                                }
                                                                                                                .addOnFailureListener { exception ->
                                                                                                                        //Log.d(TAG, "Error getting documents: ", exception)
                                                                                                                }
                                                                                                }
                                                                                        }.addOnFailureListener { err ->
                                                                                                Toast.makeText(this@MapActivity, err.toString(), Toast.LENGTH_LONG).show()
                                                                                        }


                                                                                }
                                                                        }).addOnFailureListener(object : OnFailureListener {
                                                                                override fun onFailure(@NonNull e: Exception) {
                                                                                        progress.dismiss()
                                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                                .show()

                                                                                }
                                                                        }).addOnProgressListener(object : OnProgressListener<UploadTask.TaskSnapshot?> {
                                                                                override fun onProgress(taskSnapshot: UploadTask.TaskSnapshot) {
                                                                                        val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                                                        progress.setMessage("Uploaded " + progres_time.toInt() + " %")

                                                                                }
                                                                        })

                                                                } else {
                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                        Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                .show()
                                                                }

                                                        } else {
                                                                val parentLayout: View = findViewById(android.R.id.content)
                                                                Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                        .show()
                                                        }


                                                }

                                        }
                                        .addOnFailureListener { e ->


                                        }
                        }


                }
        }


        private fun uploadPdf() {
                if (filePath != null) {
                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(Date())
                        mRefPDF = mStorageRef.child("eyewitness/evidence/pdf/" + UUID.randomUUID().toString())
                        val mPath: AssetFileDescriptor = applicationContext.contentResolver.openAssetFileDescriptor(filePath, "r")!!
                        // Get length of file in Bytes
                        val mByteSize: Long = mPath.length
                        // Convert the bytes to Kilobytes
                        val mKBSize: Long = mByteSize / 1024
                        // Convert the kilobytes to Megabytes
                        val mMBSize: Long = mKBSize / 1024
                        // Convert the megabytes to Gigabytes
                        val mGBSize: Long = mMBSize / 1024

                        val currentUserId = auth.currentUser?.uid.toString()
                        val userStatus = intent.getStringExtra("Tag")
                        if (userStatus.equals("user", true)) {
                                db.collection("users")
                                        .whereEqualTo("uid", currentUserId)
                                        .get()
                                        .addOnSuccessListener { result ->
                                                for (document in result) {
                                                        val documentID = document.getString("documentID")
                                                        val storageCap: Long? = document.getString("storageCap")?.toLong()
                                                        val storageUsed: Long? = document.getString("storageUsed")?.toLong()
                                                        val sCapSize: Long? = storageCap
                                                        val sUsedSize: Long? = storageUsed
                                                        if (mMBSize < sCapSize!!) {
                                                                if (sUsedSize!! < sCapSize) {
                                                                        val progress = ProgressDialog(this)
                        progress.setTitle("Uploading....")
                        progress.show()

                        mRefPDF.putFile(filePath).addOnSuccessListener(object : OnSuccessListener<UploadTask.TaskSnapshot?> {
                                override fun onSuccess(p0: UploadTask.TaskSnapshot?) {
                                        progress.dismiss()
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Uploaded successfully", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                        // Modigy Used Storage
                                        val modify = db.collection("users").document(documentID.toString())
                                        val mTotalStorageUsed = mMBSize + sUsedSize
                                        val mUpdatedStorageUsed = mTotalStorageUsed.toString()
                                        modify.update("storageUsed", mUpdatedStorageUsed)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                        mRefPDF.downloadUrl.addOnSuccessListener { evidURL ->
                                                if (evidURL != null) {
                                                        // Update the collection and add evidenceURL
                                                        val type = mIncident.getIncidentType().toString().toLowerCase()
                                                        // init for metadata
                                                        val latmeta = mIncident.getIncidentLatitude()
                                                        val lonmeta = mIncident.getIncidentLongitude()
                                                        val addsmeta = mIncident.getIncidentAddress().toString()
                                                        val datemeta = mIncident.getIncidentDate().toString()
                                                        val mimetype = mIncident.getIncidentMimeType().toString()
                                                        val typemeta = mIncident.getIncidentType().toString() +" Incident Report"
                                                        val evidmeta = evidURL.toString()

                                                        /* Obtain the public key material to initiate the encryption of metadata.
                                                        val publicKeysetHandle = privateKeysetHandle.publicKeysetHandle
                                                        // Get the primitive. For Encryption
                                                        val hybridEncrypt: HybridEncrypt = publicKeysetHandle.getPrimitive(HybridEncrypt::class.java)
                                                        // Use the primitive and encrypt the metadata
                                                        val encryptedlat = hybridEncrypt.encrypt(latmeta.toString().toByteArray(), latmeta.toString().toByteArray())
                                                        val encryptedlon = hybridEncrypt.encrypt(lonmeta.toString().toByteArray(), lonmeta.toString().toByteArray())
                                                        val encryptedadds = hybridEncrypt.encrypt(addsmeta.toByteArray(), addsmeta.toByteArray())
                                                        val encrypteddate = hybridEncrypt.encrypt(datemeta.toByteArray(), datemeta.toByteArray())
                                                        val encryptedmime = hybridEncrypt.encrypt(mimetype.toByteArray(), mimetype.toByteArray())
                                                        val encryptedtype = hybridEncrypt.encrypt(typemeta.toByteArray(), typemeta.toByteArray())
                                                        val encryptedevid = hybridEncrypt.encrypt(evidmeta.toByteArray(), evidmeta.toByteArray())

                                                        // Creating and applying the encryptted metadata to the evidence file
                                                        val mStorageMeta = StorageMetadata.Builder().setCustomMetadata("coordinates", encryptedlat.toString()+", "+encryptedlon.toString())
                                                                .setCustomMetadata("address", encryptedadds.toString()).setCustomMetadata("date", encrypteddate.toString()).setCustomMetadata("incident", encryptedtype.toString())
                                                                .setCustomMetadata("mimetype", encryptedmime.toString()).setCustomMetadata("evidence", encryptedevid.toString())
                                                                .build()

                                                        // Update the evidence file with the above metadata
                                                        mRefPDF.updateMetadata(mStorageMeta).addOnSuccessListener { updatedMetadata ->
                                                                // Evidence file has been updated with metadata
                                                                //Toast.makeText(mContext, updatedMetadata.toString(), Toast.LENGTH_LONG).show()
                                                        }.addOnFailureListener {
                                                                // Uh-oh, an error occurred!
                                                        }

                                                         */

                                                        // Start an asynchronous task for the weather api
                                                        var mGenerateURL = "https://api.openweathermap.org/data/2.5/weather?lat="+latmeta+"&lon="+lonmeta+"&appid="+getString(R.string.weather_api_key)+"&units=metric"
                                                        //mGenerateURL = mGenerateURL.replace(" ".toRegex(), "%20")

                                                        db.collection(type)
                                                                .whereEqualTo("evidenceURL", mIncident.getIncidentEvidenceURL().toString())
                                                                .get()
                                                                .addOnSuccessListener { result ->
                                                                        for (document in result) {
                                                                                //Log.d(TAG, "${document.id} => ${document.data}")
                                                                                val documentID = document.getString("documentID")
                                                                                val mEvidURL = evidURL.toString() + "-pdf"
                                                                                val modify = db.collection(type).document(document.id)
                                                                                modify.update("evidenceURL", mEvidURL)
                                                                                        .addOnSuccessListener {
                                                                                                Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                // Init metadata for the following file incident

                                                                                                // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                            // Check if complaint has been reported to [Eyewitness Community, Human Right Community, Neighborhood Community, News Media Community, Law Enforcement Community]
                                                                        val reportedTo = document.getString("reportedTo").toString()
                                                                        val subtype = document.getString("subType").toString()
                                                                        val stitle = document.getString("title").toString()
                                                                        val sdesc = document.getString("description").toString()
                                                                        if (!reportedTo.isEmpty() && reportedTo.equals("Eyewitness Community", true) ){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Eyewitness Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Eyewitness Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Legal Practitioners Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Legal Practitioners Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Legal Practitioners Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Human Rights Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Human Rights Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Human Rights Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("News Media Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by News Media Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by News Media Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Law Enforcement Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Law Enforcement Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Law Enforcement Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                            }

                                                                        }


                                                                                AndroidNetworking.get(mGenerateURL).setPriority(Priority.MEDIUM).build()
                                                                                        .getAsJSONObject(object: JSONObjectRequestListener {
                                                                                                override fun onResponse(response: JSONObject) {
                                                                                                        try {

                                                                                                                // Retrieve the Generated JSONObject & JSONArray
                                                                                                                val mWeather = response.getJSONArray("weather").getJSONObject(0)
                                                                                                                val mWind = response.getJSONObject("wind")
                                                                                                                val mMain = response.getJSONObject("main")
                                                                                                                val mSys = response.getJSONObject("sys")
                                                                                                                val mSky = response.getJSONObject("clouds")

                                                                                                                val mDesc = mWeather.getString("description")
                                                                                                                val mTemp = mMain.getString("temp") + "°C"
                                                                                                                val mPressure = mMain.getString("pressure") + "hPs"
                                                                                                                val mHumidity = mMain.getString("humidity") + " %"
                                                                                                                val mWindSpeed = mWind.getString("speed") + " m/s"
                                                                                                                val mWindAngle = mWind.getString("deg") + " deg"
                                                                                                                val mFeelsLike = mMain.getString("feels_like") + "°C"
                                                                                                                val mTempMin = mMain.getString("temp_min") + "°C"
                                                                                                                val mTempMax = mMain.getString("temp_max") + "°C"
                                                                                                                val mSunrise = mSys.getString("sunrise")
                                                                                                                val mSunset = mSys.getString("sunset")
                                                                                                                val mCloud = mSky.getString("all") + " %"


                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                modify.update("weatherDesc", mDesc)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Get user status from an input string extra
                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                // Start activity to describe incident
                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))

                                                                                                                        }
                                                                                                                        .addOnFailureListener {
                                                                                                                                // Get user status from an input string extra
                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                // Start activity to describe incident
                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                        }

                                                                                                                modify.update("weatherTemp", mTemp)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherPressure", mPressure)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherHumidity", mHumidity)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherWindSpeed", mWindSpeed)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                modify.update("weatherWindAngle", mWindAngle)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherFeelsLike", mFeelsLike)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherTempMin", mTempMin)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherTempMax", mTempMax)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherSunrise", mSunrise)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherSunset", mSunset)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherClouds", mCloud)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                //Toast.makeText(mContext, mTemp, Toast.LENGTH_LONG).show()

                                                                                                        } catch (e: Exception) {
                                                                                                                Toast.makeText(mContext, e.toString(), Toast.LENGTH_LONG).show()
                                                                                                        }
                                                                                                }

                                                                                                override fun onError(anError: ANError?) {
                                                                                                        Toast.makeText(mContext, anError.toString(), Toast.LENGTH_LONG).show()
                                                                                                        // Get user status from an input string extra
                                                                                                        val mStatus = intent.getStringExtra("Tag")
                                                                                                        // Create an array and pass user credentials via intent put extra
                                                                                                        val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                        // Start activity to describe incident
                                                                                                        startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                }
                                                                                        })

                                                                                // Obtain the SupportMapFragment and get notified when the map is ready to be used.
                                                                                val mapFragment = supportFragmentManager
                                                                                        .findFragmentById(R.id.map) as SupportMapFragment
                                                                                mapFragment.getMapAsync(this@MapActivity)

                                                                        }
                                                                }
                                                                .addOnFailureListener { exception ->
                                                                        //Log.d(TAG, "Error getting documents: ", exception)
                                                                }
                                                }
                                        }.addOnFailureListener { err ->
                                                Toast.makeText(this@MapActivity, err.toString(), Toast.LENGTH_LONG).show()
                                        }


                                }
                        }).addOnFailureListener(object : OnFailureListener {
                                override fun onFailure(@NonNull e: Exception) {
                                        progress.dismiss()
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }
                        }).addOnProgressListener(object : OnProgressListener<UploadTask.TaskSnapshot?> {
                                override fun onProgress(taskSnapshot: UploadTask.TaskSnapshot) {
                                        val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                        progress.setMessage("Uploaded " + progres_time.toInt() + " %")

                                }
                        })
                                                                } else {
                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                        Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                .show()
                                                                }

                                                        } else {
                                                                val parentLayout: View = findViewById(android.R.id.content)
                                                                Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                        .show()
                                                        }


                                                }

                                        }
                                        .addOnFailureListener { e ->


                                        }

                        } else if (userStatus.equals("agency", true)) {
                                db.collection("agency")
                                        .whereEqualTo("uid", currentUserId)
                                        .get()
                                        .addOnSuccessListener { result ->
                                                for (document in result) {
                                                        val documentID = document.getString("documentID")
                                                        val storageCap: Long? = document.getString("storageCap")?.toLong()
                                                        val storageUsed: Long? = document.getString("storageUsed")?.toLong()
                                                        val sCapSize: Long? = storageCap
                                                        val sUsedSize: Long? = storageUsed
                                                        if (mMBSize < sCapSize!!) {
                                                                if (sUsedSize!! < sCapSize) {
                                                                        val progress = ProgressDialog(this)
                        progress.setTitle("Uploading....")
                        progress.show()

                        mRefPDF.putFile(filePath).addOnSuccessListener(object : OnSuccessListener<UploadTask.TaskSnapshot?> {
                                override fun onSuccess(p0: UploadTask.TaskSnapshot?) {
                                        progress.dismiss()
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Uploaded successfully", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                        // Modigy Used Storage
                                        val modify = db.collection("agency").document(documentID.toString())
                                        val mTotalStorageUsed = mMBSize + sUsedSize
                                        val mUpdatedStorageUsed = mTotalStorageUsed.toString()
                                        modify.update("storageUsed", mUpdatedStorageUsed)
                                                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
                                                .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                        mRefPDF.downloadUrl.addOnSuccessListener { evidURL ->
                                                if (evidURL != null) {
                                                        // Update the collection and add evidenceURL
                                                        val type = mIncident.getIncidentType().toString().toLowerCase()
                                                        // init for metadata
                                                        val latmeta = mIncident.getIncidentLatitude()
                                                        val lonmeta = mIncident.getIncidentLongitude()
                                                        val addsmeta = mIncident.getIncidentAddress().toString()
                                                        val datemeta = mIncident.getIncidentDate().toString()
                                                        val mimetype = mIncident.getIncidentMimeType().toString()
                                                        val typemeta = mIncident.getIncidentType().toString() +" Incident Report"
                                                        val evidmeta = evidURL.toString()

                                                        /* Obtain the public key material to initiate the encryption of metadata.
                                                        val publicKeysetHandle = privateKeysetHandle.publicKeysetHandle
                                                        // Get the primitive. For Encryption
                                                        val hybridEncrypt: HybridEncrypt = publicKeysetHandle.getPrimitive(HybridEncrypt::class.java)
                                                        // Use the primitive and encrypt the metadata
                                                        val encryptedlat = hybridEncrypt.encrypt(latmeta.toString().toByteArray(), latmeta.toString().toByteArray())
                                                        val encryptedlon = hybridEncrypt.encrypt(lonmeta.toString().toByteArray(), lonmeta.toString().toByteArray())
                                                        val encryptedadds = hybridEncrypt.encrypt(addsmeta.toByteArray(), addsmeta.toByteArray())
                                                        val encrypteddate = hybridEncrypt.encrypt(datemeta.toByteArray(), datemeta.toByteArray())
                                                        val encryptedmime = hybridEncrypt.encrypt(mimetype.toByteArray(), mimetype.toByteArray())
                                                        val encryptedtype = hybridEncrypt.encrypt(typemeta.toByteArray(), typemeta.toByteArray())
                                                        val encryptedevid = hybridEncrypt.encrypt(evidmeta.toByteArray(), evidmeta.toByteArray())

                                                        // Creating and applying the encryptted metadata to the evidence file
                                                        val mStorageMeta = StorageMetadata.Builder().setCustomMetadata("coordinates", encryptedlat.toString()+", "+encryptedlon.toString())
                                                                .setCustomMetadata("address", encryptedadds.toString()).setCustomMetadata("date", encrypteddate.toString()).setCustomMetadata("incident", encryptedtype.toString())
                                                                .setCustomMetadata("mimetype", encryptedmime.toString()).setCustomMetadata("evidence", encryptedevid.toString())
                                                                .build()

                                                        // Update the evidence file with the above metadata
                                                        mRefPDF.updateMetadata(mStorageMeta).addOnSuccessListener { updatedMetadata ->
                                                                // Evidence file has been updated with metadata
                                                                //Toast.makeText(mContext, updatedMetadata.toString(), Toast.LENGTH_LONG).show()
                                                        }.addOnFailureListener {
                                                                // Uh-oh, an error occurred!
                                                        }

                                                         */

                                                        // Start an asynchronous task for the weather api
                                                        var mGenerateURL = "https://api.openweathermap.org/data/2.5/weather?lat="+latmeta+"&lon="+lonmeta+"&appid="+getString(R.string.weather_api_key)+"&units=metric"
                                                        //mGenerateURL = mGenerateURL.replace(" ".toRegex(), "%20")

                                                        db.collection(type)
                                                                .whereEqualTo("evidenceURL", mIncident.getIncidentEvidenceURL().toString())
                                                                .get()
                                                                .addOnSuccessListener { result ->
                                                                        for (document in result) {
                                                                                //Log.d(TAG, "${document.id} => ${document.data}")
                                                                                val documentID = document.getString("documentID")
                                                                                val mEvidURL = evidURL.toString() + "-pdf"
                                                                                val modify = db.collection(type).document(document.id)
                                                                                modify.update("evidenceURL", mEvidURL)
                                                                                        .addOnSuccessListener {
                                                                                                Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                // Init metadata for the following file incident

                                                                                                // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                            // Check if complaint has been reported to [Eyewitness Community, Human Right Community, Neighborhood Community, News Media Community, Law Enforcement Community]
                                                                        val reportedTo = document.getString("reportedTo").toString()
                                                                        val subtype = document.getString("subType").toString()
                                                                        val stitle = document.getString("title").toString()
                                                                        val sdesc = document.getString("description").toString()
                                                                        if (!reportedTo.isEmpty() && reportedTo.equals("Eyewitness Community", true) ){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Eyewitness Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Eyewitness Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Eyewitness Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Legal Practitioners Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Legal Practitioners Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Legal Practitioners Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Legal Practitioners Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Human Rights Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Human Rights Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Human Rights Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Human Rights Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("News Media Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by News Media Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by News Media Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "News Media Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            }

                                                                        } else if (!reportedTo.isEmpty() && reportedTo.equals("Law Enforcement Community", true)){
                                                                            val modifyStatus = db.collection(type).document(document.id)
                                                                            if (mEvidURL.startsWith("https", true)){
                                                                                modifyStatus.update("status", "Approved")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "public")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been approved by Law Enforcement Community. The report was verified by an authority and is now available for authourized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                            } else {
                                                                                modifyStatus.update("status", "Rejected")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("visibility", "private")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }

                                                                                modifyStatus.update("reviewInfo", "The following complaint has been rejected by Law Enforcement Community. The report was reviewed and disapproved by an authority and will not be available for unauthorized access.")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
                                                                                modifyStatus.update("reviewedBy", "Law Enforcement Community")
                                                                                        .addOnSuccessListener {
                                                                                            Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                            // Init metadata for the following file incident

                                                                                            // Setting up a HTTP Get Request to obtain the weather api json response
                                                                                        }
                                                                                        .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }


                                                                            }

                                                                        }

                                                                                AndroidNetworking.get(mGenerateURL).setPriority(Priority.MEDIUM).build()
                                                                                        .getAsJSONObject(object: JSONObjectRequestListener {
                                                                                                override fun onResponse(response: JSONObject) {
                                                                                                        try {

                                                                                                                // Retrieve the Generated JSONObject & JSONArray
                                                                                                                val mWeather = response.getJSONArray("weather").getJSONObject(0)
                                                                                                                val mWind = response.getJSONObject("wind")
                                                                                                                val mMain = response.getJSONObject("main")
                                                                                                                val mSys = response.getJSONObject("sys")
                                                                                                                val mSky = response.getJSONObject("clouds")

                                                                                                                val mDesc = mWeather.getString("description")
                                                                                                                val mTemp = mMain.getString("temp") + "°C"
                                                                                                                val mPressure = mMain.getString("pressure") + "hPs"
                                                                                                                val mHumidity = mMain.getString("humidity") + " %"
                                                                                                                val mWindSpeed = mWind.getString("speed") + " m/s"
                                                                                                                val mWindAngle = mWind.getString("deg") + " deg"
                                                                                                                val mFeelsLike = mMain.getString("feels_like") + "°C"
                                                                                                                val mTempMin = mMain.getString("temp_min") + "°C"
                                                                                                                val mTempMax = mMain.getString("temp_max") + "°C"
                                                                                                                val mSunrise = mSys.getString("sunrise")
                                                                                                                val mSunset = mSys.getString("sunset")
                                                                                                                val mCloud = mSky.getString("all") + " %"


                                                                                                                val modify = db.collection(type).document(document.id)
                                                                                                                modify.update("weatherDesc", mDesc)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Get user status from an input string extra
                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                // Start activity to describe incident
                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))

                                                                                                                        }
                                                                                                                        .addOnFailureListener {
                                                                                                                                // Get user status from an input string extra
                                                                                                                                val mStatus = intent.getStringExtra("Tag")
                                                                                                                                // Create an array and pass user credentials via intent put extra
                                                                                                                                val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                                                // Start activity to describe incident
                                                                                                                                startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                                        }

                                                                                                                modify.update("weatherTemp", mTemp)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherPressure", mPressure)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherHumidity", mHumidity)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherWindSpeed", mWindSpeed)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                modify.update("weatherWindAngle", mWindAngle)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherFeelsLike", mFeelsLike)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherTempMin", mTempMin)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherTempMax", mTempMax)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherSunrise", mSunrise)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherSunset", mSunset)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}

                                                                                                                modify.update("weatherClouds", mCloud)
                                                                                                                        .addOnSuccessListener {
                                                                                                                                //Log.d(TAG, "DocumentSnapshot successfully written!")
                                                                                                                                // Init metadata for the following file incident


                                                                                                                        }
                                                                                                                        .addOnFailureListener { e -> /*Log.w(TAG, "Error writing document", e) */}


                                                                                                                //Toast.makeText(mContext, mTemp, Toast.LENGTH_LONG).show()

                                                                                                        } catch (e: Exception) {
                                                                                                                Toast.makeText(mContext, e.toString(), Toast.LENGTH_LONG).show()
                                                                                                        }
                                                                                                }

                                                                                                override fun onError(anError: ANError?) {
                                                                                                        Toast.makeText(mContext, anError.toString(), Toast.LENGTH_LONG).show()
                                                                                                        // Get user status from an input string extra
                                                                                                        val mStatus = intent.getStringExtra("Tag")
                                                                                                        // Create an array and pass user credentials via intent put extra
                                                                                                        val array = arrayOf(type, mEvidURL, documentID, mStatus) // Pass to an array of string
                                                                                                        // Start activity to describe incident
                                                                                                        startActivity(Intent(mContext, DescribeIncident::class.java).putExtra("Tag", array))
                                                                                                }
                                                                                        })

                                                                                // Obtain the SupportMapFragment and get notified when the map is ready to be used.
                                                                                val mapFragment = supportFragmentManager
                                                                                        .findFragmentById(R.id.map) as SupportMapFragment
                                                                                mapFragment.getMapAsync(this@MapActivity)

                                                                        }
                                                                }
                                                                .addOnFailureListener { exception ->
                                                                        //Log.d(TAG, "Error getting documents: ", exception)
                                                                }
                                                }
                                        }.addOnFailureListener { err ->
                                                Toast.makeText(this@MapActivity, err.toString(), Toast.LENGTH_LONG).show()
                                        }


                                }
                        }).addOnFailureListener(object : OnFailureListener {
                                override fun onFailure(@NonNull e: Exception) {
                                        progress.dismiss()
                                        val parentLayout: View = findViewById(android.R.id.content)
                                        Snackbar.make(parentLayout, "Sorry ♥, something went wrong. Try again.", Snackbar.LENGTH_LONG)
                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                .show()

                                }
                        }).addOnProgressListener(object : OnProgressListener<UploadTask.TaskSnapshot?> {
                                override fun onProgress(taskSnapshot: UploadTask.TaskSnapshot) {
                                        val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                        progress.setMessage("Uploaded " + progres_time.toInt() + " %")

                                }
                        })
                                                                } else {
                                                                        val parentLayout: View = findViewById(android.R.id.content)
                                                                        Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                                .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                                .show()
                                                                }

                                                        } else {
                                                                val parentLayout: View = findViewById(android.R.id.content)
                                                                Snackbar.make(parentLayout, "Insufficient Memory! Buy storage", Snackbar.LENGTH_LONG)
                                                                        .setActionTextColor(resources.getColor(android.R.color.holo_red_light))
                                                                        .show()
                                                        }


                                                }

                                        }
                                        .addOnFailureListener { e ->


                                        }
                        }


                }
        }


        fun downloadVideoToLocalFile(evidURL: String) {
                if (evidURL != null) {

                        mRefVideo = mStorage.getReferenceFromUrl(evidURL)
                        val progress = ProgressDialog(this)
                        progress.setTitle("Loading....")
                        progress.show()

                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                        val rootPath = File(mContext.filesDir, "EyeWitness")
                        val subPath = File(rootPath, "Video")
                        if (!subPath.exists()) {
                                subPath.mkdirs();
                        }
                        val localFile = File(subPath, mStamp.toString() + ".mp4")

                        if (!localFile.canRead()) {
                                try {
                                        mRefVideo.getFile(localFile)
                                                .addOnSuccessListener {
                                                        if (localFile.canRead()) {
                                                                progress.dismiss()
                                                                startActivity(Intent(this, ExoActivity::class.java).putExtra("Tag", localFile.absoluteFile.toString()))

                                                        }
                                                }
                                                .addOnFailureListener { exception ->

                                                        Toast.makeText(this, exception.message, Toast.LENGTH_LONG).show()
                                                }
                                                .addOnProgressListener { taskSnapshot ->
                                                        // progress percentage
                                                        val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                        progress.setMessage("Please wait " + progres_time.toInt() + " %")
                                                }
                                } catch (e: IOException) {
                                        e.printStackTrace()
                                }

                        } else {

                                progress.dismiss()
                                startActivity(Intent(this, ExoActivity::class.java).putExtra("Tag", localFile.absoluteFile.toString()))
                        }


                } else {
                        Toast.makeText(this, "Upload file before downloading", Toast.LENGTH_LONG).show()
                }

        }


        fun downloadAudioToLocalFile(evidURL: String) {
                if (evidURL != null) {

                        mRefAudio = mStorage.getReferenceFromUrl(evidURL)
                        val progress = ProgressDialog(this)
                        progress.setTitle("Loading....")
                        progress.show()

                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                        val rootPath = File(mContext.filesDir, "EyeWitness")
                        val subPath = File(rootPath, "Audio")
                        if (!subPath.exists()) {
                                subPath.mkdirs();
                        }
                        val localFile = File(subPath, mStamp.toString() + ".mp3")

                        try {
                                mRefAudio.getFile(localFile)
                                        .addOnSuccessListener {
                                                if (localFile.canRead()) {
                                                        progress.dismiss()
                                                        startActivity(Intent(this, ExoActivity::class.java).putExtra("Tag", localFile.absoluteFile.toString()))

                                                }
                                        }
                                        .addOnFailureListener { exception ->

                                                Toast.makeText(this, exception.message, Toast.LENGTH_LONG).show()
                                        }
                                        .addOnProgressListener { taskSnapshot ->
                                                // progress percentage
                                                val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                progress.setMessage("Please wait " + progres_time.toInt() + " %")
                                        }
                        } catch (e: IOException) {
                                e.printStackTrace()
                        }


                } else {
                        Toast.makeText(this, "Upload file before downloading", Toast.LENGTH_LONG).show()
                }


        }


        fun downloadImageToLocalFile(evidURL: String) {
                if (evidURL != null) {

                        mRefPhoto = mStorage.getReferenceFromUrl(evidURL)
                        val progress = ProgressDialog(this)
                        progress.setTitle("Loading....")
                        progress.show()

                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                        val rootPath = File(mContext.filesDir, "EyeWitness")
                        val subPath = File(rootPath, "Image")
                        if (!subPath.exists()) {
                                subPath.mkdirs();
                        }
                        val localFile = File(subPath, mStamp.toString() + ".jpg")

                        try {
                                mRefPhoto.getFile(localFile)
                                        .addOnSuccessListener {
                                                if (localFile.canRead()) {
                                                        progress.dismiss()
                                                        startActivity(Intent(this, ImageActivity::class.java).putExtra("Tag", localFile.absoluteFile.toString()))

                                                }
                                        }
                                        .addOnFailureListener { exception ->

                                                Toast.makeText(this, exception.message, Toast.LENGTH_LONG).show()
                                        }
                                        .addOnProgressListener { taskSnapshot ->
                                                // progress percentage
                                                val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                progress.setMessage("Please wait " + progres_time.toInt() + " %")
                                        }
                        } catch (e: IOException) {
                                e.printStackTrace()
                        }


                } else {
                        Toast.makeText(this, "Upload file before downloading", Toast.LENGTH_LONG).show()
                }


        }

        fun downloadDocToLocalFile(evidURL: String) {
                if (evidURL != null) {

                        mRefDOC = mStorage.getReferenceFromUrl(evidURL)
                        val progress = ProgressDialog(this)
                        progress.setTitle("Loading....")
                        progress.show()

                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                        val rootPath = File(mContext.filesDir, "EyeWitness")
                        val subPath = File(rootPath, "Docx")
                        if (!subPath.exists()) {
                                subPath.mkdirs();
                        }
                        val localFile = File(subPath, mStamp.toString() + ".docx")

                        try {
                                mRefDOC.getFile(localFile)
                                        .addOnSuccessListener {
                                                if (localFile.canRead()) {
                                                        progress.dismiss()
                                                        // Load Pdf from local file
                                                        startActivity(Intent(this, PDFActivity::class.java).putExtra("Tag", localFile.absoluteFile.toString()))

                                                }
                                        }
                                        .addOnFailureListener { exception ->

                                                Toast.makeText(this, exception.message, Toast.LENGTH_LONG).show()
                                        }
                                        .addOnProgressListener { taskSnapshot ->
                                                // progress percentage
                                                val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                progress.setMessage("Please wait " + progres_time.toInt() + " %")
                                        }
                        } catch (e: IOException) {
                                e.printStackTrace()
                        }


                } else {
                        Toast.makeText(this, "Upload file before downloading", Toast.LENGTH_LONG).show()
                }


        }


        fun downloadPdfToLocalFile(evidURL: String) {
                if (evidURL != null) {

                        mRefPDF = mStorage.getReferenceFromUrl(evidURL)
                        val progress = ProgressDialog(this)
                        progress.setTitle("Loading....")
                        progress.show()

                        val mStamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(Date())
                        val rootPath = File(mContext.filesDir, "EyeWitness")
                        val subPath = File(rootPath, "Pdf")
                        if (!subPath.exists()) {
                                subPath.mkdirs();
                        }
                        val localFile = File(subPath, mStamp.toString() + ".pdf")

                        try {
                                mRefPDF.getFile(localFile)
                                        .addOnSuccessListener {
                                                if (localFile.canRead()) {
                                                        progress.dismiss()
                                                        // Load Pdf from local file
                                                        startActivity(Intent(this, PDFActivity::class.java).putExtra("Tag", localFile.absoluteFile.toString()))
                                                }
                                        }
                                        .addOnFailureListener { exception ->

                                                Toast.makeText(this, exception.message, Toast.LENGTH_LONG).show()
                                        }
                                        .addOnProgressListener { taskSnapshot ->
                                                // progress percentage
                                                val progres_time = 100.0 * taskSnapshot.bytesTransferred / taskSnapshot.totalByteCount
                                                progress.setMessage("Please wait " + progres_time.toInt() + " %")
                                        }
                        } catch (e: IOException) {
                                e.printStackTrace()
                        }


                } else {
                        Toast.makeText(this, "Upload file before downloading", Toast.LENGTH_LONG).show()
                }


        }


        fun deleteFileForce(mFile: File) {
                if (mFile.exists()) {
                        mFile.delete()
                }
        }


        // [START on_start_check_user]
        public override fun onStart() {
                super.onStart()
                // Check if user is signed in (non-null) and update UI accordingly.
                val currentUser = auth.currentUser
                updateUI(currentUser)

        }
        // [END on_start_check_user]


        private fun updateUI(user: FirebaseUser?) {

        }



    private fun requestPermission(){
        var mIndex: Int = -1
        val requestList: Array<String> = Array(10, { "" } )

        // Access photos Permission
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            mIndex ++
            requestList[mIndex] = Manifest.permission.READ_EXTERNAL_STORAGE
        }

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            mIndex ++
            requestList[mIndex] = Manifest.permission.WRITE_EXTERNAL_STORAGE
        }

        // Location Permission
        if (ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED
                && ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            mIndex ++
            requestList[mIndex] = Manifest.permission.ACCESS_FINE_LOCATION
        }else{
            getLocation()
        }

        if (ActivityCompat.checkSelfPermission(mContext, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
            mIndex ++
            requestList[mIndex] = Manifest.permission.CAMERA
        }

        if (ActivityCompat.checkSelfPermission(mContext, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {
            mIndex ++
            requestList[mIndex] = Manifest.permission.CALL_PHONE
        }

        if(mIndex != -1){
            ActivityCompat.requestPermissions(this@MapActivity, requestList, PERMISSIONS_REQUEST_ALL)
        }
    }

    private fun jsPermissionAccepted(){
        mJsRequestCount --
        if (mPermissionRequest != null && mJsRequestCount == 0){
            mPermissionRequest!!.grant(mPermissionRequest!!.resources)
        }
    }
    private fun askForPermission(permissionCode: Int, request: Boolean): Boolean{
        when(permissionCode){
            PERMISSIONS_REQUEST_LOCATION ->
                if (Build.VERSION.SDK_INT > 23 && ContextCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                    if(request) {
                        if (ActivityCompat.shouldShowRequestPermissionRationale(this@MapActivity,
                                        Manifest.permission.ACCESS_FINE_LOCATION)){
                            UtilMethods.showSnackbar(root_container, "Location permission is required, Please allow from permission manager!!")
                            Toast.makeText(this@MapActivity, "Location permission is required, Please allow from permission manager!!", Toast.LENGTH_LONG).show()
                        }else {
                            ActivityCompat.requestPermissions(this@MapActivity, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), PERMISSIONS_REQUEST_LOCATION)
                        }
                    }
                    return false
                }else{
                    jsPermissionAccepted()
                    return true
                }
            PERMISSIONS_REQUEST_CAMERA ->
                if (Build.VERSION.SDK_INT > 23 && ContextCompat.checkSelfPermission(mContext, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
                    if(request) {
                        if (ActivityCompat.shouldShowRequestPermissionRationale(this@MapActivity,
                                        Manifest.permission.CAMERA)){
                            UtilMethods.showSnackbar(root_container, "Camera permission is required, Please allow from permission manager!!")
                            Toast.makeText(this@MapActivity, "Camera permission is required, Please allow from permission manager!!", Toast.LENGTH_LONG).show()
                        }else {
                            ActivityCompat.requestPermissions(this@MapActivity, arrayOf(Manifest.permission.CAMERA), PERMISSIONS_REQUEST_CAMERA)
                        }
                    }
                    return false
                }else{
                    jsPermissionAccepted()
                    return true
                }
            PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE ->
                if (Build.VERSION.SDK_INT > 23 && ContextCompat.checkSelfPermission(mContext, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                    if(request) {
                        if (ActivityCompat.shouldShowRequestPermissionRationale(this@MapActivity,
                                        Manifest.permission.WRITE_EXTERNAL_STORAGE)){
                            UtilMethods.showSnackbar(root_container, "Write permission is required, Please allow from permission manager!!")
                            Toast.makeText(this@MapActivity, "Write permission is required, Please allow from permission manager!!", Toast.LENGTH_LONG).show()
                        }else {
                            ActivityCompat.requestPermissions(this@MapActivity, arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE), PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE)
                        }
                    }
                    return false
                }else{
                    jsPermissionAccepted()
                    return true
                }
            PERMISSIONS_REQUEST_MICROPHONE ->
                if (Build.VERSION.SDK_INT > 23 && ContextCompat.checkSelfPermission(mContext, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {
                    if(request) {
                        if (ActivityCompat.shouldShowRequestPermissionRationale(this@MapActivity,
                                        Manifest.permission.RECORD_AUDIO)) {
                            UtilMethods.showSnackbar(root_container, "Audio permission is required, Please allow from permission manager!!")
                            Toast.makeText(this@MapActivity, "Audio permission is required, Please allow from permission manager!!", Toast.LENGTH_LONG).show()
                        } else
                            ActivityCompat.requestPermissions(this@MapActivity, arrayOf(Manifest.permission.RECORD_AUDIO), PERMISSIONS_REQUEST_MICROPHONE)
                    }
                    return false
                }else{
                    jsPermissionAccepted()
                    return true
                }
            PHONE_PERMISSION_CODE ->
                if (Build.VERSION.SDK_INT > 23 && ContextCompat.checkSelfPermission(mContext, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {
                    if(request) {
                        if (ActivityCompat.shouldShowRequestPermissionRationale(this@MapActivity,
                                        Manifest.permission.CALL_PHONE)) {
                            UtilMethods.showSnackbar(root_container, "Call phone permission is required, Please allow from permission manager!!")
                            Toast.makeText(this@MapActivity, "Call phone permission is required, Please allow from permission manager!!", Toast.LENGTH_LONG).show()
                        } else
                            ActivityCompat.requestPermissions(this@MapActivity, arrayOf(Manifest.permission.CALL_PHONE), PHONE_PERMISSION_CODE)
                    }
                    return false
                }else{
                    jsPermissionAccepted()
                    return true
                }
        }
        return false
    }

    // get user location for
    private fun getLocation(): String {
        var newloc = "0,0"
        //Checking for location permissions
        if (askForPermission(PERMISSIONS_REQUEST_LOCATION, false)) {
            val cookieManager = CookieManager.getInstance()
            cookieManager.setAcceptCookie(true)
            val gps = WebviewGPSTrack(mContext)
            val latitude = gps.getLatitude()
            val longitude = gps.getLongitude()
            if (gps.canGetLocation()) {
                if (latitude != 0.0 || longitude != 0.0) {
                    cookieManager.setCookie(mDefaultURL, "lat=$latitude")
                    cookieManager.setCookie(mDefaultURL, "long=$longitude")
                    newloc = "$latitude,$longitude"
                } else {
                    UtilMethods.printLog(TAG, "Location null.")
                }
            } else {
                UtilMethods.printLog(TAG, "Location read failed.")
            }
        }
        return newloc
    }

    private fun locationSettingsRequest() {
        val locationManager = mContext
                .getSystemService(Service.LOCATION_SERVICE) as LocationManager
        val isGPSEnabled = locationManager
                .isProviderEnabled(LocationManager.GPS_PROVIDER)

        if (askForPermission(PERMISSIONS_REQUEST_LOCATION, false) && isGPSEnabled == false) {
            val mLocationRequest = LocationRequest.create()
                    .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)
                    .setInterval(2000)
                    .setFastestInterval(1000)

            val settingsBuilder = LocationSettingsRequest.Builder()
                    .addLocationRequest(mLocationRequest)
            settingsBuilder.setAlwaysShow(true)

            val result = LocationServices.getSettingsClient(mContext)
                    .checkLocationSettings(settingsBuilder.build())
            result.addOnCompleteListener { task ->
                try {
                    task.getResult(ApiException::class.java)
                } catch (ex: ApiException) {

                    when (ex.statusCode) {
                        LocationSettingsStatusCodes.RESOLUTION_REQUIRED -> try {
                            Toast.makeText(mContext, "GPS IS OFF", Toast.LENGTH_SHORT).show()
                            val resolvableApiException = ex as ResolvableApiException
                            resolvableApiException.startResolutionForResult(this, REQUEST_CHECK_SETTINGS)
                        } catch (e: IntentSender.SendIntentException) {
                            Toast.makeText(mContext, "PendingIntent unable to execute request.", Toast.LENGTH_SHORT).show()

                        }
                        LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE -> {
                            Toast.makeText(
                                    mContext,
                                    "Something is wrong in your GPS",
                                    Toast.LENGTH_SHORT
                            ).show()
                        }
                    }
                }
            }
        }
    }


        private fun setActiveFullScreen() {
                window.decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                        or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                        or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                        or View.SYSTEM_UI_FLAG_LOW_PROFILE
                        or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                        or View.SYSTEM_UI_FLAG_FULLSCREEN
                        or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY)
        }


        // Social Network dialog
        private fun showSocialNetwork(){
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_social, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mSocialNetworkPopup = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mSocialNetworkPopup.setBackgroundDrawable(colorDrawable)
                mSocialNetworkPopup.isOutsideTouchable = true

                if (Build.VERSION.SDK_INT >= 21) {
                        mSocialNetworkPopup.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mSocialNetworkPopup.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mSocialNetworkPopup.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

                //val txtTitle = popUpView.findViewById<View>(R.id.txt_about_us_title) as TextView
                //val txtDetail = popUpView.findViewById<View>(R.id.txt_about_us_detail) as TextView
                val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton
                val btnFacebook = popUpView.findViewById<View>(R.id.img_facebook) as ImageView
                val btnTwitter = popUpView.findViewById<View>(R.id.img_twitter) as ImageView
                val btnTelegram = popUpView.findViewById<View>(R.id.img_telegram) as ImageView
                val btnYoutube = popUpView.findViewById<View>(R.id.img_youtube) as ImageView
                val btnQuora = popUpView.findViewById<View>(R.id.img_quora) as ImageView
                val btnSoundcloud = popUpView.findViewById<View>(R.id.img_soundcloud) as ImageView

                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                //txtTitle.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_WEBSITE, "")
                //txtDetail.text = PreferenceUtils.getStringValue(Constants.KEY_ABOUT_TEXT, "")
                btnConfirm.setOnClickListener { mSocialNetworkPopup.dismiss() }
                btnFacebook.setOnClickListener {
                        startActivity(Intent(mContext, HomeActivity::class.java).putExtra("Tag", "https://mobile.facebook.com/"))
                        mSocialNetworkPopup.dismiss()
                }

                btnTwitter.setOnClickListener {
                        startActivity(Intent(mContext, HomeActivity::class.java).putExtra("Tag", "https://mobile.twitter.com/"))
                        mSocialNetworkPopup.dismiss()
                }

                btnTelegram.setOnClickListener {
                        startActivity(Intent(mContext, HomeActivity::class.java).putExtra("Tag", "https://web.telegram.org/"))
                        mSocialNetworkPopup.dismiss()
                }

                btnYoutube.setOnClickListener {
                        startActivity(Intent(mContext, HomeActivity::class.java).putExtra("Tag", "https://m.youtube.com/"))
                        mSocialNetworkPopup.dismiss()
                }

                btnQuora.setOnClickListener {
                        startActivity(Intent(mContext, HomeActivity::class.java).putExtra("Tag", "https://www.quora.com/"))
                        mSocialNetworkPopup.dismiss()
                }

                btnSoundcloud.setOnClickListener {
                        startActivity(Intent(mContext, HomeActivity::class.java).putExtra("Tag", "https://html5games.com/"))
                        mSocialNetworkPopup.dismiss()
                }
        }

        // About us dialog
        private fun showAboutUs(){
                val inflater = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                val popUpView = inflater.inflate(R.layout.layout_about_us, null)

                val colorDrawable = ColorDrawable(ContextCompat.getColor(mContext, R.color.black))
                colorDrawable.alpha = 70

                mAboutUsPopup = PopupWindow(popUpView, WindowManager.LayoutParams.MATCH_PARENT,
                        WindowManager.LayoutParams.MATCH_PARENT)
                mAboutUsPopup.setBackgroundDrawable(colorDrawable)
                mAboutUsPopup.isOutsideTouchable = true

                if (Build.VERSION.SDK_INT >= 21) {
                        mAboutUsPopup.setElevation(5.0f)
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        mAboutUsPopup.showAsDropDown(popUpView, Gravity.CENTER, 0, Gravity.CENTER)
                } else {
                        mAboutUsPopup.showAsDropDown(popUpView, Gravity.CENTER, 0)
                }

                val txtTitle = popUpView.findViewById<View>(R.id.txt_about_us_title) as TextView
                val txtDetail = popUpView.findViewById<View>(R.id.txt_about_us_detail) as TextView
                val btnConfirm = popUpView.findViewById<View>(R.id.btn_done) as AppCompatButton
                val btnCall = popUpView.findViewById<View>(R.id.img_call) as ImageView
                val btnEmail = popUpView.findViewById<View>(R.id.img_email) as ImageView
                val btnWebsite = popUpView.findViewById<View>(R.id.img_website) as ImageView

                btnConfirm.background = GradientDrawable(
                        GradientDrawable.Orientation.LEFT_RIGHT,
                        intArrayOf(ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryColor()),
                                ContextCompat.getColor(mContext, UtilMethods.getThemePrimaryDarkColor())))

                txtTitle.text = getString(R.string.title_user_version)
                txtDetail.text = getString(R.string.title_about_us)
                btnConfirm.setOnClickListener { mAboutUsPopup.dismiss() }
                btnCall.setOnClickListener {
                    // Request permission and Show emergency dialog
                    ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.CALL_PHONE), PHONE_PERMISSION_CODE)
                    Toast.makeText(mContext, "Initiating a call to " + getString(R.string.app_name)+" Team", Toast.LENGTH_LONG).show()
                    mAboutUsPopup.dismiss()
                    val callIntent = Intent(Intent.ACTION_CALL)
                    callIntent.data = Uri.parse("tel:" + getString(R.string.contact_phone))
                    startActivity(callIntent)
                }

                btnWebsite.setOnClickListener {
                    startActivity(Intent(this, HomeActivity::class.java).putExtra("Tag", getString(R.string.web_address)))
                }

                btnEmail.setOnClickListener {  UtilMethods.sandMailTo(mContext, "Contact with email!",
                        getString(R.string.title_user_email),
                        "Contact with via "+ R.string.app_name +" app", "") }
        }



        private fun initClickEvent(){
                // menu click toggle left
                img_left_menu.setOnClickListener{
                        // slier menu open from left
                        val params = DrawerLayout.LayoutParams(DrawerLayout.LayoutParams.WRAP_CONTENT, DrawerLayout.LayoutParams.MATCH_PARENT)
                        val gravityCompat: Int

                        if (PreferenceUtils.getInstance().getBooleanValue(Constants.KEY_RTL_ACTIVE, false)){
                                params.gravity = Gravity.END
                                gravityCompat = GravityCompat.END
                                navigation_view.layoutParams = params
                        }else{
                                params.gravity = Gravity.START
                                gravityCompat = GravityCompat.START
                                navigation_view.layoutParams = params
                        }

                        val navigationLeftMenu = PreferenceUtils.getInstance().getStringValue(Constants.KEY_LEFT_MENU_STYLE, Constants.LEFT_MENU_SLIDER)
                        if(navigationLeftMenu == Constants.LEFT_MENU_SLIDER){
                                Handler().postDelayed({
                                        if (drawer_layout.isDrawerOpen(gravityCompat)){
                                                drawer_layout.closeDrawer(gravityCompat)
                                        }else{
                                                drawer_layout.openDrawer(gravityCompat)
                                        }
                                }, 100)
                        }else if(navigationLeftMenu == Constants.LEFT_MENU_RELOAD){
                                // request for reload again website
                                //webviewReload()
                        }else if(navigationLeftMenu == Constants.LEFT_MENU_SHARE){
                                UtilMethods.shareTheApp(mContext,
                                        "Download "+ getString(R.string.app_name)+"" +
                                                " app from play store. Click here: "+"" +
                                                "https://play.google.com/store/apps/details?id="+packageName+"/")
                        }else if(navigationLeftMenu == Constants.LEFT_MENU_HOME){
                                //isViewLoaded = false
                                //loadBaseWebView()
                        }else if(navigationLeftMenu == Constants.LEFT_MENU_EXIT){
                                exitHomeScreen()
                        }else if(navigationLeftMenu == Constants.LEFT_MENU_HIDE){
                                // menu is hidden
                        }
                }

                // menu click toggle right
                img_right_menu_exit.setOnClickListener{
                        // slier menu open from left
                        val params = DrawerLayout.LayoutParams(DrawerLayout.LayoutParams.WRAP_CONTENT, DrawerLayout.LayoutParams.MATCH_PARENT)
                        val gravityCompat: Int

                        if (PreferenceUtils.getInstance().getBooleanValue(Constants.KEY_RTL_ACTIVE, false)){
                                params.gravity = Gravity.START
                                gravityCompat = GravityCompat.START
                                navigation_view.layoutParams = params
                        }else{
                                params.gravity = Gravity.END
                                gravityCompat = GravityCompat.END
                                navigation_view.layoutParams = params
                        }

                        val navigationRightMenu = PreferenceUtils.getInstance().getStringValue(Constants.KEY_RIGHT_MENU_STYLE, Constants.RIGHT_MENU_SLIDER)
                        if(navigationRightMenu == Constants.RIGHT_MENU_SLIDER){
                                Handler().postDelayed({
                                        if (drawer_layout.isDrawerOpen(gravityCompat)) {
                                                drawer_layout.closeDrawer(gravityCompat)
                                        } else {
                                                drawer_layout.openDrawer(gravityCompat)
                                        }
                                }, 100)
                        }else if(navigationRightMenu == Constants.RIGHT_MENU_RELOAD){
                                // request for reload again website
                                //webviewReload()
                        }else if(navigationRightMenu == Constants.RIGHT_MENU_SHARE){
                                UtilMethods.shareTheApp(mContext,
                                        "Download "+ getString(R.string.app_name)+"" +
                                                " app from play store. Click here: "+"" +
                                                "https://play.google.com/store/apps/details?id="+packageName+"/")
                        }else if(navigationRightMenu == Constants.RIGHT_MENU_HOME){
                                //isViewLoaded = false
                                //loadWebView("https://www.eyewitness.global/welcome")
                        }else if(navigationRightMenu == Constants.RIGHT_MENU_EXIT){
                                exitHomeScreen()
                        }else if(navigationRightMenu == Constants.RIGHT_MENU_HIDE){
                                // menu is hidden
                        } else {

                        }
                }
        }


        private fun initSliderMenu() {
                if (PreferenceUtils.getInstance().getBooleanValue(Constants.KEY_RTL_ACTIVE, false)) {
                        navigation_view.layoutDirection = View.LAYOUT_DIRECTION_RTL
                        navigation_view.textDirection = View.TEXT_DIRECTION_RTL
                }

                navigation_view.itemIconTintList = null
                val navigationMenu = navigation_view.menu
                navigationMenu.clear()

                /**
                 * If you need to add menu with icon
                 * menu.add(0, R.string.menu_home, Menu.NONE, R.string.menu_home).setIcon(R.drawable.ic_home)**/

                var subMenu: SubMenu
                subMenu = navigationMenu.addSubMenu("Menu")
                //subMenu.add(0, R.string.menu_home, Menu.NONE, getString(R.string.menu_home)).setIcon(R.drawable.ic_home)

                //var i = 1
                //for(menu in AppDataInstance.navigationMenus){
                //    when(menu.url) {
                subMenu.add(0, R.string.menu_home, Menu.NONE, getString(R.string.menu_home)).setIcon(R.drawable.ic_home)
                //subMenu.add(1, R.string.menu_map, Menu.NONE, getString(R.string.menu_map)).setIcon(R.drawable.ic_label)
                subMenu.add(2, R.string.menu_bot, Menu.NONE, getString(R.string.menu_bot)).setIcon(R.drawable.ic_label)
                subMenu.add(3, R.string.menu_profile, Menu.NONE, getString(R.string.menu_profile)).setIcon(R.drawable.ic_label)
                subMenu.add(4, R.string.menu_social, Menu.NONE, getString(R.string.menu_social)).setIcon(R.drawable.ic_label)
                //subMenu.add(5, R.string.menu_game, Menu.NONE, getString(R.string.menu_game)).setIcon(R.drawable.ic_label)
                subMenu.add(6, R.string.menu_about, Menu.NONE, getString(R.string.menu_about)).setIcon(R.drawable.ic_info)
                subMenu.add(7, R.string.menu_rate, Menu.NONE, getString(R.string.menu_rate)).setIcon(R.drawable.ic_rate)
                subMenu.add(8, R.string.menu_share, Menu.NONE, getString(R.string.menu_share)).setIcon(R.drawable.ic_share)
                subMenu.add(9, R.string.menu_exit, Menu.NONE, getString(R.string.menu_exit)).setIcon(R.drawable.ic_exit)


                /*
                // For using menu gorup
                "http://infixsoft.com/" -> {
                    subMenu = navigationMenu.addSubMenu("Website")
                    subMenu.add(i++, i-2, Menu.NONE, menu.name).setIcon(R.drawable.ic_label)
                }
                */

                // In cage you need to user custom icon
                // "http://infixsoft.com/" ->  subMenu.add(i++, i-2, Menu.NONE, menu.name).setIcon(R.drawable.ic_label)
                //else -> subMenu.add(i++, i-2, Menu.NONE, menu.name).setIcon(R.drawable.ic_label)
                //}
                //}

                navigation_view.setNavigationItemSelectedListener { item ->
                        when (item.itemId) {
                                R.string.menu_home -> { val mItemSelected = intent.getStringExtra("Tag"); if (mItemSelected.equals("user", true)) { startActivity(Intent(mContext, DashUserActivity::class.java));} else if (mItemSelected.equals("agency", true)) {startActivity(Intent(mContext, DashAgencyActivity::class.java));};  true}
                                //R.string.menu_map -> { val mItemSelected = intent.getStringExtra("Tag"); startActivity(Intent(mContext, MapActivity::class.java).putExtra("Tag", mItemSelected)); true}
                                R.string.menu_bot -> { startActivity(Intent(mContext, ChatActivity::class.java)); true}
                                R.string.menu_profile -> { val mItemSelected = intent.getStringExtra("Tag"); if (mItemSelected.equals("user", true)) { startActivity(Intent(mContext, UserProfActivity::class.java));} else if (mItemSelected.equals("agency", true)) {startActivity(Intent(mContext, AgencyProfActivity::class.java));}; true}
                                R.string.menu_social -> { showSocialNetwork(); true}
                                //R.string.menu_game -> { startActivity(Intent(mContext, HomeActivity::class.java).putExtra("Tag", "https://html5games.com/")); true}
                                R.string.menu_about -> { showAboutUs(); true}
                                R.string.menu_rate -> { UtilMethods.rateTheApp(mContext); true}
                                R.string.menu_share -> { UtilMethods.shareTheApp(mContext,
                                        "Download "+ getString(R.string.app_name)+"" +
                                                " app from play store. Click here: "+"" +
                                                "https://play.google.com/store/apps/details?id="+packageName+"/"); true}
                                R.string.menu_exit -> { exitHomeScreen(); true}


                                else -> {""; false}

                        }



                }

        }


        override fun onNavigationItemSelected(item: MenuItem): Boolean {
                when (item.itemId) {
                        //R.string.menu_home -> startActivity(Intent(mContext, DashUserActivity::class.java))
                        //R.string.menu_map ->  startActivity(Intent(mContext, MapActivity::class.java))
                        R.string.menu_bot ->  startActivity(Intent(mContext, ChatActivity::class.java))
                        //R.string.menu_profile -> startActivity(Intent(mContext, UserProfActivity::class.java))
                        R.string.menu_social -> showSocialNetwork()
                        //R.string.menu_game -> startActivity(Intent(mContext, HomeActivity::class.java).putExtra("Tag", "https://html5games.com/"))
                        R.string.menu_about -> showAboutUs()
                        R.string.menu_rate -> UtilMethods.rateTheApp(mContext)
                        R.string.menu_share -> UtilMethods.shareTheApp(mContext,
                                "Download "+ getString(R.string.app_name)+"" +
                                        " app from play store. Click here: "+"" +
                                        "https://play.google.com/store/apps/details?id="+packageName+"/")
                        R.string.menu_exit -> exitHomeScreen()
                        else ->
                                try {
                                        //loadWebView("https://www.eyewitness.global/welcome")
                                }catch (ex: Exception){
                                        ex.printStackTrace()
                                }
                }

                if (drawer_layout.isDrawerOpen(GravityCompat.START)) run {
                        drawer_layout.closeDrawer(GravityCompat.START)
                }else if (drawer_layout.isDrawerOpen(GravityCompat.END)) run {
                        drawer_layout.closeDrawer(GravityCompat.END)
                }
                return true
        }


    private fun exitHomeScreen() {
        auth.signOut()
        startActivity(Intent(this, AuthUIActivity::class.java))
    }

        override fun onBackPressed() {
                if (drawer_layout.isDrawerOpen(GravityCompat.START)) run {
                        drawer_layout.closeDrawer(GravityCompat.START)
                } else if (drawer_layout.isDrawerOpen(GravityCompat.END)) run {
                        drawer_layout.closeDrawer(GravityCompat.END)

                        UtilMethods.showSnackbar(root_container, getString(R.string.massage_exit))

                        Handler().postDelayed({
                                run {
                                }
                        }, 2000)

                }

        }


    override fun onStop() {
        super.onStop()
    }

}